[
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2025-03-03 11:42:53+08:00",
    "commit_src": "f257fca5f6ee32a5a02ac1d2bf5be496390488fe",
    "commit_tgt": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
    "changed_test": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java#testGetAllInstanceWithCacheAndSubscribed",
    "changed_prod": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java#notifyIfSubscribed",
    "test_code_src": "@Test\n    void testGetAllInstanceWithCacheAndSubscribed() throws NacosException {\n        String serviceName = \"service1\";\n        ServiceInfo serviceInfo = new ServiceInfo();\n        serviceInfo.setName(serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(true);\n        List<Instance> result = client.getAllInstances(serviceName);\n        assertEquals(serviceInfo.getHosts().get(0), result.get(0));\n    }",
    "test_code_tgt": "@Test\n    void testGetAllInstanceWithCacheAndSubscribed() throws NacosException {\n        String serviceName = \"service1\";\n        ServiceInfo serviceInfo = new ServiceInfo();\n        serviceInfo.setName(serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP)).thenReturn(serviceInfo);\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(true);\n        List<Instance> result = client.getAllInstances(serviceName);\n        assertEquals(serviceInfo.getHosts().get(0), result.get(0));\n    }",
    "prod_code_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "prod_code_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "test_id": 0,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2025-03-03 11:42:53+08:00",
    "commit_src": "f257fca5f6ee32a5a02ac1d2bf5be496390488fe",
    "commit_tgt": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
    "changed_test": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java#testSubscribeDuplicate",
    "changed_prod": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java#notifyIfSubscribed",
    "test_code_src": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
    "test_code_tgt": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP)).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
    "prod_code_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "prod_code_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "test_id": 1,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2025-03-03 11:42:53+08:00",
    "commit_src": "f257fca5f6ee32a5a02ac1d2bf5be496390488fe",
    "commit_tgt": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
    "changed_test": "client/src/test/java/com/alibaba/nacos/client/naming/cache/ServiceInfoHolderTest.java#testGetFailoverServiceInfo",
    "changed_prod": "client/src/main/java/com/alibaba/nacos/client/naming/cache/ServiceInfoHolder.java#getFailoverServiceInfo",
    "test_code_src": "@Test\n    void testGetFailoverServiceInfo() throws IllegalAccessException, NoSuchFieldException, NacosException {\n        FailoverReactor mock = injectMockFailoverReactor();\n        ServiceInfo serviceInfo = new ServiceInfo(\"a@@b@@c\");\n        when(mock.getService(\"a@@b@@c\")).thenReturn(serviceInfo);\n        assertEquals(serviceInfo, holder.getFailoverServiceInfo(\"b\", \"a\", \"c\"));\n    }",
    "test_code_tgt": "@Test\n    void testGetFailoverServiceInfo() throws IllegalAccessException, NoSuchFieldException, NacosException {\n        FailoverReactor mock = injectMockFailoverReactor();\n        ServiceInfo serviceInfo = new ServiceInfo(\"a@@b@@c\");\n        when(mock.getService(\"a@@b\")).thenReturn(serviceInfo);\n        assertEquals(serviceInfo, holder.getFailoverServiceInfo(\"b\", \"a\"));\n    }",
    "prod_code_src": "public ServiceInfo getFailoverServiceInfo(final String serviceName, final String groupName, final String clusters) {\n        String groupedServiceName = NamingUtils.getGroupedName(serviceName, groupName);\n        String key = ServiceInfo.getKey(groupedServiceName, clusters);\n        return failoverReactor.getService(key);\n    }",
    "prod_code_tgt": "public ServiceInfo getFailoverServiceInfo(final String serviceName, final String groupName) {\n        String key = NamingUtils.getGroupedName(serviceName, groupName);\n        return failoverReactor.getService(key);\n    }",
    "test_id": 2,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2025-02-26 13:32:26+08:00",
    "commit_src": "e6f46f0000d086e077ae79af408181187c77aa69",
    "commit_tgt": "f03cd12bf7f35585acac00bed9b706f22bfedd65",
    "changed_test": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java#testSubscribeDuplicate",
    "changed_prod": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java#notifyIfSubscribed",
    "test_code_src": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(changeNotifier.isSubscribed(Constants.DEFAULT_GROUP, serviceName)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
    "test_code_tgt": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
    "prod_code_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper) {\n        if (changeNotifier.isSubscribed(groupName, serviceName)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "prod_code_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
    "test_id": 3,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2025-02-10 15:21:34+08:00",
    "commit_src": "3f636bfc6fae651fc5bf80396254a50b6234d2f1",
    "commit_tgt": "c7386cf49e74924bec6576665c6c07019ba5b993",
    "changed_test": "config/src/test/java/com/alibaba/nacos/config/server/remote/ConfigQueryRequestHandlerTest.java#testGetTagAutoTag",
    "changed_prod": "config/src/main/java/com/alibaba/nacos/config/server/remote/ConfigQueryRequestHandler.java#handle",
    "test_code_src": "@Test\n    void testGetTagAutoTag() throws Exception {\n        \n        final String groupKey = GroupKey2.getKey(dataId, group, \"\");\n        String content = \"content_from_tag_notdirectread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        ConfigRocksDbDiskService configRocksDbDiskService = Mockito.mock(ConfigRocksDbDiskService.class);\n        when(ConfigDiskServiceFactory.getInstance()).thenReturn(configRocksDbDiskService);\n        \n        String autoTag = \"auto_tag\";\n        CacheItem cacheItem = new CacheItem(groupKey);\n        cacheItem.initConfigGrayIfEmpty(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        cacheItem.getConfigCache().setMd5(MD5Utils.md5Hex(content, \"UTF-8\"));\n        ConfigCacheGray configCacheGrayTag = cacheItem.getConfigCacheGray().get(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        String tagContent = \"content_from_specific_tag_directread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        configCacheGrayTag.setMd5(MD5Utils.md5Hex(tagContent, \"UTF-8\"));\n        configCacheGrayTag.setEncryptedDataKey(\"key_testGetTag_AutoTag_NotDirectRead\");\n        ConfigGrayPersistInfo configGrayPersistInfo = new ConfigGrayPersistInfo(TagGrayRule.TYPE_TAG,\n                TagGrayRule.VERSION, autoTag, -999);\n        configCacheGrayTag.resetGrayRule(GrayRuleManager.serializeConfigGrayPersistInfo(configGrayPersistInfo));\n        cacheItem.sortConfigGray();\n        when(ConfigCacheService.getContentCache(eq(groupKey))).thenReturn(cacheItem);\n        \n        ConfigQueryRequest configQueryRequest = new ConfigQueryRequest();\n        configQueryRequest.setDataId(dataId);\n        configQueryRequest.setGroup(group);\n        RequestMeta requestMeta = new RequestMeta();\n        requestMeta.setClientIp(\"127.0.0.1\");\n        requestMeta.getAppLabels().put(VIPSERVER_TAG, autoTag);\n        //mock disk read.\n        when(configRocksDbDiskService.getGrayContent(eq(dataId), eq(group), eq(null),\n                eq(TagGrayRule.TYPE_TAG + \"_\" + autoTag))).thenReturn(tagContent);\n        ConfigQueryResponse response = configQueryRequestHandler.handle(configQueryRequest, requestMeta);\n        \n        //check content&md5\n        assertEquals(tagContent, response.getContent());\n        assertEquals(MD5Utils.md5Hex(tagContent, \"UTF-8\"), response.getMd5());\n        assertEquals(\"key_testGetTag_AutoTag_NotDirectRead\", response.getEncryptedDataKey());\n        \n        //check flags.\n        assertFalse(response.isBeta());\n        assertEquals(response.getTag(), autoTag);\n        \n    }",
    "test_code_tgt": "@Test\n    void testGetTagAutoTag() throws Exception {\n        \n        final String groupKey = GroupKey2.getKey(dataId, group, \"\");\n        String content = \"content_from_tag_notdirectread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        ConfigRocksDbDiskService configRocksDbDiskService = Mockito.mock(ConfigRocksDbDiskService.class);\n        when(ConfigDiskServiceFactory.getInstance()).thenReturn(configRocksDbDiskService);\n        \n        String autoTag = \"auto_tag\";\n        CacheItem cacheItem = new CacheItem(groupKey);\n        cacheItem.initConfigGrayIfEmpty(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        cacheItem.getConfigCache().setMd5(MD5Utils.md5Hex(content, \"UTF-8\"));\n        ConfigCacheGray configCacheGrayTag = cacheItem.getConfigCacheGray().get(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        String tagContent = \"content_from_specific_tag_directread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        configCacheGrayTag.setMd5(MD5Utils.md5Hex(tagContent, \"UTF-8\"));\n        configCacheGrayTag.setEncryptedDataKey(\"key_testGetTag_AutoTag_NotDirectRead\");\n        ConfigGrayPersistInfo configGrayPersistInfo = new ConfigGrayPersistInfo(TagGrayRule.TYPE_TAG,\n                TagGrayRule.VERSION, autoTag, -999);\n        configCacheGrayTag.resetGrayRule(GrayRuleManager.serializeConfigGrayPersistInfo(configGrayPersistInfo));\n        cacheItem.sortConfigGray();\n        when(ConfigCacheService.getContentCache(eq(groupKey))).thenReturn(cacheItem);\n        \n        ConfigQueryRequest configQueryRequest = new ConfigQueryRequest();\n        configQueryRequest.setDataId(dataId);\n        configQueryRequest.setGroup(group);\n        RequestMeta requestMeta = new RequestMeta();\n        requestMeta.setClientIp(\"127.0.0.1\");\n        requestMeta.getAppLabels().put(VIPSERVER_TAG, autoTag);\n        //mock disk read.\n        when(configRocksDbDiskService.getGrayContent(eq(dataId), eq(group), eq(\"\"),\n                eq(TagGrayRule.TYPE_TAG + \"_\" + autoTag))).thenReturn(tagContent);\n        ConfigQueryResponse response = configQueryRequestHandler.handle(configQueryRequest, requestMeta);\n        \n        //check content&md5\n        assertEquals(tagContent, response.getContent());\n        assertEquals(MD5Utils.md5Hex(tagContent, \"UTF-8\"), response.getMd5());\n        assertEquals(\"key_testGetTag_AutoTag_NotDirectRead\", response.getEncryptedDataKey());\n        \n        //check flags.\n        assertFalse(response.isBeta());\n        assertEquals(response.getTag(), autoTag);\n        \n    }",
    "prod_code_src": "@Override\n    @TpsControl(pointName = \"ConfigQuery\")\n    @Secured(action = ActionTypes.READ, signType = SignType.CONFIG)\n    @ExtractorManager.Extractor(rpcExtractor = ConfigRequestParamExtractor.class)\n    public ConfigQueryResponse handle(ConfigQueryRequest request, RequestMeta meta) throws NacosException {\n        try {\n            String dataId = request.getDataId();\n            String group = request.getGroup();\n            String tenant = request.getTenant();\n            String groupKey = GroupKey2.getKey(dataId, group, tenant);\n            boolean notify = request.isNotify();\n            \n            String requestIpApp = meta.getLabels().get(CLIENT_APPNAME_HEADER);\n            String clientIp = meta.getClientIp();\n            \n            ConfigQueryChainRequest chainRequest = ConfigChainRequestExtractorService.getExtractor().extract(request, meta);\n            ConfigQueryChainResponse chainResponse = configQueryChainService.handle(chainRequest);\n            \n            if (ResponseCode.FAIL.getCode() == chainResponse.getResultCode()) {\n                return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), chainResponse.getMessage());\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_NOT_FOUND) {\n                return handlerConfigNotFound(request.getDataId(), request.getGroup(), request.getTenant(), requestIpApp, clientIp, notify);\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_QUERY_CONFLICT) {\n                return handlerConfigConflict(clientIp, groupKey);\n            }\n            \n            ConfigQueryResponse response = new ConfigQueryResponse();\n            \n            // Check if there is a matched gray rule\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_FOUND_GRAY) {\n                if (BetaGrayRule.TYPE_BETA.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setBeta(true);\n                } else if (TagGrayRule.TYPE_TAG.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setTag(URLEncoder.encode(chainResponse.getMatchedGray().getRawGrayRule(), ENCODE_UTF8));\n                }\n            }\n            \n            // Check if there is a special tag\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.SPECIAL_TAG_CONFIG_NOT_FOUND) {\n                response.setTag(request.getTag());\n            }\n            \n            response.setMd5(chainResponse.getMd5());\n            response.setEncryptedDataKey(chainResponse.getEncryptedDataKey());\n            response.setContent(chainResponse.getContent());\n            response.setContentType(chainResponse.getConfigType());\n            response.setLastModified(chainResponse.getLastModified());\n            \n            String pullType = ConfigTraceService.PULL_TYPE_OK;\n            if (chainResponse.getContent() == null) {\n                pullType = ConfigTraceService.PULL_TYPE_NOTFOUND;\n                response.setErrorInfo(ConfigQueryResponse.CONFIG_NOT_FOUND, \"config data not exist\");\n            } else {\n                response.setResultCode(ResponseCode.SUCCESS.getCode());\n            }\n            \n            String pullEvent = resolvePullEventType(chainResponse, request.getTag());\n            LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\", groupKey, clientIp, response.getMd5(), TimeUtils.getCurrentTimeStr());\n            final long delayed = System.currentTimeMillis() - response.getLastModified();\n            ConfigTraceService.logPullEvent(dataId, group, tenant, requestIpApp, response.getLastModified(), pullEvent, pullType,\n                    delayed, clientIp, notify, \"grpc\");\n            \n            return response;\n            \n        } catch (Exception e) {\n            LOGGER.error(\"Failed to handle grpc configuration query\", e);\n            return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), e.getMessage());\n        }\n        \n    }",
    "prod_code_tgt": "@Override\n    @TpsControl(pointName = \"ConfigQuery\")\n    @Secured(action = ActionTypes.READ, signType = SignType.CONFIG)\n    @ExtractorManager.Extractor(rpcExtractor = ConfigRequestParamExtractor.class)\n    public ConfigQueryResponse handle(ConfigQueryRequest request, RequestMeta meta) throws NacosException {\n        try {\n            request.setTenant(NamespaceUtil.processNamespaceParameter(request.getTenant()));\n            String dataId = request.getDataId();\n            String group = request.getGroup();\n            String tenant = request.getTenant();\n            String groupKey = GroupKey2.getKey(dataId, group, tenant);\n            boolean notify = request.isNotify();\n            \n            String requestIpApp = meta.getLabels().get(CLIENT_APPNAME_HEADER);\n            String clientIp = meta.getClientIp();\n            \n            ConfigQueryChainRequest chainRequest = ConfigChainRequestExtractorService.getExtractor().extract(request, meta);\n            ConfigQueryChainResponse chainResponse = configQueryChainService.handle(chainRequest);\n            \n            if (ResponseCode.FAIL.getCode() == chainResponse.getResultCode()) {\n                return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), chainResponse.getMessage());\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_NOT_FOUND) {\n                return handlerConfigNotFound(request.getDataId(), request.getGroup(), request.getTenant(), requestIpApp, clientIp, notify);\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_QUERY_CONFLICT) {\n                return handlerConfigConflict(clientIp, groupKey);\n            }\n            \n            ConfigQueryResponse response = new ConfigQueryResponse();\n            \n            // Check if there is a matched gray rule\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_FOUND_GRAY) {\n                if (BetaGrayRule.TYPE_BETA.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setBeta(true);\n                } else if (TagGrayRule.TYPE_TAG.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setTag(URLEncoder.encode(chainResponse.getMatchedGray().getRawGrayRule(), ENCODE_UTF8));\n                }\n            }\n            \n            // Check if there is a special tag\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.SPECIAL_TAG_CONFIG_NOT_FOUND) {\n                response.setTag(request.getTag());\n            }\n            \n            response.setMd5(chainResponse.getMd5());\n            response.setEncryptedDataKey(chainResponse.getEncryptedDataKey());\n            response.setContent(chainResponse.getContent());\n            response.setContentType(chainResponse.getConfigType());\n            response.setLastModified(chainResponse.getLastModified());\n            \n            String pullType = ConfigTraceService.PULL_TYPE_OK;\n            if (chainResponse.getContent() == null) {\n                pullType = ConfigTraceService.PULL_TYPE_NOTFOUND;\n                response.setErrorInfo(ConfigQueryResponse.CONFIG_NOT_FOUND, \"config data not exist\");\n            } else {\n                response.setResultCode(ResponseCode.SUCCESS.getCode());\n            }\n            \n            String pullEvent = resolvePullEventType(chainResponse, request.getTag());\n            LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\", groupKey, clientIp, response.getMd5(), TimeUtils.getCurrentTimeStr());\n            final long delayed = System.currentTimeMillis() - response.getLastModified();\n            ConfigTraceService.logPullEvent(dataId, group, tenant, requestIpApp, response.getLastModified(), pullEvent, pullType,\n                    delayed, clientIp, notify, \"grpc\");\n            \n            return response;\n            \n        } catch (Exception e) {\n            LOGGER.error(\"Failed to handle grpc configuration query\", e);\n            return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), e.getMessage());\n        }\n        \n    }",
    "test_id": 4,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-12-18 19:14:30+08:00",
    "commit_src": "05561813328a70c340dada0adac68df56447c805",
    "commit_tgt": "762303b94617e4febcf00f79e1c67050ae6f832d",
    "changed_test": "naming/src/test/java/com/alibaba/nacos/naming/core/v2/metadata/NamingMetadataManagerTest.java#testRemoveInstanceMetadata",
    "changed_prod": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/metadata/NamingMetadataManager.java#removeInstanceMetadata",
    "test_code_src": "@Test\n    void testRemoveInstanceMetadata() {\n        \n        namingMetadataManager.removeInstanceMetadata(service, METADATA_ID);\n        \n        Optional<InstanceMetadata> instanceMetadata = namingMetadataManager.getInstanceMetadata(service, METADATA_ID);\n        \n        assertFalse(instanceMetadata.isPresent());\n    }",
    "test_code_tgt": "@Test\n    void testRemoveInstanceMetadata() {\n        \n        namingMetadataManager.removeInstanceMetadata(service, METADATA_ID);\n        \n        Optional<InstanceMetadata> instanceMetadata = namingMetadataManager.getInstanceMetadata(service, METADATA_ID);\n        \n        assertFalse(instanceMetadata.isPresent());\n\n        Map<Service, ConcurrentMap<String, InstanceMetadata>> instanceMetadataSnapshot = namingMetadataManager.getInstanceMetadataSnapshot();\n        \n        assertEquals(0, instanceMetadataSnapshot.size());\n    }",
    "prod_code_src": "public void removeInstanceMetadata(Service service, String metadataId) {\n        ConcurrentMap<String, InstanceMetadata> instanceMetadataMapForService = instanceMetadataMap.get(service);\n        if (null != instanceMetadataMapForService) {\n            instanceMetadataMapForService.remove(metadataId);\n            if (instanceMetadataMapForService.isEmpty()) {\n                serviceMetadataMap.remove(service);\n            }\n        }\n        expiredMetadataInfos.remove(ExpiredMetadataInfo.newExpiredInstanceMetadata(service, metadataId));\n    }",
    "prod_code_tgt": "public void removeInstanceMetadata(Service service, String metadataId) {\n        ConcurrentMap<String, InstanceMetadata> instanceMetadataMapForService = instanceMetadataMap.get(service);\n        if (null != instanceMetadataMapForService) {\n            instanceMetadataMapForService.remove(metadataId);\n            if (instanceMetadataMapForService.isEmpty()) {\n                instanceMetadataMap.remove(service);\n            }\n        }\n        expiredMetadataInfos.remove(ExpiredMetadataInfo.newExpiredInstanceMetadata(service, metadataId));\n    }",
    "test_id": 5,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-12-16 17:45:29+08:00",
    "commit_src": "08fac169fa27f952b0a43d347b6a2b2f92b6da9a",
    "commit_tgt": "98c9760d8827335963ba1deca02adac3073642a5",
    "changed_test": "config/src/test/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoGrayPersistServiceImplTest.java#testRemoveConfigInfoGrayName",
    "changed_prod": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoGrayPersistServiceImpl.java#updateConfigInfo4GrayCas",
    "test_code_src": "@Test\n    public void testRemoveConfigInfoGrayName() {\n        String dataId = \"dataId1112222\";\n        String group = \"group22\";\n        String tenant = \"tenant2\";\n        final String srcIp = \"ip345678\";\n        final String srcUser = \"user1234567\";\n        final String grayName = \"grayName...\";\n        \n        //mock exist config info\n        ConfigInfoGrayWrapper configAllInfo4Gray = new ConfigInfoGrayWrapper();\n        configAllInfo4Gray.setDataId(dataId);\n        configAllInfo4Gray.setGroup(group);\n        configAllInfo4Gray.setTenant(tenant);\n        configAllInfo4Gray.setMd5(\"old_md5\");\n        \n        when(databaseOperate.queryOne(anyString(), eq(new Object[] {dataId, group, tenant, grayName}),\n                eq(CONFIG_INFO_GRAY_WRAPPER_ROW_MAPPER))).thenReturn(configAllInfo4Gray);\n        \n        embeddedConfigInfoGrayPersistService.removeConfigInfoGray(dataId, group, tenant, grayName, srcIp, srcUser);\n        \n        //verify delete sql invoked.\n        embeddedStorageContextHolderMockedStatic.verify(\n                () -> EmbeddedStorageContextHolder.addSqlContext(anyString(), eq(dataId), eq(group), eq(tenant),\n                        eq(grayName)), times(1));\n        Mockito.verify(historyConfigInfoPersistService, times(1)).insertConfigHistoryAtomic(\n                eq(configAllInfo4Gray.getId()), eq(configAllInfo4Gray), eq(srcIp), eq(srcUser), any(Timestamp.class), eq(\"D\"),\n                eq(\"gray\"), anyString());\n    }",
    "test_code_tgt": "@Test\n    public void testRemoveConfigInfoGrayName() {\n        String dataId = \"dataId1112222\";\n        String group = \"group22\";\n        String tenant = \"tenant2\";\n        final String srcIp = \"ip345678\";\n        final String srcUser = \"user1234567\";\n        final String grayName = \"grayName...\";\n        \n        //mock exist config info\n        ConfigInfoGrayWrapper configAllInfo4Gray = new ConfigInfoGrayWrapper();\n        configAllInfo4Gray.setDataId(dataId);\n        configAllInfo4Gray.setGroup(group);\n        configAllInfo4Gray.setTenant(tenant);\n        configAllInfo4Gray.setMd5(\"old_md5\");\n        \n        when(databaseOperate.queryOne(anyString(), eq(new Object[] {dataId, group, tenant, grayName}),\n                eq(CONFIG_INFO_GRAY_WRAPPER_ROW_MAPPER))).thenReturn(configAllInfo4Gray);\n        \n        embeddedConfigInfoGrayPersistService.removeConfigInfoGray(dataId, group, tenant, grayName, srcIp, srcUser);\n        \n        //verify delete sql invoked.\n        embeddedStorageContextHolderMockedStatic.verify(\n                () -> EmbeddedStorageContextHolder.addSqlContext(anyString(), eq(dataId), eq(group), eq(tenant),\n                        eq(grayName)), times(1));\n        Mockito.verify(historyConfigInfoPersistService, times(1))\n                .insertConfigHistoryAtomic(eq(configAllInfo4Gray.getId()), eq(configAllInfo4Gray), eq(srcIp),\n                        eq(srcUser), any(Timestamp.class), eq(\"D\"), eq(\"gray\"), eq(grayName), anyString());\n    }",
    "prod_code_src": "@Override\n    public ConfigOperateResult updateConfigInfo4GrayCas(ConfigInfo configInfo, String grayName, String grayRule,\n            String srcIp, String srcUser) {\n        String appNameTmp = StringUtils.defaultEmptyIfBlank(configInfo.getAppName());\n        String tenantTmp = StringUtils.defaultEmptyIfBlank(configInfo.getTenant());\n        String grayNameTmp = StringUtils.isBlank(grayName) ? StringUtils.EMPTY : grayName.trim();\n        String grayRuleTmp = StringUtils.isBlank(grayRule) ? StringUtils.EMPTY : grayRule.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            final ConfigInfoGrayWrapper oldConfigAllInfo4Gray = findConfigInfo4Gray(configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp, grayNameTmp);\n            if (oldConfigAllInfo4Gray == null) {\n                if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                    LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                            configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                }\n            }\n            \n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoGrayMapper configInfoGrayMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_GRAY);\n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.GRAY_NAME, grayNameTmp);\n            context.putWhereParameter(FieldConstant.GRAY_RULE, grayRuleTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoGrayMapper.updateConfigInfo4GrayCas(context);\n            \n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigAllInfo4Gray.getId(),\n                    oldConfigAllInfo4Gray, srcIp, srcUser, now, \"U\", Constants.GRAY,\n                    ConfigExtInfoUtil.getExtInfoFromGrayInfo(oldConfigAllInfo4Gray.getGrayName(),\n                            oldConfigAllInfo4Gray.getGrayRule(), oldConfigAllInfo4Gray.getSrcUser()));\n            \n            EmbeddedStorageContextUtils.onModifyConfigGrayInfo(configInfo, grayNameTmp, grayRuleTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());\n            \n            Boolean success = databaseOperate.blockUpdate();\n            if (success) {\n                return getGrayOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp, grayNameTmp);\n            } else {\n                return new ConfigOperateResult(false);\n            }\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }",
    "prod_code_tgt": "@Override\n    public ConfigOperateResult updateConfigInfo4GrayCas(ConfigInfo configInfo, String grayName, String grayRule,\n            String srcIp, String srcUser) {\n        String appNameTmp = StringUtils.defaultEmptyIfBlank(configInfo.getAppName());\n        String tenantTmp = StringUtils.defaultEmptyIfBlank(configInfo.getTenant());\n        String grayNameTmp = StringUtils.isBlank(grayName) ? StringUtils.EMPTY : grayName.trim();\n        String grayRuleTmp = StringUtils.isBlank(grayRule) ? StringUtils.EMPTY : grayRule.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            final ConfigInfoGrayWrapper oldConfigAllInfo4Gray = findConfigInfo4Gray(configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp, grayNameTmp);\n            if (oldConfigAllInfo4Gray == null) {\n                if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                    LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                            configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                }\n            }\n            \n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoGrayMapper configInfoGrayMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_GRAY);\n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.GRAY_NAME, grayNameTmp);\n            context.putWhereParameter(FieldConstant.GRAY_RULE, grayRuleTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoGrayMapper.updateConfigInfo4GrayCas(context);\n            \n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigAllInfo4Gray.getId(),\n                    oldConfigAllInfo4Gray, srcIp, srcUser, now, \"U\", Constants.GRAY, grayNameTmp,\n                    ConfigExtInfoUtil.getExtInfoFromGrayInfo(oldConfigAllInfo4Gray.getGrayName(),\n                            oldConfigAllInfo4Gray.getGrayRule(), oldConfigAllInfo4Gray.getSrcUser()));\n            \n            EmbeddedStorageContextUtils.onModifyConfigGrayInfo(configInfo, grayNameTmp, grayRuleTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());\n            \n            Boolean success = databaseOperate.blockUpdate();\n            if (success) {\n                return getGrayOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp, grayNameTmp);\n            } else {\n                return new ConfigOperateResult(false);\n            }\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }",
    "test_id": 6,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-12-16 17:45:29+08:00",
    "commit_src": "08fac169fa27f952b0a43d347b6a2b2f92b6da9a",
    "commit_tgt": "98c9760d8827335963ba1deca02adac3073642a5",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerbyTest.java#testFindDeletedConfig",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerby.java#findDeletedConfig",
    "test_code_src": "@Test\n    void testFindDeletedConfig() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.findDeletedConfig(context);\n        assertEquals(mapperResult.getSql(), \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip,\"\n                + \" op_type, tenant_id, publish_type, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\");\n        assertArrayEquals(new Object[] {publishType, startTime, lastMaxId, pageSize}, mapperResult.getParamList().toArray());\n    }",
    "test_code_tgt": "@Test\n    void testFindDeletedConfig() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.findDeletedConfig(context);\n        assertEquals(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip,\"\n                        + \" op_type, tenant_id, publish_type,gray_name, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                mapperResult.getSql());\n        assertArrayEquals(new Object[] {publishType, startTime, lastMaxId, pageSize},\n                mapperResult.getParamList().toArray());\n    }",
    "prod_code_src": "@Override\n    public MapperResult findDeletedConfig(MapperContext context) {\n        return new MapperResult(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip, op_type, tenant_id, \"\n                        + \"publish_type, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                CollectionUtils.list(context.getWhereParameter(FieldConstant.PUBLISH_TYPE),\n                        context.getWhereParameter(FieldConstant.START_TIME),\n                        context.getWhereParameter(FieldConstant.LAST_MAX_ID),\n                        context.getWhereParameter(FieldConstant.PAGE_SIZE)));\n    }",
    "prod_code_tgt": "@Override\n    public MapperResult findDeletedConfig(MapperContext context) {\n        return new MapperResult(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip, op_type, tenant_id, \"\n                        + \"publish_type,gray_name, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                CollectionUtils.list(context.getWhereParameter(FieldConstant.PUBLISH_TYPE),\n                        context.getWhereParameter(FieldConstant.START_TIME),\n                        context.getWhereParameter(FieldConstant.LAST_MAX_ID),\n                        context.getWhereParameter(FieldConstant.PAGE_SIZE)));\n    }",
    "test_id": 7,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-11-07 09:58:47+08:00",
    "commit_src": "2c1a5113887228d5a91272945194158e8382e013",
    "commit_tgt": "5c0fa0dc609ea06c83c92e74c1bd3510e86f0210",
    "changed_test": "core/src/test/java/com/alibaba/nacos/core/service/NamespaceOperationServiceTest.java#testGetNamespaceList",
    "changed_prod": "core/src/main/java/com/alibaba/nacos/core/service/NamespaceOperationService.java#getNamespaceList",
    "test_code_src": "@Test\n    void testGetNamespaceList() {\n        TenantInfo tenantInfo = new TenantInfo();\n        tenantInfo.setTenantId(TEST_NAMESPACE_ID);\n        tenantInfo.setTenantName(TEST_NAMESPACE_NAME);\n        tenantInfo.setTenantDesc(TEST_NAMESPACE_DESC);\n        when(namespacePersistService.findTenantByKp(DEFAULT_KP)).thenReturn(Collections.singletonList(tenantInfo));\n        \n        List<Namespace> list = namespaceOperationService.getNamespaceList();\n        assertEquals(2, list.size());\n        Namespace namespaceA = list.get(0);\n        assertEquals(\"\", namespaceA.getNamespace());\n        assertEquals(DEFAULT_NAMESPACE, namespaceA.getNamespaceShowName());\n        assertEquals(DEFAULT_QUOTA, namespaceA.getQuota());\n        assertEquals(1, namespaceA.getConfigCount());\n        \n        Namespace namespaceB = list.get(1);\n        assertEquals(TEST_NAMESPACE_ID, namespaceB.getNamespace());\n        assertEquals(TEST_NAMESPACE_NAME, namespaceB.getNamespaceShowName());\n        assertEquals(1, namespaceB.getConfigCount());\n    }",
    "test_code_tgt": "@Test\n    void testGetNamespaceList() {\n        TenantInfo tenantInfo = new TenantInfo();\n        tenantInfo.setTenantId(TEST_NAMESPACE_ID);\n        tenantInfo.setTenantName(TEST_NAMESPACE_NAME);\n        tenantInfo.setTenantDesc(TEST_NAMESPACE_DESC);\n        when(namespacePersistService.findTenantByKp(DEFAULT_KP)).thenReturn(Collections.singletonList(tenantInfo));\n        \n        List<Namespace> list = namespaceOperationService.getNamespaceList();\n        assertEquals(2, list.size());\n        Namespace namespaceA = list.get(0);\n        assertEquals(\"\", namespaceA.getNamespace());\n        assertEquals(DEFAULT_NAMESPACE_SHOW_NAME, namespaceA.getNamespaceShowName());\n        assertEquals(DEFAULT_NAMESPACE_DESCRIPTION, namespaceA.getNamespaceDesc());\n        assertEquals(DEFAULT_QUOTA, namespaceA.getQuota());\n        assertEquals(1, namespaceA.getConfigCount());\n        \n        Namespace namespaceB = list.get(1);\n        assertEquals(TEST_NAMESPACE_ID, namespaceB.getNamespace());\n        assertEquals(TEST_NAMESPACE_NAME, namespaceB.getNamespaceShowName());\n        assertEquals(1, namespaceB.getConfigCount());\n    }",
    "prod_code_src": "public List<Namespace> getNamespaceList() {\n        // TODO \u83b7\u53d6\u7528kp\n        List<TenantInfo> tenantInfos = namespacePersistService.findTenantByKp(DEFAULT_KP);\n        \n        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE, DEFAULT_QUOTA, 0,\n                NamespaceTypeEnum.GLOBAL.getType());\n        NamespaceDetailInjectorHolder.getInstance().injectDetail(namespace0);\n        List<Namespace> namespaceList = new ArrayList<>();\n        namespaceList.add(namespace0);\n        \n        for (TenantInfo tenantInfo : tenantInfos) {\n            Namespace namespaceTmp = new Namespace(tenantInfo.getTenantId(), tenantInfo.getTenantName(),\n                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, 0, NamespaceTypeEnum.CUSTOM.getType());\n            NamespaceDetailInjectorHolder.getInstance().injectDetail(namespaceTmp);\n            namespaceList.add(namespaceTmp);\n        }\n        return namespaceList;\n    }",
    "prod_code_tgt": "public List<Namespace> getNamespaceList() {\n        // TODO \u83b7\u53d6\u7528kp\n        List<TenantInfo> tenantInfos = namespacePersistService.findTenantByKp(DEFAULT_KP);\n        \n        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE_SHOW_NAME,\n                DEFAULT_NAMESPACE_DESCRIPTION, DEFAULT_QUOTA, 0, NamespaceTypeEnum.GLOBAL.getType());\n        NamespaceDetailInjectorHolder.getInstance().injectDetail(namespace0);\n        List<Namespace> namespaceList = new ArrayList<>();\n        namespaceList.add(namespace0);\n        \n        for (TenantInfo tenantInfo : tenantInfos) {\n            Namespace namespaceTmp = new Namespace(tenantInfo.getTenantId(), tenantInfo.getTenantName(),\n                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, 0, NamespaceTypeEnum.CUSTOM.getType());\n            NamespaceDetailInjectorHolder.getInstance().injectDetail(namespaceTmp);\n            namespaceList.add(namespaceTmp);\n        }\n        return namespaceList;\n    }",
    "test_id": 8,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-10-31 14:54:14+08:00",
    "commit_src": "4334cd16c17af53177708268625ad89acb2b4da4",
    "commit_tgt": "e2d44f2fd2b12124d844d152b7025e3f758d00e6",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerbyTest.java#testRemoveConfigHistory",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerby.java#removeConfigHistory",
    "test_code_src": "@Test\n    void testRemoveConfigHistory() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.removeConfigHistory(context);\n        assertEquals(mapperResult.getSql(),\n                \"DELETE FROM his_config_info WHERE id IN( SELECT id FROM his_config_info WHERE gmt_modified < ? \"\n                        + \"OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\");\n        assertArrayEquals(new Object[] {startTime, limitSize}, mapperResult.getParamList().toArray());\n    }",
    "test_code_tgt": "@Test\n    void testRemoveConfigHistory() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.removeConfigHistory(context);\n        assertEquals(mapperResult.getSql(),\n                \"DELETE FROM his_config_info WHERE nid IN( SELECT nid FROM his_config_info WHERE gmt_modified < ? \"\n                        + \"OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\");\n        assertArrayEquals(new Object[] {startTime, limitSize}, mapperResult.getParamList().toArray());\n    }",
    "prod_code_src": "@Override\n    public MapperResult removeConfigHistory(MapperContext context) {\n        String sql = \"DELETE FROM his_config_info WHERE id IN( \"\n                + \"SELECT id FROM his_config_info WHERE gmt_modified < ? OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\";\n        return new MapperResult(sql, CollectionUtils.list(context.getWhereParameter(FieldConstant.START_TIME),\n                context.getWhereParameter(FieldConstant.LIMIT_SIZE)));\n    }",
    "prod_code_tgt": "@Override\n    public MapperResult removeConfigHistory(MapperContext context) {\n        String sql = \"DELETE FROM his_config_info WHERE nid IN( \"\n                + \"SELECT nid FROM his_config_info WHERE gmt_modified < ? OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\";\n        return new MapperResult(sql, CollectionUtils.list(context.getWhereParameter(FieldConstant.START_TIME),\n                context.getWhereParameter(FieldConstant.LIMIT_SIZE)));\n    }",
    "test_id": 9,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-04-02 11:36:29+08:00",
    "commit_src": "19a857b701fcfcfdbf60d19a9b9ecff54cf893b7",
    "commit_tgt": "facf4c82704c5dc4f4290d79973ac70d6f0bb6ea",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java#testFindAllConfigInfoBaseFetchRows",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java#findAllConfigInfoBaseFetchRows",
    "test_code_src": "@Test\n    public void testFindAllConfigInfoBaseFetchRows() {\n        MapperResult mapperResult = configInfoMapperByMySql.findAllConfigInfoBaseFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT t.id,data_id,group_id,content,md5 FROM ( SELECT id FROM config_info ORDER BY id LIMIT ?,?\"\n                        + \"  )  g, config_info t  WHERE g.id = t.id \");\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(), emptyObjs);\n    }",
    "test_code_tgt": "@Test\n    public void testFindAllConfigInfoBaseFetchRows() {\n        MapperResult mapperResult = configInfoMapperByMySql.findAllConfigInfoBaseFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT t.id,data_id,group_id,content,md5 FROM ( SELECT id FROM config_info ORDER BY id LIMIT \" + context.getStartRow() + \",\"\n                        + context.getPageSize() + \" ) g, config_info t  WHERE g.id = t.id \");\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(), emptyObjs);\n    }",
    "prod_code_src": "@Override\n    public MapperResult findAllConfigInfoBaseFetchRows(MapperContext context) {\n        String sql = \"SELECT t.id,data_id,group_id,content,md5\"\n                + \" FROM ( SELECT id FROM config_info ORDER BY id LIMIT ?,?  ) \"\n                + \" g, config_info t  WHERE g.id = t.id \";\n        return new MapperResult(sql, Collections.emptyList());\n    }",
    "prod_code_tgt": "@Override\n    public MapperResult findAllConfigInfoBaseFetchRows(MapperContext context) {\n        String sql = \"SELECT t.id,data_id,group_id,content,md5\"\n                + \" FROM ( SELECT id FROM config_info ORDER BY id LIMIT \" + context.getStartRow() + \",\"\n                + context.getPageSize() + \" )\" + \" g, config_info t  WHERE g.id = t.id \";\n        return new MapperResult(sql, Collections.emptyList());\n    }",
    "test_id": 10,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-04-01 12:02:46+08:00",
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_test": "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java#testBuildWithNacosException",
    "changed_prod": "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build",
    "test_code_src": "@Test\n    public void testBuildWithNacosException() {\n        int errCode = 500;\n        String errMsg = \"nacos exception msg\";\n        NacosException nacosException = new NacosException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }",
    "test_code_tgt": "@Test\n    public void testBuildWithNacosException() {\n        int errCode = 500;\n        String errMsg = \"nacos exception msg\";\n        NacosException nacosException = new NacosException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errCode, response.getResultCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }",
    "prod_code_src": "public static Response build(int errorCode, String msg) {\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, msg);\n        return response;\n    }",
    "prod_code_tgt": "public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }",
    "test_id": 11,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-04-01 12:02:46+08:00",
    "commit_src": "3a1f0c297e37608035514a98ebc51133daad7863",
    "commit_tgt": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
    "changed_test": "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java#testBuildWithNacosRuntimeException",
    "changed_prod": "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java#build",
    "test_code_src": "@Test\n    public void testBuildWithNacosRuntimeException() {\n        int errCode = 500;\n        String errMsg = \"nacos runtime exception msg\";\n        NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosRuntimeException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    }",
    "test_code_tgt": "@Test\n    public void testBuildWithNacosRuntimeException() {\n        int errCode = 500;\n        String errMsg = \"nacos runtime exception msg\";\n        NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosRuntimeException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errCode, response.getResultCode());\n        Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    }",
    "prod_code_src": "public static Response build(int errorCode, String msg) {\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, msg);\n        return response;\n    }",
    "prod_code_tgt": "public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }",
    "test_id": 12,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2024-01-31 10:27:01+08:00",
    "commit_src": "9d473ef60c3e6b04deec64eec87cd7f9f1950986",
    "commit_tgt": "1b9a22c1a8209890743fd77cbe3b007ed946c548",
    "changed_test": "naming/src/test/java/com/alibaba/nacos/naming/push/v2/hook/NacosMonitorPushResultHookTest.java#testPushFailed",
    "changed_prod": "naming/src/main/java/com/alibaba/nacos/naming/push/v2/hook/NacosMonitorPushResultHook.java#pushFailed",
    "test_code_src": "@Test\n    public void testPushFailed() {\n        new NacosMonitorPushResultHook().pushFailed(pushResult);\n        assertEquals(1, MetricsMonitor.getFailedPushMonitor().get());\n    }",
    "test_code_tgt": "@Test\n    public void testPushFailed() {\n        new NacosMonitorPushResultHook().pushFailed(pushResult);\n        assertEquals(1, MetricsMonitor.getFailedPushMonitor().get());\n        assertEquals(1, MetricsMonitor.getTotalPushMonitor().get());\n    }",
    "prod_code_src": "@Override\n    public void pushFailed(PushResult result) {\n        MetricsMonitor.incrementFailPush();\n        if (isRpc(result.getSubscriber())) {\n            NamingTpsMonitor.rpcPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        } else {\n            NamingTpsMonitor.udpPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        }\n    }",
    "prod_code_tgt": "@Override\n    public void pushFailed(PushResult result) {\n        MetricsMonitor.incrementPush();\n        MetricsMonitor.incrementFailPush();\n        if (isRpc(result.getSubscriber())) {\n            NamingTpsMonitor.rpcPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        } else {\n            NamingTpsMonitor.udpPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        }\n    }",
    "test_id": 13,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-12-18 13:41:27+08:00",
    "commit_src": "ab2ddac06fe39fa5ab404f89d3e34ad40344e274",
    "commit_tgt": "790bb197cfce709e5bb75be3e522e03f68db0d71",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java#testFindChangeConfigFetchRows",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java#findChangeConfigFetchRows",
    "test_code_src": "@Test\n    public void testFindChangeConfigFetchRows() {\n        Object lastMaxId = 100;\n        context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n        MapperResult mapperResult = configInfoMapperByMySql.findChangeConfigFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT id,data_id,group_id,tenant_id,app_name,content,type,md5,gmt_modified FROM config_info \"\n                        + \"WHERE  1=1  AND tenant_id = ?  AND app_name = ?  AND gmt_modified >=?  AND gmt_modified <=?  AND id > \"\n                        + lastMaxId + \" ORDER BY id ASC LIMIT \" + startRow + \",\" + pageSize);\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(),\n                new Object[] {tenantId, appName, startTime, endTime});\n    }",
    "test_code_tgt": "@Test\n    public void testFindChangeConfigFetchRows() {\n        Object lastMaxId = 100;\n        context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n        MapperResult mapperResult = configInfoMapperByMySql.findChangeConfigFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT id,data_id,group_id,tenant_id,app_name,type,md5,gmt_modified FROM config_info \"\n                        + \"WHERE  1=1  AND tenant_id = ?  AND app_name = ?  AND gmt_modified >=?  AND gmt_modified <=?  AND id > \"\n                        + lastMaxId + \" ORDER BY id ASC LIMIT \" + startRow + \",\" + pageSize);\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(),\n                new Object[] {tenantId, appName, startTime, endTime});\n    }",
    "prod_code_src": "@Override\n    public MapperResult findChangeConfigFetchRows(MapperContext context) {\n        final String tenant = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        final String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        final String group = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        final String appName = (String) context.getWhereParameter(FieldConstant.APP_NAME);\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final Timestamp startTime = (Timestamp) context.getWhereParameter(FieldConstant.START_TIME);\n        final Timestamp endTime = (Timestamp) context.getWhereParameter(FieldConstant.END_TIME);\n        \n        List<Object> paramList = new ArrayList<>();\n        \n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content,type,md5,gmt_modified FROM config_info WHERE \";\n        String where = \" 1=1 \";\n        if (!StringUtils.isBlank(dataId)) {\n            where += \" AND data_id LIKE ? \";\n            paramList.add(dataId);\n        }\n        if (!StringUtils.isBlank(group)) {\n            where += \" AND group_id LIKE ? \";\n            paramList.add(group);\n        }\n        \n        if (!StringUtils.isBlank(tenantTmp)) {\n            where += \" AND tenant_id = ? \";\n            paramList.add(tenantTmp);\n        }\n        \n        if (!StringUtils.isBlank(appName)) {\n            where += \" AND app_name = ? \";\n            paramList.add(appName);\n        }\n        if (startTime != null) {\n            where += \" AND gmt_modified >=? \";\n            paramList.add(startTime);\n        }\n        if (endTime != null) {\n            where += \" AND gmt_modified <=? \";\n            paramList.add(endTime);\n        }\n        return new MapperResult(\n                sqlFetchRows + where + \" AND id > \" + context.getWhereParameter(FieldConstant.LAST_MAX_ID)\n                        + \" ORDER BY id ASC\" + \" LIMIT \" + 0 + \",\" + context.getPageSize(), paramList);\n    }",
    "prod_code_tgt": "@Override\n    public MapperResult findChangeConfigFetchRows(MapperContext context) {\n        final String tenant = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        final String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        final String group = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        final String appName = (String) context.getWhereParameter(FieldConstant.APP_NAME);\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final Timestamp startTime = (Timestamp) context.getWhereParameter(FieldConstant.START_TIME);\n        final Timestamp endTime = (Timestamp) context.getWhereParameter(FieldConstant.END_TIME);\n        \n        List<Object> paramList = new ArrayList<>();\n        \n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,type,md5,gmt_modified FROM config_info WHERE \";\n        String where = \" 1=1 \";\n        if (!StringUtils.isBlank(dataId)) {\n            where += \" AND data_id LIKE ? \";\n            paramList.add(dataId);\n        }\n        if (!StringUtils.isBlank(group)) {\n            where += \" AND group_id LIKE ? \";\n            paramList.add(group);\n        }\n        \n        if (!StringUtils.isBlank(tenantTmp)) {\n            where += \" AND tenant_id = ? \";\n            paramList.add(tenantTmp);\n        }\n        \n        if (!StringUtils.isBlank(appName)) {\n            where += \" AND app_name = ? \";\n            paramList.add(appName);\n        }\n        if (startTime != null) {\n            where += \" AND gmt_modified >=? \";\n            paramList.add(startTime);\n        }\n        if (endTime != null) {\n            where += \" AND gmt_modified <=? \";\n            paramList.add(endTime);\n        }\n        return new MapperResult(\n                sqlFetchRows + where + \" AND id > \" + context.getWhereParameter(FieldConstant.LAST_MAX_ID)\n                        + \" ORDER BY id ASC\" + \" LIMIT \" + 0 + \",\" + context.getPageSize(), paramList);\n    }",
    "test_id": 14,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-12-12 14:13:56+08:00",
    "commit_src": "26d045ca4936d11db37c5275300a51d6e5226444",
    "commit_tgt": "a3420b733b923940dd6aae8f129b248dff3b3771",
    "changed_test": "plugin-default-impl/nacos-default-auth-plugin/src/test/java/com/alibaba/nacos/plugin/auth/impl/token/impl/JwtTokenManagerTest.java#testCreateTokenWhenDisableAuth",
    "changed_prod": "plugin-default-impl/nacos-default-auth-plugin/src/main/java/com/alibaba/nacos/plugin/auth/impl/token/impl/JwtTokenManager.java#createToken",
    "test_code_src": "@Test\n    public void testCreateTokenWhenDisableAuth() {\n        when(authConfigs.isAuthEnabled()).thenReturn(false);\n        jwtTokenManager = new JwtTokenManager(authConfigs);\n        assertEquals(\"\", jwtTokenManager.createToken(\"nacos\"));\n    }",
    "test_code_tgt": "@Test\n    public void testCreateTokenWhenDisableAuth() {\n        when(authConfigs.isAuthEnabled()).thenReturn(false);\n        jwtTokenManager = new JwtTokenManager(authConfigs);\n        assertEquals(\"AUTH_DISABLED\", jwtTokenManager.createToken(\"nacos\"));\n    }",
    "prod_code_src": "@Deprecated\n    public String createToken(Authentication authentication) {\n        return createToken(authentication.getName());\n    }",
    "prod_code_tgt": "public String createToken(String userName) {\n        if (!authConfigs.isAuthEnabled()) {\n            return AUTH_DISABLED_TOKEN;\n        }\n        checkJwtParser();\n        return jwtParser.jwtBuilder().setUserName(userName).setExpiredTime(this.tokenValidityInSeconds).compact();\n    }",
    "test_id": 15,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-04-23 17:37:14+08:00",
    "commit_src": "11fc4792c40adc1718cb74356b58f43aec508844",
    "commit_tgt": "6acabeca6774f6ea09f715e384e7d70fe20c0ac8",
    "changed_test": "plugin-default-impl/src/test/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImplTest.java#testDeletePermission",
    "changed_prod": "plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java#deletePermission",
    "test_code_src": "@Test\n    public void testDeletePermission() {\n        embeddedPermissionPersistService.deletePermission(\"role\", \"resource\", \"action\");\n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextUtils.getCurrentSqlContext();\n        \n        Mockito.verify(databaseOperate).blockUpdate();\n    }",
    "test_code_tgt": "@Test\n    public void testDeletePermission() {\n        embeddedPermissionPersistService.deletePermission(\"role\", \"resource\", \"action\");\n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextHolder.getCurrentSqlContext();\n        \n        Mockito.verify(databaseOperate).blockUpdate();\n    }",
    "prod_code_src": "@Override\n    public void deletePermission(String role, String resource, String action) {\n        String sql = \"DELETE FROM permissions WHERE role=? AND resource=? AND action=?\";\n        EmbeddedStorageContextUtils.addSqlContext(sql, role, resource, action);\n        databaseOperate.blockUpdate();\n    }",
    "prod_code_tgt": "@Override\n    public void deletePermission(String role, String resource, String action) {\n        String sql = \"DELETE FROM permissions WHERE role=? AND resource=? AND action=?\";\n        EmbeddedStorageContextHolder.addSqlContext(sql, role, resource, action);\n        databaseOperate.blockUpdate();\n    }",
    "test_id": 18,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-04-23 17:37:14+08:00",
    "commit_src": "11fc4792c40adc1718cb74356b58f43aec508844",
    "commit_tgt": "6acabeca6774f6ea09f715e384e7d70fe20c0ac8",
    "changed_test": "plugin-default-impl/src/test/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImplTest.java#testDeleteRole",
    "changed_prod": "plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java#deleteRole",
    "test_code_src": "@Test\n    public void testDeleteRole() {\n        embeddedRolePersistService.deleteRole(\"role\");\n        embeddedRolePersistService.deleteRole(\"role\", \"userName\");\n        \n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextUtils.getCurrentSqlContext();\n        \n        Assert.assertEquals(currentSqlContext.size(), 0);\n    }",
    "test_code_tgt": "@Test\n    public void testDeleteRole() {\n        embeddedRolePersistService.deleteRole(\"role\");\n        embeddedRolePersistService.deleteRole(\"role\", \"userName\");\n        \n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextHolder.getCurrentSqlContext();\n        \n        Assert.assertEquals(currentSqlContext.size(), 0);\n    }",
    "prod_code_src": "@Override\n    public void deleteRole(String role) {\n        String sql = \"DELETE FROM roles WHERE role=?\";\n        try {\n            EmbeddedStorageContextUtils.addSqlContext(sql, role);\n            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextUtils.cleanAllContext();\n        }\n    }",
    "prod_code_tgt": "@Override\n    public void deleteRole(String role, String username) {\n        String sql = \"DELETE FROM roles WHERE role=? AND username=?\";\n        try {\n            EmbeddedStorageContextHolder.addSqlContext(sql, role, username);\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }",
    "test_id": 19,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-04-23 16:38:47+08:00",
    "commit_src": "f83061f47d90481aaf90dd677d91af3cfa6977f7",
    "commit_tgt": "aa6144aa8056bc86166e579ae14e49d4ef3cce7c",
    "changed_test": "console/src/test/java/com/alibaba/nacos/console/controller/NamespaceControllerTest.java#testGetNamespaceByNamespaceId",
    "changed_prod": "console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java#getNamespace",
    "test_code_src": "@Test\n    public void testGetNamespaceByNamespaceId() throws Exception {\n        NamespaceAllInfo namespace = new NamespaceAllInfo(\"\", \"public\", 0, 0, 0, \"\");\n        when(namespaceOperationService.getNamespace(\"\")).thenReturn(namespace);\n        assertEquals(namespace, namespaceController.getNamespace(\"\"));\n    }",
    "test_code_tgt": "@Test\n    public void testGetNamespaceByNamespaceId() throws Exception {\n        Namespace namespace = new Namespace(\"\", \"public\", \"\", 0, 0, 0);\n        when(namespaceOperationService.getNamespace(\"\")).thenReturn(namespace);\n        assertEquals(namespace, namespaceController.getNamespace(\"\"));\n    }",
    "prod_code_src": "@GetMapping(params = \"show=all\")\n    public NamespaceAllInfo getNamespace(@RequestParam(\"namespaceId\") String namespaceId) throws NacosException {\n        return namespaceOperationService.getNamespace(namespaceId);\n    }",
    "prod_code_tgt": "@GetMapping(params = \"show=all\")\n    public Namespace getNamespace(@RequestParam(\"namespaceId\") String namespaceId) throws NacosException {\n        return namespaceOperationService.getNamespace(namespaceId);\n    }",
    "test_id": 20,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-02-20 10:04:10+08:00",
    "commit_src": "4e78a769e516ef68aedb841a7c20963d51ce8c20",
    "commit_tgt": "d16023c156c5bac02afa3c1990ed91f98c8e1476",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java#testFindConfigInfoAggrByPageFetchRows",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java#findConfigInfoAggrByPageFetchRows",
    "test_code_src": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.put(\"data_id\", dataId);\n        context.put(\"group_id\", groupId);\n        context.put(\"tenant_id\", tenantId);\n        context.put(\"startRow\", startRow);\n        context.put(\"pageSize\", pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }",
    "test_code_tgt": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(\"data_id\", dataId);\n        context.putWhereParameter(\"group_id\", groupId);\n        context.putWhereParameter(\"tenant_id\", tenantId);\n        context.putWhereParameter(\"startRow\", startRow);\n        context.putWhereParameter(\"pageSize\", pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }",
    "prod_code_src": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow = (Integer) context.get(\"startRow\");\n        Integer pageSize = (Integer) context.get(\"pageSize\");\n        String dataId = (String) context.get(\"data_id\");\n        String groupId = (String) context.get(\"group_id\");\n        String tenantId = (String) context.get(\"tenant_id\");\n        \n        String sql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }",
    "prod_code_tgt": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow = (Integer) context.getWhereParameter(\"startRow\");\n        Integer pageSize = (Integer) context.getWhereParameter(\"pageSize\");\n        String dataId = (String) context.getWhereParameter(\"data_id\");\n        String groupId = (String) context.getWhereParameter(\"group_id\");\n        String tenantId = (String) context.getWhereParameter(\"tenant_id\");\n        \n        String sql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }",
    "test_id": 25,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-02-08 09:38:37+08:00",
    "commit_src": "428e0bc66875465cbc35ce946969dee7afafd9ca",
    "commit_tgt": "30954dc612209e0f77ec68c2061d7154fff60c5a",
    "changed_test": "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoServiceTest.java#testRemoveSubscriberForRedo",
    "changed_prod": "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java#removeSubscriberForRedo",
    "test_code_src": "@Test\n    public void testRemoveSubscriberForRedo() {\n        ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n        assertTrue(subscribes.isEmpty());\n        redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertFalse(subscribes.isEmpty());\n        redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertTrue(subscribes.isEmpty());\n    }",
    "test_code_tgt": "@Test\n    public void testRemoveSubscriberForRedo() {\n        ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n        assertTrue(subscribes.isEmpty());\n        redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertFalse(subscribes.isEmpty());\n        redoService.subscriberDeregister(SERVICE, GROUP, CLUSTER);\n        redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertTrue(subscribes.isEmpty());\n    }",
    "prod_code_src": "public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        synchronized (subscribes) {\n            subscribes.remove(ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster));\n        }\n    }",
    "prod_code_tgt": "public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        String key = ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster);\n        synchronized (subscribes) {\n            SubscriberRedoData redoData = subscribes.get(key);\n            if (null != redoData && !redoData.isExpectedRegistered()) {\n                subscribes.remove(key);\n            }\n        }\n    }",
    "test_id": 27,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  },
  {
    "repo_name": "alibaba/nacos",
    "commit_date": "2023-01-16 16:14:29+08:00",
    "commit_src": "4fa126f7fc33246e14c101be70c68bf13ac580da",
    "commit_tgt": "41f03fea0f0ab5cd2c3df85a6a0a889bee5360ce",
    "changed_test": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java#testGetTenantIdList",
    "changed_prod": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java#findConfigInfoBaseLikeFetchRows",
    "test_code_src": "@Test\n    public void testGetTenantIdList() {\n        String sql = configInfoMapperByMySql.getTenantIdList(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT tenant_id FROM config_info WHERE tenant_id != '' GROUP BY tenant_id LIMIT 0,5\");\n    }",
    "test_code_tgt": "@Test\n    public void testGetTenantIdList() {\n        String sql = configInfoMapperByMySql.getTenantIdList(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT tenant_id FROM config_info WHERE tenant_id != '\"\n                        + NamespaceUtil.getNamespaceDefaultId() + \"' GROUP BY tenant_id LIMIT 0,5\");\n    }",
    "prod_code_src": "@Override\n    public String findConfigInfoBaseLikeFetchRows(Map<String, String> params, int startRow, int pageSize) {\n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,content FROM config_info WHERE \";\n        String where = \" 1=1 AND tenant_id='' \";\n        if (!StringUtils.isBlank(params.get(DATA_ID))) {\n            where += \" AND data_id LIKE ? \";\n        }\n        if (!StringUtils.isBlank(params.get(GROUP))) {\n            where += \" AND group_id LIKE \";\n        }\n        if (!StringUtils.isBlank(params.get(CONTENT))) {\n            where += \" AND content LIKE ? \";\n        }\n        return sqlFetchRows + where + \" LIMIT \" + startRow + \",\" + pageSize;\n    }",
    "prod_code_tgt": "@Override\n    public String findConfigInfoBaseLikeFetchRows(Map<String, String> params, int startRow, int pageSize) {\n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,content FROM config_info WHERE \";\n        String where = \" 1=1 AND tenant_id='\" + NamespaceUtil.getNamespaceDefaultId() + \"' \";\n        if (!StringUtils.isBlank(params.get(DATA_ID))) {\n            where += \" AND data_id LIKE ? \";\n        }\n        if (!StringUtils.isBlank(params.get(GROUP))) {\n            where += \" AND group_id LIKE \";\n        }\n        if (!StringUtils.isBlank(params.get(CONTENT))) {\n            where += \" AND content LIKE ? \";\n        }\n        return sqlFetchRows + where + \" LIMIT \" + startRow + \",\" + pageSize;\n    }",
    "test_id": 28,
    "src_java_version": "1.8",
    "src_maven_version": "3.8.6",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.8.6"
  }
]