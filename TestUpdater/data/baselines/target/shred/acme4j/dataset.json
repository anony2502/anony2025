[
  {
    "name": "org.shredzone.acme4j.OrderTest.testAutoRenewFinalize()",
    "bSource": {
      "startLine": 284,
      "code": "/**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 285,
      "code": "/**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
    "bCommit": "c26d6b1",
    "aCommit": "c08c85b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())",
          "type": "DELETE",
          "lineNo": 313
        }
      ],
      "targetChanges": [
        {
          "line": "softly.assertThat(order.getAutoRenewalCertificate().getLocation())",
          "type": "ADD",
          "lineNo": 314
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.net.URL)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.net.URL)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.net.URL)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.net.URL)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.net.URL)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.net.URL)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getLocation",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "orElseThrow",
          "childCount": 1
        },
        "dstNode": {
          "label": "getLocation",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "softly",
          "childCount": 0
        },
        "dstNode": {
          "label": "softly",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        314
      ]
    },
    "aCommitTime": 1683444322,
    "ID": "shred/acme4j:1",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AccountBuilderTest.testRegistrationWithKid()",
    "bSource": {
      "startLine": 105,
      "code": "/**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 106,
      "code": "/**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public URL getLocation() {",
          "type": "DELETE",
          "lineNo": 136
        },
        {
          "line": "return locationUrl;",
          "type": "DELETE",
          "lineNo": 137
        }
      ],
      "targetChanges": [
        {
          "line": "public Optional<URL> getLocation() {",
          "type": "ADD",
          "lineNo": 137
        },
        {
          "line": "return Optional.of(locationUrl);",
          "type": "ADD",
          "lineNo": 138
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URL"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URL locationUrl"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Optional"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URL"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Optional"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URL locationUrl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "RETURN_TYPE",
        "parents": [
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URL",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.util.Optional",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Return",
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "of",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Return",
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "locationUrl",
          "childCount": 1
        },
        "dstNode": {
          "label": "locationUrl",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        136,
        137
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:3",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AccountBuilderTest.testOnlyExistingRegistration()",
    "bSource": {
      "startLine": 160,
      "code": "/**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 161,
      "code": "/**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public URL getLocation() {",
          "type": "DELETE",
          "lineNo": 178
        },
        {
          "line": "return locationUrl;",
          "type": "DELETE",
          "lineNo": 179
        }
      ],
      "targetChanges": [
        {
          "line": "public Optional<URL> getLocation() {",
          "type": "ADD",
          "lineNo": 179
        },
        {
          "line": "return Optional.of(locationUrl);",
          "type": "ADD",
          "lineNo": 180
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URL"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URL locationUrl"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Optional"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.URL"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Optional"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.net.URL locationUrl"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "RETURN_TYPE",
        "parents": [
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.net.URL",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.util.Optional",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Return",
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "of",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Return",
          "Method",
          "Class",
          "NewClass",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "locationUrl",
          "childCount": 1
        },
        "dstNode": {
          "label": "locationUrl",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        178,
        179
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:4",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.OrderTest.testAutoRenewUpdate()",
    "bSource": {
      "startLine": 226,
      "code": "/**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 230,
      "code": "/**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())\n                    .isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");",
          "type": "DELETE",
          "lineNo": 258
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");",
          "type": "DELETE",
          "lineNo": 259
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));",
          "type": "DELETE",
          "lineNo": 260
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));",
          "type": "DELETE",
          "lineNo": 261
        },
        {
          "line": "softly.assertThat(order.getNotBefore()).isNull();",
          "type": "DELETE",
          "lineNo": 262
        },
        {
          "line": "softly.assertThat(order.getNotAfter()).isNull();",
          "type": "DELETE",
          "lineNo": 263
        }
      ],
      "targetChanges": [
        {
          "line": "softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())",
          "type": "ADD",
          "lineNo": 262
        },
        {
          "line": ".isEqualTo(\"2016-01-01T00:00:00Z\");",
          "type": "ADD",
          "lineNo": 263
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())",
          "type": "ADD",
          "lineNo": 264
        },
        {
          "line": ".isEqualTo(\"2017-01-01T00:00:00Z\");",
          "type": "ADD",
          "lineNo": 265
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())",
          "type": "ADD",
          "lineNo": 266
        },
        {
          "line": ".isEqualTo(Duration.ofHours(168));",
          "type": "ADD",
          "lineNo": 267
        },
        {
          "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())",
          "type": "ADD",
          "lineNo": 268
        },
        {
          "line": ".isEqualTo(Duration.ofDays(6));",
          "type": "ADD",
          "lineNo": 269
        },
        {
          "line": "softly.assertThat(order.getNotBefore()).isEmpty();",
          "type": "ADD",
          "lineNo": 270
        },
        {
          "line": "softly.assertThat(order.getNotAfter()).isEmpty();",
          "type": "ADD",
          "lineNo": 271
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-01T00:00:00Z'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2017-01-01T00:00:00Z'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.time.Duration.ofHours(long)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.Duration"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.time.Duration.ofHours(long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '168'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.time.Duration.ofDays(long)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.Duration"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.time.Duration.ofDays(long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '6'"
        },
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getNotBefore()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getNotBefore()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getNotAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getNotAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-01T00:00:00Z'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2017-01-01T00:00:00Z'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.time.Duration.ofHours(long)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.Duration"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.time.Duration.ofHours(long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '168'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Duration)"
        },
        {
          "type": "CtInvocation",
          "value": "java.time.Duration.ofDays(long)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.Duration"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.time.Duration.ofDays(long)"
        },
        {
          "type": "CtLiteral",
          "value": "int '6'"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getNotBefore()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getNotBefore()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Order.getNotAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Order order"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Order.getNotAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"2016-01-01T00:00:00Z\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"2016-01-01T00:00:00Z\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"2017-01-01T00:00:00Z\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"2017-01-01T00:00:00Z\"",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "softly",
          "childCount": 0
        },
        "dstNode": {
          "label": "softly",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "softly",
          "childCount": 0
        },
        "dstNode": {
          "label": "softly",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 2
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        269
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:5",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AuthorizationTest.testUpdateRetryAfter()",
    "bSource": {
      "startLine": 253,
      "code": "/**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 253,
      "code": "/**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "DELETE",
          "lineNo": 291
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "ADD",
          "lineNo": 291
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        291
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:6",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AuthorizationTest.testWildcard()",
    "bSource": {
      "startLine": 161,
      "code": "/**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 161,
      "code": "/**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "DELETE",
          "lineNo": 194
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "ADD",
          "lineNo": 194
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        194
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:7",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AuthorizationTest.testLazyLoading()",
    "bSource": {
      "startLine": 203,
      "code": "/**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 203,
      "code": "/**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "DELETE",
          "lineNo": 247
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "ADD",
          "lineNo": 247
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        247
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:8",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AuthorizationTest.testUpdate()",
    "bSource": {
      "startLine": 115,
      "code": "/**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "aSource": {
      "startLine": 115,
      "code": "/**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "DELETE",
          "lineNo": 150
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
          "type": "ADD",
          "lineNo": 150
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.Authorization auth"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.Authorization.getExpires()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isCloseTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2016-01-02T17:12:40Z'"
        },
        {
          "type": "CtInvocation",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtExecutableReference",
          "value": "within(int,java.time.temporal.ChronoUnit)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.temporal.ChronoUnit"
        },
        {
          "type": "CtFieldReference",
          "value": "java.time.temporal.ChronoUnit SECONDS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        150
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:9",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.exception.AcmeRateLimitedExceptionTest.testAcmeRateLimitedException()",
    "bSource": {
      "startLine": 32,
      "code": "/**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }"
    },
    "aSource": {
      "startLine": 32,
      "code": "/**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);",
          "type": "DELETE",
          "lineNo": 50
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);",
          "type": "ADD",
          "lineNo": 50
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.time.Instant retryAfter"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.orElseThrow()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.time.Instant)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.time.Instant retryAfter"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThat",
          "childCount": 1
        },
        "dstNode": {
          "label": "orElseThrow",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertThat",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "retryAfter",
          "childCount": 0
        },
        "dstNode": {
          "label": "retryAfter",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        50
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:10",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.exception.AcmeRateLimitedExceptionTest.testNullAcmeRateLimitedException()",
    "bSource": {
      "startLine": 54,
      "code": "/**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isNull();\n        assertThat(ex.getDocuments()).isNull();\n    }"
    },
    "aSource": {
      "startLine": 54,
      "code": "/**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEmpty();\n        assertThat(ex.getDocuments()).isEmpty();\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(ex.getRetryAfter()).isNull();",
          "type": "DELETE",
          "lineNo": 68
        },
        {
          "line": "assertThat(ex.getDocuments()).isNull();",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(ex.getRetryAfter()).isEmpty();",
          "type": "ADD",
          "lineNo": 68
        },
        {
          "line": "assertThat(ex.getDocuments()).isEmpty();",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.time.Instant)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.Collection)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.Collection)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.Collection)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.Collection)"
        },
        {
          "type": "CtInvocation",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isNull",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEmpty",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        68
      ]
    },
    "aCommitTime": 1683386856,
    "ID": "shred/acme4j:11",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.AccountBuilderTest.testEmailAddresses()",
    "bSource": {
      "startLine": 202,
      "code": "@Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n    }"
    },
    "aSource": {
      "startLine": 202,
      "code": "@Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n\n        // mailto is still accepted if present\n        builder.addEmail(\"mailto:bar@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
    "bCommit": "09a72d6",
    "aCommit": "01a2206",
    "hunk": {
      "targetChanges": [
        {
          "line": "// mailto is still accepted if present",
          "type": "ADD",
          "lineNo": 208
        },
        {
          "line": "builder.addEmail(\"mailto:bar@example.com\");",
          "type": "ADD",
          "lineNo": 209
        },
        {
          "line": "Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));",
          "type": "ADD",
          "lineNo": 210
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "addEmail(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "var builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "addEmail(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'mailto:bar@example.com'"
        },
        {
          "type": "CtInvocation",
          "value": "addContact()"
        },
        {
          "type": "CtInvocation",
          "value": "verify(java.lang.Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(java.lang.Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "var builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "addContact()"
        },
        {
          "type": "CtInvocation",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'mailto:bar@example.com'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "addEmail",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "addContact",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1682774001,
    "ID": "shred/acme4j:2",
    "trivial": null
  },
  {
    "name": "org.shredzone.acme4j.connector.NetworkSettingsTest.testInvalidTimeouts()",
    "bSource": {
      "startLine": 49,
      "code": "@Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),\n                \"timeout accepted out of range value\");\n    }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n    }"
    },
    "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
    "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
    "bCommit": "d629611",
    "aCommit": "783fdde",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThrows(IllegalArgumentException.class,",
          "type": "DELETE",
          "lineNo": 62
        },
        {
          "line": "() -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),",
          "type": "DELETE",
          "lineNo": 63
        },
        {
          "line": "\"timeout accepted out of range value\");",
          "type": "DELETE",
          "lineNo": 64
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertThrows(java.lang.Class,java.lang.Object,java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThrows(java.lang.Class,java.lang.Object,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "setTimeout()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
        },
        {
          "type": "CtLocalVariableReference",
          "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
        },
        {
          "type": "CtExecutableReference",
          "value": "setTimeout()"
        },
        {
          "type": "CtInvocation",
          "value": "ofMillis()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.time.Duration"
        },
        {
          "type": "CtExecutableReference",
          "value": "ofMillis()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Integer.MAX_VALUE"
        },
        {
          "type": "CtLiteral",
          "value": "long '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'timeout accepted out of range value'"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThrows",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        73
      ]
    },
    "aCommitTime": 1682363767,
    "ID": "shred/acme4j:0",
    "trivial": null
  }
]