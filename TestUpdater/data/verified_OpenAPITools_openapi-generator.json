[
    {
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_date": "2024-04-09 12:21:54+08:00",
        "commit_src": "45a657f59d73e5da1d33715272f6e98fe6f7174f",
        "commit_tgt": "b2a7f435c824ad5a36ad46420c7cd92ccf5d4240",
        "changed_test": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java#toEnumVarNameShouldNotResultInSingleUnderscore",
        "changed_prod": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#toEnumVarName",
        "test_code_src": "@Test\n    public void toEnumVarNameShouldNotResultInSingleUnderscore() throws Exception {\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\" \", \"String\"), \"SPACE\");\n    }",
        "test_code_tgt": "@Test\n    public void toEnumVarNameShouldNotResultInSingleUnderscore() throws Exception {\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\" \", \"String\"), \"SPACE\");\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\"==\", \"String\"), \"u\");\n    }",
        "prod_code_src": "@Override\n    public String toEnumVarName(String value, String datatype) {\n        if (enumNameMapping.containsKey(value)) {\n            return enumNameMapping.get(value);\n        }\n\n        if (value.length() == 0) {\n            return \"EMPTY\";\n        }\n\n        // for symbol, e.g. $, #\n        if (getSymbolName(value) != null) {\n            return getSymbolName(value).toUpperCase(Locale.ROOT);\n        }\n\n        if (\" \".equals(value)) {\n            return \"SPACE\";\n        }\n\n        // number\n        if (\"Integer\".equals(datatype) || \"Long\".equals(datatype) ||\n                \"Float\".equals(datatype) || \"Double\".equals(datatype) || \"BigDecimal\".equals(datatype)) {\n            String varName = \"NUMBER_\" + value;\n            varName = varName.replaceAll(\"-\", \"MINUS_\");\n            varName = varName.replaceAll(\"\\\\+\", \"PLUS_\");\n            varName = varName.replaceAll(\"\\\\.\", \"_DOT_\");\n            return varName;\n        }\n\n        // string\n        String var = value.replaceAll(\"\\\\W+\", \"_\").toUpperCase(Locale.ROOT);\n        if (var.matches(\"\\\\d.*\")) {\n            return \"_\" + var;\n        } else {\n            return var;\n        }\n    }",
        "prod_code_tgt": "@Override\n    public String toEnumVarName(String value, String datatype) {\n        if (enumNameMapping.containsKey(value)) {\n            return enumNameMapping.get(value);\n        }\n\n        if (value.length() == 0) {\n            return \"EMPTY\";\n        }\n\n        // for symbol, e.g. $, #\n        if (getSymbolName(value) != null) {\n            return getSymbolName(value).toUpperCase(Locale.ROOT);\n        }\n\n        if (\" \".equals(value)) {\n            return \"SPACE\";\n        }\n\n        // number\n        if (\"Integer\".equals(datatype) || \"Long\".equals(datatype) ||\n                \"Float\".equals(datatype) || \"Double\".equals(datatype) || \"BigDecimal\".equals(datatype)) {\n            String varName = \"NUMBER_\" + value;\n            varName = varName.replaceAll(\"-\", \"MINUS_\");\n            varName = varName.replaceAll(\"\\\\+\", \"PLUS_\");\n            varName = varName.replaceAll(\"\\\\.\", \"_DOT_\");\n            return varName;\n        }\n\n        // string\n        String var = value.replaceAll(\"\\\\W+\", \"_\").toUpperCase(Locale.ROOT);\n        if (var.matches(\"\\\\d.*\")) {\n            var = \"_\" + var;\n        }\n        return this.toVarName(var);\n    }",
        "test_id": 0,
        "src_java_version": "11",
        "src_maven_version": "3.9.9",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.9.9"
    },
    {
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_date": "2024-04-07 22:33:16+08:00",
        "commit_src": "a91d8e2c577f39f9bffe58b4ed49811dcb627b03",
        "commit_tgt": "560089e4c71e5cd180fe5b62ffc8c52178fabf75",
        "changed_test": "modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/AbstractKotlinCodegenTest.java#toEnumValue",
        "changed_prod": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java#toEnumValue",
        "test_code_src": "@Test\n    public void toEnumValue() {\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Int\"), \"1\");\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Double\"), \"1.0\");\n        assertEquals(codegen.toEnumValue(\"1.3\", \"kotlin.Double\"), \"1.3\");\n        assertEquals(codegen.toEnumValue(\"1337\", \"kotlin.Long\"), \"1337\");\n        assertEquals(codegen.toEnumValue(\"5\", \"kotlin.Float\"), \"5f\");\n        assertEquals(codegen.toEnumValue(\"1.0\", \"kotlin.Float\"), \"1.0f\");\n        assertEquals(codegen.toEnumValue(\"data\", \"Something\"), \"\\\"data\\\"\");\n    }",
        "test_code_tgt": "@Test\n    public void toEnumValue() {\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Int\"), \"1\");\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Double\"), \"1.0\");\n        assertEquals(codegen.toEnumValue(\"1.3\", \"kotlin.Double\"), \"1.3\");\n        assertEquals(codegen.toEnumValue(\"1337\", \"kotlin.Long\"), \"1337\");\n        assertEquals(codegen.toEnumValue(\"5\", \"kotlin.Float\"), \"5f\");\n        assertEquals(codegen.toEnumValue(\"1.0\", \"kotlin.Float\"), \"1.0f\");\n        assertEquals(codegen.toEnumValue(\"data\", \"Something\"), \"\\\"data\\\"\");\n        assertEquals(codegen.toEnumValue(\"data/*\", \"Something\"), \"\\\"data/*\\\"\");\n    }",
        "prod_code_src": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"kotlin.Int\".equals(datatype) || \"kotlin.Long\".equals(datatype)) {\n            return value;\n        } else if (\"kotlin.Double\".equals(datatype)) {\n            if (value.contains(\".\")) {\n                return value;\n            } else {\n                return value + \".0\"; // Float and double must have .0\n            }\n        } else if (\"kotlin.Float\".equals(datatype)) {\n            return value + \"f\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }",
        "prod_code_tgt": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"kotlin.Int\".equals(datatype) || \"kotlin.Long\".equals(datatype)) {\n            return value;\n        } else if (\"kotlin.Double\".equals(datatype)) {\n            if (value.contains(\".\")) {\n                return value;\n            } else {\n                return value + \".0\"; // Float and double must have .0\n            }\n        } else if (\"kotlin.Float\".equals(datatype)) {\n            return value + \"f\";\n        } else {\n            return \"\\\"\" + value + \"\\\"\";\n        }\n    }",
        "test_id": 1,
        "src_java_version": "11",
        "src_maven_version": "3.9.9",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.9.9"
    },
    {
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_date": "2023-11-07 15:16:41+08:00",
        "commit_src": "c301004b7e5956f4bdaab2dfc9a57ade45fddbd8",
        "commit_tgt": "ba8546189a68c1efb49e7a90d7584af5d1a8932a",
        "changed_test": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java#toEnumValue",
        "changed_prod": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java#toEnumValue",
        "test_code_src": "@Test\n    public void toEnumValue() {\n        final AbstractJavaCodegen codegen = new P_AbstractJavaCodegen();\n        Assert.assertEquals(codegen.toEnumValue(\"1\", \"Integer\"), \"1\");\n        Assert.assertEquals(codegen.toEnumValue(\"42\", \"Double\"), \"42\");\n        Assert.assertEquals(codegen.toEnumValue(\"1337\", \"Long\"), \"1337l\");\n        Assert.assertEquals(codegen.toEnumValue(\"3.14\", \"Float\"), \"3.14f\");\n    }",
        "test_code_tgt": "@Test\n    public void toEnumValue() {\n        final AbstractJavaCodegen codegen = new P_AbstractJavaCodegen();\n        Assert.assertEquals(codegen.toEnumValue(\"1\", \"Integer\"), \"1\");\n        Assert.assertEquals(codegen.toEnumValue(\"42\", \"Double\"), \"42\");\n        Assert.assertEquals(codegen.toEnumValue(\"1337\", \"Long\"), \"1337l\");\n        Assert.assertEquals(codegen.toEnumValue(\"3.14\", \"Float\"), \"3.14f\");\n        Assert.assertEquals(codegen.toEnumValue(\"schema.json\", \"URI\"), \"URI.create(\\\"schema.json\\\")\");\n    }",
        "prod_code_src": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"Integer\".equals(datatype) || \"Double\".equals(datatype)) {\n            return value;\n        } else if (\"Long\".equals(datatype)) {\n            // add l to number, e.g. 2048 => 2048l\n            return value + \"l\";\n        } else if (\"Float\".equals(datatype)) {\n            // add f to number, e.g. 3.14 => 3.14f\n            return value + \"f\";\n        } else if (\"BigDecimal\".equals(datatype)) {\n            // use BigDecimal String constructor\n            return \"new BigDecimal(\\\"\" + value + \"\\\")\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }",
        "prod_code_tgt": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"Integer\".equals(datatype) || \"Double\".equals(datatype)) {\n            return value;\n        } else if (\"Long\".equals(datatype)) {\n            // add l to number, e.g. 2048 => 2048l\n            return value + \"l\";\n        } else if (\"Float\".equals(datatype)) {\n            // add f to number, e.g. 3.14 => 3.14f\n            return value + \"f\";\n        } else if (\"BigDecimal\".equals(datatype)) {\n            // use BigDecimal String constructor\n            return \"new BigDecimal(\\\"\" + value + \"\\\")\";\n        } else if (\"URI\".equals(datatype)) {\n            return \"URI.create(\\\"\" + escapeText(value) + \"\\\")\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }",
        "test_id": 2,
        "src_java_version": "11",
        "src_maven_version": "3.9.9",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.9.9"
    },
    {
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_date": "2023-08-07 14:38:29+08:00",
        "commit_src": "f6ac603e157b7e4d5c9376f762c3103f6e58560d",
        "commit_tgt": "097385bde618461659dde5840351c00279897e11",
        "changed_test": "modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/AbstractKotlinCodegenTest.java#convertModelName",
        "changed_prod": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java#toModelName",
        "test_code_src": "@Test\n    public void convertModelName() {\n        assertEquals(codegen.toModelName(\"$\"), \"Dollar\");\n        assertEquals(codegen.toModelName(\"$$\"), \"DollarDollar\");\n        assertEquals(codegen.toModelName(\"Pony?\"), \"PonyQuestionMark\");\n        assertEquals(codegen.toModelName(\"$name\"), \"DollarName\");\n        assertEquals(codegen.toModelName(\"nam#e\"), \"NamHashE\");\n        assertEquals(codegen.toModelName(\"$another-fake?\"), \"DollarAnotherMinusFakeQuestionMark\");\n        assertEquals(codegen.toModelName(\"Pony>=>=\"), \"PonyGreaterThanEqualGreaterThanEqual\");\n    }",
        "test_code_tgt": "@Test\n    public void convertModelName() {\n        assertEquals(codegen.toModelName(\"$\"), \"Dollar\");\n        assertEquals(codegen.toModelName(\"$$\"), \"DollarDollar\");\n        assertEquals(codegen.toModelName(\"Pony?\"), \"PonyQuestionMark\");\n        assertEquals(codegen.toModelName(\"$name\"), \"DollarName\");\n        assertEquals(codegen.toModelName(\"nam#e\"), \"NamHashE\");\n        assertEquals(codegen.toModelName(\"$another-fake?\"), \"DollarAnotherFakeQuestionMark\");\n        assertEquals(codegen.toModelName(\"Pony>=>=\"), \"PonyGreaterThanEqualGreaterThanEqual\");\n    }",
        "prod_code_src": "@Override\n    public String toModelName(final String name) {\n        // memoization\n        if (schemaKeyToModelNameCache.containsKey(name)) {\n            return schemaKeyToModelNameCache.get(name);\n        }\n\n        // Allow for explicitly configured kotlin.* and java.* types\n        if (name.startsWith(\"kotlin.\") || name.startsWith(\"java.\")) {\n            return name;\n        }\n\n        // If schemaMapping contains name, assume this is a legitimate model name.\n        if (schemaMapping.containsKey(name)) {\n            return schemaMapping.get(name);\n        }\n\n        // TODO review importMapping below as we've added schema mapping support\n        // If importMapping contains name, assume this is a legitimate model name.\n        if (importMapping.containsKey(name)) {\n            return importMapping.get(name);\n        }\n\n        String modifiedName = name.replaceAll(\"\\\\.\", \"\");\n\n        String nameWithPrefixSuffix = sanitizeKotlinSpecificNames(modifiedName);\n        if (!StringUtils.isEmpty(modelNamePrefix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = modelNamePrefix + \"_\" + nameWithPrefixSuffix;\n        }\n\n        if (!StringUtils.isEmpty(modelNameSuffix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = nameWithPrefixSuffix + \"_\" + modelNameSuffix;\n        }\n\n        // Camelize name of nested properties\n        modifiedName = camelize(nameWithPrefixSuffix);\n\n        // model name cannot use reserved keyword, e.g. return\n        if (isReservedWord(modifiedName)) {\n            final String modelName = \"Model\" + modifiedName;\n            LOGGER.warn(\"{} (reserved word) cannot be used as model name. Renamed to {}\", modifiedName, modelName);\n            return modelName;\n        }\n\n        // model name starts with number\n        if (modifiedName.matches(\"^\\\\d.*\")) {\n            final String modelName = \"Model\" + modifiedName; // e.g. 200Response => Model200Response (after camelize)\n            LOGGER.warn(\"{} (model name starts with number) cannot be used as model name. Renamed to {}\", name,\n                    modelName);\n            return modelName;\n        }\n\n        schemaKeyToModelNameCache.put(name, titleCase(modifiedName));\n        return schemaKeyToModelNameCache.get(name);\n    }",
        "prod_code_tgt": "@Override\n    public String toModelName(final String name) {\n        // memoization\n        if (schemaKeyToModelNameCache.containsKey(name)) {\n            return schemaKeyToModelNameCache.get(name);\n        }\n\n        // Allow for explicitly configured kotlin.* and java.* types\n        if (name.startsWith(\"kotlin.\") || name.startsWith(\"java.\")) {\n            return name;\n        }\n\n        // If schemaMapping contains name, assume this is a legitimate model name.\n        if (schemaMapping.containsKey(name)) {\n            return schemaMapping.get(name);\n        }\n\n        // TODO review importMapping below as we've added schema mapping support\n        // If importMapping contains name, assume this is a legitimate model name.\n        if (importMapping.containsKey(name)) {\n            return importMapping.get(name);\n        }\n\n        String modifiedName = name.replaceAll(\"\\\\.\", \"\").replaceAll(\"-\", \"_\");\n\n        String nameWithPrefixSuffix = sanitizeKotlinSpecificNames(modifiedName);\n        if (!StringUtils.isEmpty(modelNamePrefix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = modelNamePrefix + \"_\" + nameWithPrefixSuffix;\n        }\n\n        if (!StringUtils.isEmpty(modelNameSuffix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = nameWithPrefixSuffix + \"_\" + modelNameSuffix;\n        }\n\n        // Camelize name of nested properties\n        modifiedName = camelize(nameWithPrefixSuffix);\n\n        // model name cannot use reserved keyword, e.g. return\n        if (isReservedWord(modifiedName)) {\n            final String modelName = \"Model\" + modifiedName;\n            LOGGER.warn(\"{} (reserved word) cannot be used as model name. Renamed to {}\", modifiedName, modelName);\n            return modelName;\n        }\n\n        // model name starts with number\n        if (modifiedName.matches(\"^\\\\d.*\")) {\n            final String modelName = \"Model\" + modifiedName; // e.g. 200Response => Model200Response (after camelize)\n            LOGGER.warn(\"{} (model name starts with number) cannot be used as model name. Renamed to {}\", name,\n                    modelName);\n            return modelName;\n        }\n\n        schemaKeyToModelNameCache.put(name, titleCase(modifiedName));\n        return schemaKeyToModelNameCache.get(name);\n    }",
        "test_id": 3,
        "src_java_version": "11",
        "src_maven_version": "3.9.9",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.9.9"
    },
    {
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_date": "2023-06-30 14:25:04+08:00",
        "commit_src": "9a968c310464d3e0bfd081e18b9146620ce7e626",
        "commit_tgt": "cdac1366d4b34f323373020f7443bb7e1cb2af50",
        "changed_test": "modules/openapi-generator/src/test/java/org/openapitools/codegen/rust/AbstractRustCodegenTest.java#testToEnumName",
        "changed_prod": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractRustCodegen.java#toEnumName",
        "test_code_src": "@Test\n    public void testToEnumName() {\n        Function<String, String> toEnumName = (String name) -> {\n            CodegenProperty property = new CodegenProperty();\n            property.name = name;\n            return codegen.toEnumName(property);\n        };\n        // Should be converted to camel case\n        Assert.assertEquals(toEnumName.apply(\"pet_status\"), \"PetStatusWithSuffix\");\n        // Prefix is added when starting with a number\n        Assert.assertEquals(toEnumName.apply(\"1_pet_status\"), \"Enum1PetStatusWithSuffix\");\n    }",
        "test_code_tgt": "@Test\n    public void testToEnumName() {\n        Function<String, String> toEnumName = (String name) -> {\n            CodegenProperty property = new CodegenProperty();\n            property.baseName = name;\n            return codegen.toEnumName(property);\n        };\n        // Should be converted to camel case\n        Assert.assertEquals(toEnumName.apply(\"pet_status\"), \"PetStatusWithSuffix\");\n        // Prefix is added when starting with a number\n        Assert.assertEquals(toEnumName.apply(\"1_pet_status\"), \"Enum1PetStatusWithSuffix\");\n    }",
        "prod_code_src": "@Override\n    public String toEnumName(CodegenProperty property) {\n        // Note: Strangely this function is only used for inline enums, schema enums go through the toModelName function\n        String name = property.name;\n        if (!Strings.isNullOrEmpty(enumSuffix)) {\n            name = name + \"_\" + enumSuffix;\n        }\n        return sanitizeIdentifier(name, CasingType.CAMEL_CASE, \"enum\", \"enum\", false);\n    }",
        "prod_code_tgt": "@Override\n    public String toEnumName(CodegenProperty property) {\n        // Note: Strangely this function is only used for inline enums, schema enums go through the toModelName function\n        String name = property.baseName;\n        if (!Strings.isNullOrEmpty(enumSuffix)) {\n            name = name + \"_\" + enumSuffix;\n        }\n        return sanitizeIdentifier(name, CasingType.CAMEL_CASE, \"enum\", \"enum\", false);\n    }",
        "test_id": 4,
        "src_java_version": "11",
        "src_maven_version": "3.9.9",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.9.9"
    }
]