[
  {
    "name": "org.apache.rocketmq.broker.processor.PeekMessageProcessorTest.testProcessRequest_QueueIdError()",
    "bSource": {
      "startLine": 153,
      "code": "@Test\n    public void testProcessRequest_QueueIdError() throws RemotingCommandException {\n        RemotingCommand request = createPeekMessageRequest(\"group\",\"topic\",17);\n        RemotingCommand response = peekMessageProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n    }"
    },
    "aSource": {
      "startLine": 153,
      "code": "@Test\n    public void testProcessRequest_QueueIdError() throws RemotingCommandException {\n        RemotingCommand request = createPeekMessageRequest(\"group\",\"topic\",17);\n        RemotingCommand response = peekMessageProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.INVALID_PARAMETER);\n    }"
    },
    "bPath": "broker/src/test/java/org/apache/rocketmq/broker/processor/PeekMessageProcessorTest.java",
    "aPath": "broker/src/test/java/org/apache/rocketmq/broker/processor/PeekMessageProcessorTest.java",
    "bCommit": "9aa081b8a",
    "aCommit": "b5cf3ca90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);",
          "type": "DELETE",
          "lineNo": 157
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(response.getCode()).isEqualTo(ResponseCode.INVALID_PARAMETER);",
          "type": "ADD",
          "lineNo": 157
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(int)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(int)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand response"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(int)"
        },
        {
          "type": "CtFieldRead",
          "value": "int SYSTEM_ERROR"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int SYSTEM_ERROR"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(int)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(int)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand response"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(int)"
        },
        {
          "type": "CtFieldRead",
          "value": "int INVALID_PARAMETER"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int INVALID_PARAMETER"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "ResponseCode.SYSTEM_ERROR",
          "childCount": 0
        },
        "dstNode": {
          "label": "ResponseCode.INVALID_PARAMETER",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        157
      ]
    },
    "aCommitTime": 1734142134,
    "ID": "apache/rocketmq:7",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.broker.client.net.Broker2ClientTest.testResetOffsetNoTopicConfig()",
    "bSource": {
      "startLine": 128,
      "code": "@Test\n    public void testResetOffsetNoTopicConfig() throws RemotingCommandException {\n        when(topicConfigManager.selectTopicConfig(defaultTopic)).thenReturn(null);\n        RemotingCommand response = broker2Client.resetOffset(defaultTopic, defaultGroup, timestamp, isForce);\n        assertEquals(ResponseCode.SYSTEM_ERROR, response.getCode());\n    }"
    },
    "aSource": {
      "startLine": 128,
      "code": "@Test\n    public void testResetOffsetNoTopicConfig() throws RemotingCommandException {\n        when(topicConfigManager.selectTopicConfig(defaultTopic)).thenReturn(null);\n        RemotingCommand response = broker2Client.resetOffset(defaultTopic, defaultGroup, timestamp, isForce);\n        assertEquals(ResponseCode.TOPIC_NOT_EXIST, response.getCode());\n    }"
    },
    "bPath": "broker/src/test/java/org/apache/rocketmq/broker/client/net/Broker2ClientTest.java",
    "aPath": "broker/src/test/java/org/apache/rocketmq/broker/client/net/Broker2ClientTest.java",
    "bCommit": "9aa081b8a",
    "aCommit": "b5cf3ca90",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertEquals(ResponseCode.SYSTEM_ERROR, response.getCode());",
          "type": "DELETE",
          "lineNo": 132
        }
      ],
      "targetChanges": [
        {
          "line": "assertEquals(ResponseCode.TOPIC_NOT_EXIST, response.getCode());",
          "type": "ADD",
          "lineNo": 132
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "int SYSTEM_ERROR"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int SYSTEM_ERROR"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand response"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand response"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getCode()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "ResponseCode.SYSTEM_ERROR",
          "childCount": 0
        },
        "dstNode": {
          "label": "ResponseCode.TOPIC_NOT_EXIST",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        132
      ]
    },
    "aCommitTime": 1734142134,
    "ID": "apache/rocketmq:8",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.testGenPartitionFromQueueData()",
    "bSource": {
      "startLine": 229,
      "code": "@Test\n    public void testGenPartitionFromQueueData() throws Exception {\n        // test queueData with 8 read queues, 8 write queues, and rw permission, expect 8 rw queues.\n        QueueData queueDataWith8R8WPermRW = createQueueData(8, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermRW, GRPC_TOPIC, TopicMessageType.NORMAL, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermRW.size());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.NORMAL.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and read only permission, expect 8 read only queues.\n        QueueData queueDataWith8R8WPermR = createQueueData(8, 8, PermName.PERM_READ);\n        List<MessageQueue> partitionWith8R8WPermR = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermR, GRPC_TOPIC, TopicMessageType.FIFO, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermR.size());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.FIFO.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and write only permission, expect 8 write only queues.\n        QueueData queueDataWith8R8WPermW = createQueueData(8, 8, PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermW, GRPC_TOPIC, TopicMessageType.TRANSACTION, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermW.size());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.TRANSACTION.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 8 read queues, 0 write queues, and rw permission, expect 8 read only queues.\n        QueueData queueDataWith8R0WPermRW = createQueueData(8, 0, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R0WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R0WPermRW, GRPC_TOPIC, TopicMessageType.DELAY, GRPC_BROKER);\n        assertEquals(8, partitionWith8R0WPermRW.size());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.DELAY.getNumber()).count());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 4 read queues, 8 write queues, and rw permission, expect 4 rw queues and  4 write only queues.\n        QueueData queueDataWith4R8WPermRW = createQueueData(4, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(8, partitionWith4R8WPermRW.size());\n        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n    }"
    },
    "aSource": {
      "startLine": 229,
      "code": "@Test\n    public void testGenPartitionFromQueueData() throws Exception {\n        // test queueData with 8 read queues, 8 write queues, and rw permission, expect 8 rw queues.\n        QueueData queueDataWith8R8WPermRW = createQueueData(8, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermRW, GRPC_TOPIC, TopicMessageType.NORMAL, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermRW.size());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.NORMAL.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and read only permission, expect 8 read only queues.\n        QueueData queueDataWith8R8WPermR = createQueueData(8, 8, PermName.PERM_READ);\n        List<MessageQueue> partitionWith8R8WPermR = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermR, GRPC_TOPIC, TopicMessageType.FIFO, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermR.size());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.FIFO.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and write only permission, expect 8 write only queues.\n        QueueData queueDataWith8R8WPermW = createQueueData(8, 8, PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermW, GRPC_TOPIC, TopicMessageType.TRANSACTION, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermW.size());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.TRANSACTION.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 8 read queues, 0 write queues, and rw permission, expect 8 read only queues.\n        QueueData queueDataWith8R0WPermRW = createQueueData(8, 0, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R0WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R0WPermRW, GRPC_TOPIC, TopicMessageType.DELAY, GRPC_BROKER);\n        assertEquals(8, partitionWith8R0WPermRW.size());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.DELAY.getNumber()).count());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 4 read queues, 8 write queues, and rw permission, expect 4 rw queues and  4 write only queues.\n        QueueData queueDataWith4R8WPermRW = createQueueData(4, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(8, partitionWith4R8WPermRW.size());\n        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 2 read queues, 2 write queues, and no permission, expect 2 no permission queues.\n        QueueData queueDataWith2R2WNoPerm = createQueueData(2, 2, 0);\n        List<MessageQueue> partitionWith2R2WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith2R2WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(2, partitionWith2R2WNoPerm.size());\n        assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 0 read queues, 0 write queues, and no permission, expect 1 no permission queue.\n        QueueData queueDataWith0R0WNoPerm = createQueueData(0, 0, 0);\n        List<MessageQueue> partitionWith0R0WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith0R0WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(1, partitionWith0R0WNoPerm.size());\n        assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
    "bCommit": "66ba4566f",
    "aCommit": "87b97f271",
    "hunk": {
      "targetChanges": [
        {
          "line": "// test queueData with 2 read queues, 2 write queues, and no permission, expect 2 no permission queues.",
          "type": "ADD",
          "lineNo": 276
        },
        {
          "line": "QueueData queueDataWith2R2WNoPerm = createQueueData(2, 2, 0);",
          "type": "ADD",
          "lineNo": 277
        },
        {
          "line": "List<MessageQueue> partitionWith2R2WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith2R2WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);",
          "type": "ADD",
          "lineNo": 278
        },
        {
          "line": "assertEquals(2, partitionWith2R2WNoPerm.size());",
          "type": "ADD",
          "lineNo": 279
        },
        {
          "line": "assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());",
          "type": "ADD",
          "lineNo": 280
        },
        {
          "line": "assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());",
          "type": "ADD",
          "lineNo": 281
        },
        {
          "line": "assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());",
          "type": "ADD",
          "lineNo": 282
        },
        {
          "line": "assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());",
          "type": "ADD",
          "lineNo": 283
        },
        {
          "line": "assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());",
          "type": "ADD",
          "lineNo": 284
        },
        {
          "line": "// test queueData with 0 read queues, 0 write queues, and no permission, expect 1 no permission queue.",
          "type": "ADD",
          "lineNo": 286
        },
        {
          "line": "QueueData queueDataWith0R0WNoPerm = createQueueData(0, 0, 0);",
          "type": "ADD",
          "lineNo": 287
        },
        {
          "line": "List<MessageQueue> partitionWith0R0WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith0R0WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);",
          "type": "ADD",
          "lineNo": 288
        },
        {
          "line": "assertEquals(1, partitionWith0R0WNoPerm.size());",
          "type": "ADD",
          "lineNo": 289
        },
        {
          "line": "assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());",
          "type": "ADD",
          "lineNo": 290
        },
        {
          "line": "assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());",
          "type": "ADD",
          "lineNo": 291
        },
        {
          "line": "assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());",
          "type": "ADD",
          "lineNo": 292
        },
        {
          "line": "assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());",
          "type": "ADD",
          "lineNo": 293
        },
        {
          "line": "assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());",
          "type": "ADD",
          "lineNo": 294
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData queueDataWith2R2WNoPerm"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.createQueueData(int,int,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.createQueueData(int,int,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "apache.rocketmq.v2.MessageQueue"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity.genMessageQueueFromQueueData(QueueData,Resource,TopicMessageType,Broker)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity routeActivity"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity.genMessageQueueFromQueueData(QueueData,Resource,TopicMessageType,Broker)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData queueDataWith2R2WNoPerm"
        },
        {
          "type": "CtFieldRead",
          "value": "apache.rocketmq.v2.Resource GRPC_TOPIC"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType UNSPECIFIED"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType UNSPECIFIED"
        },
        {
          "type": "CtFieldRead",
          "value": "apache.rocketmq.v2.Broker GRPC_BROKER"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.size()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.size()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getAcceptMessageTypesValue()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAcceptMessageTypesValue()"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "getNumber()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> MessageType.MESSAGE_TYPE_UNSPECIFIED"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNumber()"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '2'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.NONE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.WRITE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.READ_WRITE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith2R2WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.READ"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData queueDataWith0R0WNoPerm"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.createQueueData(int,int,int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.createQueueData(int,int,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "apache.rocketmq.v2.MessageQueue"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity.genMessageQueueFromQueueData(QueueData,Resource,TopicMessageType,Broker)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity routeActivity"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivity.genMessageQueueFromQueueData(QueueData,Resource,TopicMessageType,Broker)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.route.QueueData queueDataWith0R0WNoPerm"
        },
        {
          "type": "CtFieldRead",
          "value": "apache.rocketmq.v2.Resource GRPC_TOPIC"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType UNSPECIFIED"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType UNSPECIFIED"
        },
        {
          "type": "CtFieldRead",
          "value": "apache.rocketmq.v2.Broker GRPC_BROKER"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.size()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.size()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getAcceptMessageTypesValue()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAcceptMessageTypesValue()"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "getNumber()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> MessageType.MESSAGE_TYPE_UNSPECIFIED"
        },
        {
          "type": "CtExecutableReference",
          "value": "getNumber()"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.NONE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.WRITE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.READ_WRITE"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(int,<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtInvocation",
          "value": "count()"
        },
        {
          "type": "CtInvocation",
          "value": "filter()"
        },
        {
          "type": "CtInvocation",
          "value": "stream()"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List partitionWith0R0WNoPerm"
        },
        {
          "type": "CtExecutableReference",
          "value": "stream()"
        },
        {
          "type": "CtExecutableReference",
          "value": "filter()"
        },
        {
          "type": "CtParameter",
          "value": "<unknown> a"
        },
        {
          "type": "CtInvocation",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> a"
        },
        {
          "type": "CtParameterReference",
          "value": "<unknown> a"
        },
        {
          "type": "CtExecutableReference",
          "value": "getPermission()"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> Permission.READ"
        },
        {
          "type": "CtExecutableReference",
          "value": "count()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "queueDataWith2R2WNoPerm",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "partitionWith2R2WNoPerm",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "queueDataWith0R0WNoPerm",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "partitionWith0R0WNoPerm",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertEquals",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1731583459,
    "ID": "apache/rocketmq:4",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.client.rpchook.NamespaceRpcHookTest.testDoBeforeRequestWithoutNamespace()",
    "bSource": {
      "startLine": 46,
      "code": "@Test\n    public void testDoBeforeRequestWithoutNamespace() {\n        clientConfig = new ClientConfig();\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(pullMessageRequestHeader.getNamespaced()).isNull();\n        assertThat(pullMessageRequestHeader.getNamespace()).isNull();\n    }"
    },
    "aSource": {
      "startLine": 47,
      "code": "@Test\n    public void testDoBeforeRequestWithoutNamespace() {\n        clientConfig = new ClientConfig();\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(request.getExtFields()).isNull();\n    }"
    },
    "bPath": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
    "aPath": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
    "bCommit": "6d7513425",
    "aCommit": "526235814",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(pullMessageRequestHeader.getNamespaced()).isNull();",
          "type": "DELETE",
          "lineNo": 53
        },
        {
          "line": "assertThat(pullMessageRequestHeader.getNamespace()).isNull();",
          "type": "DELETE",
          "lineNo": 54
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(request.getExtFields()).isNull();",
          "type": "ADD",
          "lineNo": 54
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.Boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.Boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespaced()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader pullMessageRequestHeader"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespaced()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespace()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader pullMessageRequestHeader"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespace()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.HashMap)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.HashMap)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand request"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNamespace",
          "childCount": 1
        },
        "dstNode": {
          "label": "getExtFields",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pullMessageRequestHeader",
          "childCount": 0
        },
        "dstNode": {
          "label": "request",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isNull",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1705989386,
    "ID": "apache/rocketmq:2",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.client.rpchook.NamespaceRpcHookTest.testDoBeforeRequestWithNamespace()",
    "bSource": {
      "startLine": 34,
      "code": "@Test\n    public void testDoBeforeRequestWithNamespace() {\n        clientConfig = new ClientConfig();\n        clientConfig.setNamespaceV2(namespace);\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(pullMessageRequestHeader.getNamespaced()).isTrue();\n        assertThat(pullMessageRequestHeader.getNamespace()).isEqualTo(namespace);\n    }"
    },
    "aSource": {
      "startLine": 35,
      "code": "@Test\n    public void testDoBeforeRequestWithNamespace() {\n        clientConfig = new ClientConfig();\n        clientConfig.setNamespaceV2(namespace);\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACED_FIELD)).isEqualTo(\"true\");\n        assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACE_FIELD)).isEqualTo(namespace);\n    }"
    },
    "bPath": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
    "aPath": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
    "bCommit": "6d7513425",
    "aCommit": "526235814",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(pullMessageRequestHeader.getNamespaced()).isTrue();",
          "type": "DELETE",
          "lineNo": 42
        },
        {
          "line": "assertThat(pullMessageRequestHeader.getNamespace()).isEqualTo(namespace);",
          "type": "DELETE",
          "lineNo": 43
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACED_FIELD)).isEqualTo(\"true\");",
          "type": "ADD",
          "lineNo": 43
        },
        {
          "line": "assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACE_FIELD)).isEqualTo(namespace);",
          "type": "ADD",
          "lineNo": 44
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "isTrue()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.Boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.Boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespaced()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader pullMessageRequestHeader"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespaced()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isTrue()"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespace()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.header.PullMessageRequestHeader pullMessageRequestHeader"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.rpc.RpcRequestHeader.getNamespace()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String namespace"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.HashMap.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand request"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.HashMap.get(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RPC_REQUEST_HEADER_NAMESPACED_FIELD"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.MixAll"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String RPC_REQUEST_HEADER_NAMESPACED_FIELD"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.HashMap.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand request"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.remoting.protocol.RemotingCommand.getExtFields()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.HashMap.get(Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String RPC_REQUEST_HEADER_NAMESPACE_FIELD"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.MixAll"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String RPC_REQUEST_HEADER_NAMESPACE_FIELD"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String namespace"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isTrue",
          "childCount": 1
        },
        "dstNode": {
          "label": "isEqualTo",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNamespaced",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getNamespace",
          "childCount": 1
        },
        "dstNode": {
          "label": "get",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pullMessageRequestHeader",
          "childCount": 0
        },
        "dstNode": {
          "label": "request",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pullMessageRequestHeader",
          "childCount": 0
        },
        "dstNode": {
          "label": "request",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pullMessageRequestHeader",
          "childCount": 0
        },
        "dstNode": {
          "label": "request",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "pullMessageRequestHeader",
          "childCount": 0
        },
        "dstNode": {
          "label": "request",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        43
      ]
    },
    "aCommitTime": 1705989386,
    "ID": "apache/rocketmq:3",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.common.utils.ConcurrentHashMapUtilsTest.computeIfAbsent()",
    "bSource": {
      "startLine": 27,
      "code": "@Test\n    public void computeIfAbsent() {\n\n        ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();\n        map.put(\"123\", \"1111\");\n        String value = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"234\");\n        assertEquals(\"1111\", value);\n        String value1 = ConcurrentHashMapUtils.computeIfAbsent(map, \"1232\", k -> \"2342\");\n        assertEquals(\"2342\", value1);\n        String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"2342\");\n        assertEquals(\"1111\", value2);\n    }"
    },
    "aSource": {
      "startLine": 27,
      "code": "@Test\n    public void computeIfAbsent() {\n\n        ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();\n        map.put(\"123\", \"1111\");\n        String value = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"234\");\n        assertEquals(\"1111\", value);\n        String value1 = ConcurrentHashMapUtils.computeIfAbsent(map, \"1232\", k -> \"2342\");\n        assertEquals(\"2342\", value1);\n        String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"2342\");\n        assertEquals(\"1111\", value2);\n//        map.computeIfAbsent(\"AaAa\", key->map.computeIfAbsent(\"BBBB\",key2->\"42\"));\n        ConcurrentHashMapUtils.computeIfAbsent(map, \"AaAa\", key -> map.computeIfAbsent(\"BBBB\", key2 -> \"42\"));\n    }"
    },
    "bPath": "common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java",
    "aPath": "common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java",
    "bCommit": "737c1e533",
    "aCommit": "7996ec3b3",
    "hunk": {
      "targetChanges": [
        {
          "line": "//        map.computeIfAbsent(\"AaAa\", key->map.computeIfAbsent(\"BBBB\",key2->\"42\"));",
          "type": "ADD",
          "lineNo": 38
        },
        {
          "line": "ConcurrentHashMapUtils.computeIfAbsent(map, \"AaAa\", key -> map.computeIfAbsent(\"BBBB\", key2 -> \"42\"));",
          "type": "ADD",
          "lineNo": 39
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.common.utils.ConcurrentHashMapUtils.computeIfAbsent(ConcurrentMap,Object,Function)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.utils.ConcurrentHashMapUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.common.utils.ConcurrentHashMapUtils.computeIfAbsent(ConcurrentMap,Object,Function)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.ConcurrentHashMap map"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'AaAa'"
        },
        {
          "type": "CtParameter",
          "value": "java.lang.String key"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(Object,Function)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.ConcurrentHashMap map"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.concurrent.ConcurrentHashMap.computeIfAbsent(Object,Function)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'BBBB'"
        },
        {
          "type": "CtParameter",
          "value": "java.lang.String key2"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '42'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "computeIfAbsent",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1689685136,
    "ID": "apache/rocketmq:0",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.consumer.ReceiveMessageActivityTest.testReceiveMessage()",
    "bSource": {
      "startLine": 227,
      "code": "@Test\n    public void testReceiveMessage() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder().getDefaultInstanceForType());\n\n        PopResult popResult = new PopResult(PopStatus.NO_NEW_MSG, new ArrayList<>());\n        when(this.messagingProcessor.popMessage(\n            any(),\n            any(),\n            anyString(),\n            anyString(),\n            anyInt(),\n            anyLong(),\n            anyLong(),\n            anyInt(),\n            any(),\n            anyBoolean(),\n            any(),\n            anyString(),\n            anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));\n\n        this.receiveMessageActivity.receiveMessage(\n            createContext(),\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n    }"
    },
    "aSource": {
      "startLine": 227,
      "code": "@Test\n    public void testReceiveMessage() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder().getDefaultInstanceForType());\n\n        PopResult popResult = new PopResult(PopStatus.NO_NEW_MSG, new ArrayList<>());\n        when(this.messagingProcessor.popMessage(\n            any(),\n            any(),\n            anyString(),\n            anyString(),\n            anyInt(),\n            anyLong(),\n            anyLong(),\n            anyInt(),\n            any(),\n            anyBoolean(),\n            any(),\n            isNull(),\n            anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));\n\n        this.receiveMessageActivity.receiveMessage(\n            createContext(),\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
    "bCommit": "49ccdc9d2",
    "aCommit": "15c6889bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "anyString(),",
          "type": "DELETE",
          "lineNo": 248
        }
      ],
      "targetChanges": [
        {
          "line": "isNull(),",
          "type": "ADD",
          "lineNo": 248
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyString",
          "childCount": 0
        },
        "dstNode": {
          "label": "isNull",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        251,
        264
      ]
    },
    "aCommitTime": 1689066240,
    "ID": "apache/rocketmq:5",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.consumer.ReceiveMessageActivityTest.testReceiveMessagePollingTime()",
    "bSource": {
      "startLine": 81,
      "code": "@Test\n    public void testReceiveMessagePollingTime() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        ArgumentCaptor<Long> pollTimeCaptor = ArgumentCaptor.forClass(Long.class);\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder()\n            .setRequestTimeout(Durations.fromSeconds(3))\n            .build());\n        when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),\n            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyString(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));\n\n\n        ProxyContext context = createContext();\n        context.setRemainingMs(1L);\n        this.receiveMessageActivity.receiveMessage(\n            context,\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n        assertEquals(0L, pollTimeCaptor.getValue().longValue());\n    }"
    },
    "aSource": {
      "startLine": 82,
      "code": "@Test\n    public void testReceiveMessagePollingTime() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        ArgumentCaptor<Long> pollTimeCaptor = ArgumentCaptor.forClass(Long.class);\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder()\n            .setRequestTimeout(Durations.fromSeconds(3))\n            .build());\n        when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),\n            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), isNull(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));\n\n\n        ProxyContext context = createContext();\n        context.setRemainingMs(1L);\n        this.receiveMessageActivity.receiveMessage(\n            context,\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n        assertEquals(0L, pollTimeCaptor.getValue().longValue());\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
    "bCommit": "49ccdc9d2",
    "aCommit": "15c6889bb",
    "hunk": {
      "sourceChanges": [
        {
          "line": "pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyString(), anyLong()))",
          "type": "DELETE",
          "lineNo": 92
        }
      ],
      "targetChanges": [
        {
          "line": "pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), isNull(), anyLong()))",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor pollTimeCaptor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyBoolean()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyBoolean()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyLong()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyLong()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "capture()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor pollTimeCaptor"
        },
        {
          "type": "CtExecutableReference",
          "value": "capture()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyBoolean()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyBoolean()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "isNull()"
        },
        {
          "type": "CtExecutableReference",
          "value": "isNull()"
        },
        {
          "type": "CtInvocation",
          "value": "anyLong()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyLong()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyString",
          "childCount": 0
        },
        "dstNode": {
          "label": "isNull",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        99,
        113
      ]
    },
    "aCommitTime": 1689066240,
    "ID": "apache/rocketmq:6",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.service.message.ClusterMessageServiceTest.testAckMessageByInvalidBrokerNameHandle()",
    "bSource": {
      "startLine": 51,
      "code": "@Test\n    public void testAckMessageByInvalidBrokerNameHandle() throws Exception {\n        when(topicRouteService.getBrokerAddr(anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));\n        try {\n            this.clusterMessageService.ackMessage(\n                ProxyContext.create(),\n                ReceiptHandle.builder()\n                    .startOffset(0L)\n                    .retrieveTime(System.currentTimeMillis())\n                    .invisibleTime(3000)\n                    .reviveQueueId(1)\n                    .topicType(ReceiptHandle.NORMAL_TOPIC)\n                    .brokerName(\"notExistBroker\")\n                    .queueId(0)\n                    .offset(123)\n                    .commitLogOffset(0L)\n                    .build(),\n                MessageClientIDSetter.createUniqID(),\n                new AckMessageRequestHeader(),\n                3000);\n            fail();\n        } catch (Exception e) {\n            assertTrue(e instanceof ProxyException);\n            ProxyException proxyException = (ProxyException) e;\n            assertEquals(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, proxyException.getCode());\n        }\n    }"
    },
    "aSource": {
      "startLine": 52,
      "code": "@Test\n    public void testAckMessageByInvalidBrokerNameHandle() throws Exception {\n        when(topicRouteService.getBrokerAddr(any(), anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));\n        try {\n            this.clusterMessageService.ackMessage(\n                ProxyContext.create(),\n                ReceiptHandle.builder()\n                    .startOffset(0L)\n                    .retrieveTime(System.currentTimeMillis())\n                    .invisibleTime(3000)\n                    .reviveQueueId(1)\n                    .topicType(ReceiptHandle.NORMAL_TOPIC)\n                    .brokerName(\"notExistBroker\")\n                    .queueId(0)\n                    .offset(123)\n                    .commitLogOffset(0L)\n                    .build(),\n                MessageClientIDSetter.createUniqID(),\n                new AckMessageRequestHeader(),\n                3000);\n            fail();\n        } catch (Exception e) {\n            assertTrue(e instanceof ProxyException);\n            ProxyException proxyException = (ProxyException) e;\n            assertEquals(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, proxyException.getCode());\n        }\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java",
    "bCommit": "bee5077bc",
    "aCommit": "a325d144b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(topicRouteService.getBrokerAddr(anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));",
          "type": "DELETE",
          "lineNo": 53
        }
      ],
      "targetChanges": [
        {
          "line": "when(topicRouteService.getBrokerAddr(any(), anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));",
          "type": "ADD",
          "lineNo": 54
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(org.apache.rocketmq.client.exception.MQClientException)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService.getBrokerAddr(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService topicRouteService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService.getBrokerAddr(String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenThrow(org.apache.rocketmq.client.exception.MQClientException)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.rocketmq.client.exception.MQClientException.MQClientException(int,String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.rocketmq.client.exception.MQClientException"
        },
        {
          "type": "CtFieldRead",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(org.apache.rocketmq.client.exception.MQClientException)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService.getBrokerAddr(ProxyContext,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService topicRouteService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.service.route.TopicRouteService.getBrokerAddr(ProxyContext,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenThrow(org.apache.rocketmq.client.exception.MQClientException)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.rocketmq.client.exception.MQClientException.MQClientException(int,String)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.rocketmq.client.exception.MQClientException"
        },
        {
          "type": "CtFieldRead",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.remoting.protocol.ResponseCode"
        },
        {
          "type": "CtFieldReference",
          "value": "int TOPIC_NOT_EXIST"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        54
      ]
    },
    "aCommitTime": 1686042426,
    "ID": "apache/rocketmq:9",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.producer.ForwardMessageToDLQActivityTest.testForwardMessageToDeadLetterQueueWhenHasMappingHandle()",
    "bSource": {
      "startLine": 71,
      "code": "@Test\n    public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Throwable {\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString()))\n            .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, \"\")));\n\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(\n            createContext(),\n            ForwardMessageToDeadLetterQueueRequest.newBuilder()\n                .setTopic(Resource.newBuilder().setName(\"topic\").build())\n                .setGroup(Resource.newBuilder().setName(\"group\").build())\n                .setMessageId(MessageClientIDSetter.createUniqID())\n                .setReceiptHandle(buildReceiptHandle(\"topic\", System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n    }"
    },
    "aSource": {
      "startLine": 71,
      "code": "@Test\n    public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Throwable {\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString()))\n            .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, \"\")));\n\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(\n            createContext(),\n            ForwardMessageToDeadLetterQueueRequest.newBuilder()\n                .setTopic(Resource.newBuilder().setName(\"topic\").build())\n                .setGroup(Resource.newBuilder().setName(\"group\").build())\n                .setMessageId(MessageClientIDSetter.createUniqID())\n                .setReceiptHandle(buildReceiptHandle(\"topic\", System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java",
    "bCommit": "bee5077bc",
    "aCommit": "a325d144b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))",
          "type": "DELETE",
          "lineNo": 78
        }
      ],
      "targetChanges": [
        {
          "line": "when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))",
          "type": "ADD",
          "lineNo": 78
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.proxy.common.MessageReceiptHandle)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor receiptHandleProcessor"
        },
        {
          "type": "CtExecutableReference",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.proxy.common.MessageReceiptHandle)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.common.ProxyContext,org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor receiptHandleProcessor"
        },
        {
          "type": "CtExecutableReference",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.common.ProxyContext,org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        78
      ]
    },
    "aCommitTime": 1686042426,
    "ID": "apache/rocketmq:10",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.consumer.ChangeInvisibleDurationActivityTest.testChangeInvisibleDurationActivityWhenHasMappingHandle()",
    "bSource": {
      "startLine": 83,
      "code": "@Test\n    public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Throwable {\n        String newHandle = \"newHandle\";\n        ArgumentCaptor<Long> invisibleTimeArgumentCaptor = ArgumentCaptor.forClass(Long.class);\n        AckResult ackResult = new AckResult();\n        ackResult.setExtraInfo(newHandle);\n        ackResult.setStatus(AckStatus.OK);\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.changeInvisibleTime(\n            any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()\n        )).thenReturn(CompletableFuture.completedFuture(ackResult));\n        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(\n            createContext(),\n            ChangeInvisibleDurationRequest.newBuilder()\n                .setInvisibleDuration(Durations.fromSeconds(3))\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageId(\"msgId\")\n                .setReceiptHandle(buildReceiptHandle(TOPIC, System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(TimeUnit.SECONDS.toMillis(3), invisibleTimeArgumentCaptor.getValue().longValue());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n        assertEquals(newHandle, response.getReceiptHandle());\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Throwable {\n        String newHandle = \"newHandle\";\n        ArgumentCaptor<Long> invisibleTimeArgumentCaptor = ArgumentCaptor.forClass(Long.class);\n        AckResult ackResult = new AckResult();\n        ackResult.setExtraInfo(newHandle);\n        ackResult.setStatus(AckStatus.OK);\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.changeInvisibleTime(\n            any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()\n        )).thenReturn(CompletableFuture.completedFuture(ackResult));\n        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(\n            createContext(),\n            ChangeInvisibleDurationRequest.newBuilder()\n                .setInvisibleDuration(Durations.fromSeconds(3))\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageId(\"msgId\")\n                .setReceiptHandle(buildReceiptHandle(TOPIC, System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(TimeUnit.SECONDS.toMillis(3), invisibleTimeArgumentCaptor.getValue().longValue());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n        assertEquals(newHandle, response.getReceiptHandle());\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java",
    "bCommit": "bee5077bc",
    "aCommit": "a325d144b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))",
          "type": "DELETE",
          "lineNo": 95
        }
      ],
      "targetChanges": [
        {
          "line": "when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))",
          "type": "ADD",
          "lineNo": 95
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.proxy.common.MessageReceiptHandle)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor receiptHandleProcessor"
        },
        {
          "type": "CtExecutableReference",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.proxy.common.MessageReceiptHandle)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.common.ProxyContext,org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.proxy.processor.ReceiptHandleProcessor receiptHandleProcessor"
        },
        {
          "type": "CtExecutableReference",
          "value": "removeReceiptHandle(org.apache.rocketmq.proxy.common.ProxyContext,org.apache.rocketmq.proxy.processor.Channel,java.lang.String,java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        95
      ]
    },
    "aCommitTime": 1686042426,
    "ID": "apache/rocketmq:11",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.grpc.v2.route.RouteActivityTest.testQueryRoute()",
    "bSource": {
      "startLine": 96,
      "code": "@Test\n    public void testQueryRoute() throws Throwable {\n        ConfigurationManager.getProxyConfig().setGrpcServerPort(8080);\n        ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);\n        when(this.messagingProcessor.getTopicRouteDataForProxy(any(), addressListCaptor.capture(), anyString()))\n            .thenReturn(createProxyTopicRouteData(2, 2, 6));\n        MetadataService metadataService = Mockito.mock(LocalMetadataService.class);\n        when(this.messagingProcessor.getMetadataService()).thenReturn(metadataService);\n        when(metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.NORMAL);\n\n        QueryRouteResponse response = this.routeActivity.queryRoute(\n            createContext(),\n            QueryRouteRequest.newBuilder()\n                .setEndpoints(grpcEndpoints)\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(4, response.getMessageQueuesCount());\n        for (MessageQueue messageQueue : response.getMessageQueuesList()) {\n            assertEquals(grpcEndpoints, messageQueue.getBroker().getEndpoints());\n            assertEquals(Permission.READ_WRITE, messageQueue.getPermission());\n        }\n    }"
    },
    "aSource": {
      "startLine": 96,
      "code": "@Test\n    public void testQueryRoute() throws Throwable {\n        ConfigurationManager.getProxyConfig().setGrpcServerPort(8080);\n        ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);\n        when(this.messagingProcessor.getTopicRouteDataForProxy(any(), addressListCaptor.capture(), anyString()))\n            .thenReturn(createProxyTopicRouteData(2, 2, 6));\n        MetadataService metadataService = Mockito.mock(LocalMetadataService.class);\n        when(this.messagingProcessor.getMetadataService()).thenReturn(metadataService);\n        when(metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.NORMAL);\n\n        QueryRouteResponse response = this.routeActivity.queryRoute(\n            createContext(),\n            QueryRouteRequest.newBuilder()\n                .setEndpoints(grpcEndpoints)\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(4, response.getMessageQueuesCount());\n        for (MessageQueue messageQueue : response.getMessageQueuesList()) {\n            assertEquals(grpcEndpoints, messageQueue.getBroker().getEndpoints());\n            assertEquals(Permission.READ_WRITE, messageQueue.getPermission());\n        }\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
    "bCommit": "bee5077bc",
    "aCommit": "a325d144b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.NORMAL);",
          "type": "DELETE",
          "lineNo": 104
        }
      ],
      "targetChanges": [
        {
          "line": "when(metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.NORMAL);",
          "type": "ADD",
          "lineNo": 104
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.common.attribute.TopicMessageType)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService.getTopicMessageType(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService metadataService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService.getTopicMessageType(String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.apache.rocketmq.common.attribute.TopicMessageType)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType NORMAL"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType NORMAL"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.rocketmq.common.attribute.TopicMessageType)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService.getTopicMessageType(ProxyContext,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService metadataService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.proxy.service.metadata.MetadataService.getTopicMessageType(ProxyContext,String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.apache.rocketmq.common.attribute.TopicMessageType)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType NORMAL"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.rocketmq.common.attribute.TopicMessageType NORMAL"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        104
      ]
    },
    "aCommitTime": 1686042426,
    "ID": "apache/rocketmq:12",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.proxy.processor.ProducerProcessorTest.testSendRetryMessage()",
    "bSource": {
      "startLine": 124,
      "code": "@Test\n    public void testSendRetryMessage() throws Throwable {\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageExtList = new ArrayList<>();\n        Message messageExt = createMessageExt(MixAll.getRetryTopic(CONSUMER_GROUP), \"tag\", 0, 0);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_RECONSUME_TIME, \"1\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_MAX_RECONSUME_TIMES, \"16\");\n        messageExtList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageExtList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(MixAll.getRetryTopic(CONSUMER_GROUP), requestHeader.getTopic());\n        assertEquals(1, requestHeader.getReconsumeTimes().intValue());\n        assertEquals(16, requestHeader.getMaxReconsumeTimes().intValue());\n    }"
    },
    "aSource": {
      "startLine": 125,
      "code": "@Test\n    public void testSendRetryMessage() throws Throwable {\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageExtList = new ArrayList<>();\n        Message messageExt = createMessageExt(MixAll.getRetryTopic(CONSUMER_GROUP), \"tag\", 0, 0);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_RECONSUME_TIME, \"1\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_MAX_RECONSUME_TIMES, \"16\");\n        messageExtList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            any(),\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageExtList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(MixAll.getRetryTopic(CONSUMER_GROUP), requestHeader.getTopic());\n        assertEquals(1, requestHeader.getReconsumeTimes().intValue());\n        assertEquals(16, requestHeader.getMaxReconsumeTimes().intValue());\n    }"
    },
    "bPath": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java",
    "aPath": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java",
    "bCommit": "bee5077bc",
    "aCommit": "a325d144b",
    "hunk": {
      "targetChanges": [
        {
          "line": "any(),",
          "type": "ADD",
          "lineNo": 154
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        153
      ]
    },
    "aCommitTime": 1686042426,
    "ID": "apache/rocketmq:13",
    "trivial": null
  },
  {
    "name": "org.apache.rocketmq.tools.command.broker.BrokerStatusSubCommandTest.testExecute()",
    "bSource": {
      "startLine": 38,
      "code": "@Test\n    public void testExecute() throws SubCommandException {\n        BrokerStatusSubCommand cmd = new BrokerStatusSubCommand();\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort(), \"-c default-cluster\"};\n        final CommandLine commandLine =\n            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs,\n                cmd.buildCommandlineOptions(options), new DefaultParser());\n\n        cmd.execute(commandLine, options, null);\n    }"
    },
    "aSource": {
      "startLine": 38,
      "code": "@Test\n    public void testExecute() throws SubCommandException {\n        BrokerStatusSubCommand cmd = new BrokerStatusSubCommand();\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort()};\n        final CommandLine commandLine =\n            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs,\n                cmd.buildCommandlineOptions(options), new DefaultParser());\n\n        cmd.execute(commandLine, options, null);\n    }"
    },
    "bPath": "tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommandTest.java",
    "aPath": "tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommandTest.java",
    "bCommit": "0533816d4",
    "aCommit": "589433291",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort(), \"-c default-cluster\"};",
          "type": "DELETE",
          "lineNo": 42
        }
      ],
      "targetChanges": [
        {
          "line": "String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort()};",
          "type": "ADD",
          "lineNo": 42
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "String[] subargs"
        },
        {
          "type": "CtArrayTypeReference",
          "value": "String[]"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '-b 127.0.0.1:'"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.tools.command.server.ServerResponseMocker.listenPort()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.tools.command.server.ServerResponseMocker.listenPort()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '-c default-cluster'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "String[] subargs"
        },
        {
          "type": "CtArrayTypeReference",
          "value": "String[]"
        },
        {
          "type": "CtNewArray",
          "value": "String[]"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '-b 127.0.0.1:'"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.rocketmq.tools.command.server.ServerResponseMocker.listenPort()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.rocketmq.tools.command.server.ServerResponseMocker.listenPort()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "NewArray",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"-c default-cluster\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1673333343,
    "ID": "apache/rocketmq:1",
    "trivial": null
  }
]