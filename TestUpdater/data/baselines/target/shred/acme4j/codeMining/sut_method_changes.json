[
  {
    "bCommit": "09a72d6",
    "aCommit": "01a2206",
    "changes": [
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
        "name": "org.shredzone.acme4j.AccountBuilder.addEmail(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "addContact(\"mailto:\" + email);",
                "type": "DELETE",
                "lineNo": 108
              }
            ],
            "targetChanges": [
              {
                "line": "if (email.startsWith(\"mailto:\")) {",
                "type": "ADD",
                "lineNo": 108
              },
              {
                "line": "addContact(email);",
                "type": "ADD",
                "lineNo": 109
              },
              {
                "line": "} else {",
                "type": "ADD",
                "lineNo": 110
              },
              {
                "line": "addContact(\"mailto:\" + email);",
                "type": "ADD",
                "lineNo": 111
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 112
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'mailto:'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String email"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.lang.String.startsWith(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String email"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.startsWith(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'mailto:'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String email"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AccountBuilder.addContact(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'mailto:'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String email"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest.testEmailAddresses()",
        "hunks": [
          {
            "targetChanges": [
              {
                "line": "// mailto is still accepted if present",
                "type": "ADD",
                "lineNo": 208
              },
              {
                "line": "builder.addEmail(\"mailto:bar@example.com\");",
                "type": "ADD",
                "lineNo": 209
              },
              {
                "line": "Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));",
                "type": "ADD",
                "lineNo": 210
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "addEmail(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "var builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "addEmail(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'mailto:bar@example.com'"
              },
              {
                "type": "CtInvocation",
                "value": "addContact()"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.mockito.Mockito"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "addContact()"
              },
              {
                "type": "CtInvocation",
                "value": "eq(java.lang.String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.mockito.Mockito"
              },
              {
                "type": "CtExecutableReference",
                "value": "eq(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'mailto:bar@example.com'"
              }
            ]
          }
        ],
        "is_test_source": true
      }
    ]
  },
  {
    "bCommit": "c26d6b1",
    "aCommit": "c08c85b",
    "changes": [
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()",
        "hunks": [
          {
            "targetChanges": [
              {
                "line": "* @throws IllegalStateException",
                "type": "ADD",
                "lineNo": 136
              },
              {
                "line": "*         if the order is not ready yet. You must finalize the order first, and wait",
                "type": "ADD",
                "lineNo": 137
              },
              {
                "line": "*         for the status to become {@link Status#VALID}. It is also thrown if the",
                "type": "ADD",
                "lineNo": 138
              },
              {
                "line": "*         order has been {@link Status#CANCELED}.",
                "type": "ADD",
                "lineNo": 139
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "public Optional<Certificate> getAutoRenewalCertificate() {",
                "type": "DELETE",
                "lineNo": 136
              }
            ],
            "targetChanges": [
              {
                "line": "public Certificate getAutoRenewalCertificate() {",
                "type": "ADD",
                "lineNo": 141
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asURL)",
                "type": "DELETE",
                "lineNo": 138
              },
              {
                "line": ".map(getLogin()::bindCertificate);",
                "type": "DELETE",
                "lineNo": 139
              }
            ],
            "targetChanges": [
              {
                "line": ".optional()",
                "type": "ADD",
                "lineNo": 143
              },
              {
                "line": ".map(Value::asURL)",
                "type": "ADD",
                "lineNo": 144
              },
              {
                "line": ".map(getLogin()::bindCertificate)",
                "type": "ADD",
                "lineNo": 145
              },
              {
                "line": ".orElseThrow(() -> new IllegalStateException(\"Order is in an invalid state\"));",
                "type": "ADD",
                "lineNo": 146
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.lang.IllegalStateException.IllegalStateException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.IllegalStateException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Order is in an invalid state'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testFinalize()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate()).isEmpty();",
                "type": "DELETE",
                "lineNo": 221
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThatIllegalStateException()",
                "type": "ADD",
                "lineNo": 221
              },
              {
                "line": ".isThrownBy(order::getAutoRenewalCertificate);",
                "type": "ADD",
                "lineNo": 222
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isThrownBy()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThatIllegalStateException()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThatIllegalStateException()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isThrownBy()"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testAutoRenewFinalize()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())",
                "type": "DELETE",
                "lineNo": 313
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate().getLocation())",
                "type": "ADD",
                "lineNo": 314
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          }
        ],
        "is_test_source": true
      }
    ]
  },
  {
    "bCommit": "d629611",
    "aCommit": "783fdde",
    "changes": [
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Session.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Session.java",
        "name": "org.shredzone.acme4j.Session.connect()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "return provider.connect(getServerUri());",
                "type": "DELETE",
                "lineNo": 190
              }
            ],
            "targetChanges": [
              {
                "line": "return provider.connect(getServerUri(), networkSettings);",
                "type": "ADD",
                "lineNo": 189
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.DefaultConnection(HttpConnector)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            {@link HttpConnector} to be used for HTTP connections",
                "type": "DELETE",
                "lineNo": 97
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link HttpConnector} to be used for HTTP connections",
                "type": "ADD",
                "lineNo": 108
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "targetChanges": [
              {
                "line": "this.httpClient = httpConnector.createClientBuilder().build();",
                "type": "ADD",
                "lineNo": 112
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.http.HttpClient httpClient"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.build()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector httpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.build()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.resetNonce(Session)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "conn = httpConnector.openConnection(newNonceUrl, session.networkSettings());",
                "type": "DELETE",
                "lineNo": 114
              },
              {
                "line": "conn.setRequestMethod(\"HEAD\");",
                "type": "DELETE",
                "lineNo": 115
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());",
                "type": "DELETE",
                "lineNo": 116
              },
              {
                "line": "conn.connect();",
                "type": "DELETE",
                "lineNo": 117
              }
            ],
            "targetChanges": [
              {
                "line": "sendRequest(session, newNonceUrl, b ->",
                "type": "ADD",
                "lineNo": 126
              },
              {
                "line": "b.method(\"HEAD\", HttpRequest.BodyPublishers.noBody()));",
                "type": "ADD",
                "lineNo": 127
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector httpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL newNonceUrl"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HEAD'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_LANGUAGE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.connect()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL newNonceUrl"
              },
              {
                "type": "CtParameter",
                "value": "java.net.http.HttpRequest$Builder b"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.method(String,BodyPublisher)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder b"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.method(String,BodyPublisher)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HEAD'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$BodyPublishers.noBody()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpRequest$BodyPublishers"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$BodyPublishers.noBody()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var rc = conn.getResponseCode();",
                "type": "DELETE",
                "lineNo": 121
              },
              {
                "line": "if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_NO_CONTENT) {",
                "type": "DELETE",
                "lineNo": 122
              }
            ],
            "targetChanges": [
              {
                "line": "var rc = getResponse().statusCode();",
                "type": "ADD",
                "lineNo": 131
              },
              {
                "line": "if (rc != HTTP_OK && rc != HTTP_NO_CONTENT) {",
                "type": "ADD",
                "lineNo": 132
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NO_CONTENT"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_NO_CONTENT"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NO_CONTENT"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "conn = null;",
                "type": "DELETE",
                "lineNo": 134
              }
            ],
            "targetChanges": [
              {
                "line": "close();",
                "type": "ADD",
                "lineNo": 144
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.close()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.close()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,ZonedDateTime)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "return sendRequest(url, session, MIME_JSON, ifModifiedSince);",
                "type": "DELETE",
                "lineNo": 141
              }
            ],
            "targetChanges": [
              {
                "line": "Objects.requireNonNull(url, \"url\");",
                "type": "ADD",
                "lineNo": 151
              },
              {
                "line": "Objects.requireNonNull(session, \"session\");",
                "type": "ADD",
                "lineNo": 152
              },
              {
                "line": "assertConnectionIsClosed();",
                "type": "ADD",
                "lineNo": 153
              },
              {
                "line": "LOG.debug(\"GET {}\", url);",
                "type": "ADD",
                "lineNo": 155
              },
              {
                "line": "try {",
                "type": "ADD",
                "lineNo": 157
              },
              {
                "line": "sendRequest(session, url, builder -> {",
                "type": "ADD",
                "lineNo": 158
              },
              {
                "line": "builder.GET();",
                "type": "ADD",
                "lineNo": 159
              },
              {
                "line": "builder.header(ACCEPT_HEADER, MIME_JSON);",
                "type": "ADD",
                "lineNo": 160
              },
              {
                "line": "if (ifModifiedSince != null) {",
                "type": "ADD",
                "lineNo": 161
              },
              {
                "line": "builder.header(IF_MODIFIED_SINCE_HEADER, ifModifiedSince.format(RFC_1123_DATE_TIME));",
                "type": "ADD",
                "lineNo": 162
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 163
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 164
              },
              {
                "line": "logHeaders();",
                "type": "ADD",
                "lineNo": 166
              },
              {
                "line": "var nonce = getNonce();",
                "type": "ADD",
                "lineNo": 168
              },
              {
                "line": "if (nonce != null) {",
                "type": "ADD",
                "lineNo": 169
              },
              {
                "line": "session.setNonce(nonce);",
                "type": "ADD",
                "lineNo": 170
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 171
              },
              {
                "line": "var rc = getResponse().statusCode();",
                "type": "ADD",
                "lineNo": 173
              },
              {
                "line": "if (rc != HTTP_OK && rc != HTTP_CREATED && (rc != HTTP_NOT_MODIFIED || ifModifiedSince == null)) {",
                "type": "ADD",
                "lineNo": 174
              },
              {
                "line": "throwAcmeException();",
                "type": "ADD",
                "lineNo": 175
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 176
              },
              {
                "line": "return rc;",
                "type": "ADD",
                "lineNo": 177
              },
              {
                "line": "} catch (IOException ex) {",
                "type": "ADD",
                "lineNo": 178
              },
              {
                "line": "throw new AcmeNetworkException(ex);",
                "type": "ADD",
                "lineNo": 179
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 180
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,String,ZonedDateTime)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,String,ZonedDateTime)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'url'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'session'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed()"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'GET {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtParameter",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.GET()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.GET()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_HEADER"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String IF_MODIFIED_SINCE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.format(DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.format(DateTimeFormatter)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_CREATED"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NOT_MODIFIED"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.io.IOException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException.AcmeNetworkException(IOException)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException.AcmeNetworkException(IOException)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException"
              },
              {
                "type": "CtVariableRead",
                "value": "java.io.IOException ex"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 170
              }
            ],
            "targetChanges": [
              {
                "line": "expectContentType(Set.of(MIME_JSON, MIME_JSON_PROBLEM));",
                "type": "ADD",
                "lineNo": 209
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.expectContentType(Set)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.expectContentType(Set)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Set.of(Object,Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Set"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Set.of(Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON_PROBLEM"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "if (conn.getContentLength() == 0) {",
                "type": "DELETE",
                "lineNo": 172
              },
              {
                "line": "throw new AcmeProtocolException(\"Empty response\");",
                "type": "DELETE",
                "lineNo": 173
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 174
              },
              {
                "line": "var contentType = AcmeUtils.getContentType(conn.getHeaderField(CONTENT_TYPE_HEADER));",
                "type": "DELETE",
                "lineNo": 176
              },
              {
                "line": "if (!(MIME_JSON.equals(contentType) || MIME_JSON_PROBLEM.equals(contentType))) {",
                "type": "DELETE",
                "lineNo": 177
              },
              {
                "line": "throw new AcmeProtocolException(\"Unexpected content type: \" + contentType);",
                "type": "DELETE",
                "lineNo": 178
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 179
              },
              {
                "line": "try {",
                "type": "DELETE",
                "lineNo": 181
              },
              {
                "line": "var in = conn.getResponseCode() < 400 ? conn.getInputStream() : conn.getErrorStream();",
                "type": "DELETE",
                "lineNo": 182
              }
            ],
            "targetChanges": [
              {
                "line": "try (var in = getResponse().body()) {",
                "type": "ADD",
                "lineNo": 211
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getContentLength()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getContentLength()"
              },
              {
                "type": "CtLiteral",
                "value": "int '0'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Empty response'"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON_PROBLEM"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Unexpected content type: '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.io.InputStream in"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.InputStream"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtLiteral",
                "value": "int '400'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getInputStream()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getInputStream()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getErrorStream()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getErrorStream()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.io.InputStream in"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.InputStream"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.body()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.body()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.readCertificates()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 197
              }
            ],
            "targetChanges": [
              {
                "line": "expectContentType(Set.of(MIME_CERTIFICATE_CHAIN));",
                "type": "ADD",
                "lineNo": 226
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.expectContentType(Set)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.expectContentType(Set)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Set.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Set"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Set.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_CERTIFICATE_CHAIN"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var contentType = AcmeUtils.getContentType(conn.getHeaderField(CONTENT_TYPE_HEADER));",
                "type": "DELETE",
                "lineNo": 199
              },
              {
                "line": "if (!(MIME_CERTIFICATE_CHAIN.equals(contentType))) {",
                "type": "DELETE",
                "lineNo": 200
              },
              {
                "line": "throw new AcmeProtocolException(\"Unexpected content type: \" + contentType);",
                "type": "DELETE",
                "lineNo": 201
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 202
              }
            ],
            "targetChanges": [
              {
                "line": "try (var in = getResponse().body()) {",
                "type": "ADD",
                "lineNo": 228
              },
              {
                "line": "if (in == null) {",
                "type": "ADD",
                "lineNo": 229
              },
              {
                "line": "throw new AcmeProtocolException(\"Certificate response is empty\");",
                "type": "ADD",
                "lineNo": 230
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 231
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_CERTIFICATE_CHAIN"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Unexpected content type: '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.io.InputStream in"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.InputStream"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.body()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.body()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.io.InputStream in"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Certificate response is empty'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "try (var in = new TrimmingInputStream(conn.getInputStream())) {",
                "type": "DELETE",
                "lineNo": 204
              },
              {
                "line": "var cf = CertificateFactory.getInstance(\"X.509\");",
                "type": "DELETE",
                "lineNo": 205
              },
              {
                "line": "return cf.generateCertificates(in).stream()",
                "type": "DELETE",
                "lineNo": 206
              },
              {
                "line": ".map(c -> (X509Certificate) c)",
                "type": "DELETE",
                "lineNo": 207
              },
              {
                "line": ".collect(toList());",
                "type": "DELETE",
                "lineNo": 208
              }
            ],
            "targetChanges": [
              {
                "line": "try (var ins = new TrimmingInputStream(in)) {",
                "type": "ADD",
                "lineNo": 233
              },
              {
                "line": "var cf = CertificateFactory.getInstance(\"X.509\");",
                "type": "ADD",
                "lineNo": 234
              },
              {
                "line": "return cf.generateCertificates(ins).stream()",
                "type": "ADD",
                "lineNo": 235
              },
              {
                "line": ".map(X509Certificate.class::cast)",
                "type": "ADD",
                "lineNo": 236
              },
              {
                "line": ".collect(toUnmodifiableList());",
                "type": "ADD",
                "lineNo": 237
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 238
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream in"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream.TrimmingInputStream(InputStream)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getInputStream()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getInputStream()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.CertificateFactory cf"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.CertificateFactory"
              },
              {
                "type": "CtInvocation",
                "value": "java.security.cert.CertificateFactory.getInstance(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.security.cert.CertificateFactory"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.security.cert.CertificateFactory.getInstance(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'X.509'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtInvocation",
                "value": "java.security.cert.CertificateFactory.generateCertificates(InputStream)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.security.cert.CertificateFactory cf"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.security.cert.CertificateFactory.generateCertificates(InputStream)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream in"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "null c"
              },
              {
                "type": "CtVariableRead",
                "value": "null c"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.X509Certificate"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Collectors.toList()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Collectors.toList()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream ins"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream.TrimmingInputStream(InputStream)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream"
              },
              {
                "type": "CtVariableRead",
                "value": "java.io.InputStream in"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.CertificateFactory cf"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.CertificateFactory"
              },
              {
                "type": "CtInvocation",
                "value": "java.security.cert.CertificateFactory.getInstance(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.security.cert.CertificateFactory"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.security.cert.CertificateFactory.getInstance(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'X.509'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtInvocation",
                "value": "java.security.cert.CertificateFactory.generateCertificates(InputStream)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.security.cert.CertificateFactory cf"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.security.cert.CertificateFactory.generateCertificates(InputStream)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.TrimmingInputStream ins"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.lang.Class.cast(Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Class.cast(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.handleRetryAfter(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 218
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 229
              },
              {
                "line": "var nonceHeader = conn.getHeaderField(REPLAY_NONCE_HEADER);",
                "type": "DELETE",
                "lineNo": 231
              },
              {
                "line": "if (nonceHeader == null || nonceHeader.trim().isEmpty()) {",
                "type": "DELETE",
                "lineNo": 232
              }
            ],
            "targetChanges": [
              {
                "line": "var nonceHeaderOpt = getResponse().headers()",
                "type": "ADD",
                "lineNo": 257
              },
              {
                "line": ".firstValue(REPLAY_NONCE_HEADER)",
                "type": "ADD",
                "lineNo": 258
              },
              {
                "line": ".map(String::trim)",
                "type": "ADD",
                "lineNo": 259
              },
              {
                "line": ".filter(not(String::isEmpty));",
                "type": "ADD",
                "lineNo": 260
              },
              {
                "line": "if (nonceHeaderOpt.isEmpty()) {",
                "type": "ADD",
                "lineNo": 261
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String REPLAY_NONCE_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.trim()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.trim()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.isEmpty()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String REPLAY_NONCE_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.lang.String.trim()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.trim()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.String"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.function.Predicate.not(Predicate)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.function.Predicate.not(Predicate)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.lang.String.isEmpty()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.isEmpty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              }
            ]
          },
          {
            "targetChanges": [
              {
                "line": "var nonceHeader = nonceHeaderOpt.get();",
                "type": "ADD",
                "lineNo": 265
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 248
              },
              {
                "line": "var location = conn.getHeaderField(LOCATION_HEADER);",
                "type": "DELETE",
                "lineNo": 250
              },
              {
                "line": "if (location == null) {",
                "type": "DELETE",
                "lineNo": 251
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 252
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 253
              },
              {
                "line": "LOG.debug(\"Location: {}\", location);",
                "type": "DELETE",
                "lineNo": 255
              },
              {
                "line": "return resolveRelative(location);",
                "type": "DELETE",
                "lineNo": 256
              }
            ],
            "targetChanges": [
              {
                "line": "return getResponse().headers()",
                "type": "ADD",
                "lineNo": 278
              },
              {
                "line": ".firstValue(LOCATION_HEADER)",
                "type": "ADD",
                "lineNo": 279
              },
              {
                "line": ".map(l -> {",
                "type": "ADD",
                "lineNo": 280
              },
              {
                "line": "LOG.debug(\"Location: {}\", l);",
                "type": "ADD",
                "lineNo": 281
              },
              {
                "line": "return l;",
                "type": "ADD",
                "lineNo": 282
              },
              {
                "line": "})",
                "type": "ADD",
                "lineNo": 283
              },
              {
                "line": ".map(this::resolveRelative)",
                "type": "ADD",
                "lineNo": 284
              },
              {
                "line": ".orElse(null);",
                "type": "ADD",
                "lineNo": 285
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String location"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LOCATION_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Location: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LOCATION_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String l"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Location: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String l"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String l"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getLastModified()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 261
              },
              {
                "line": "var header = conn.getHeaderField(LAST_MODIFIED_HEADER);",
                "type": "DELETE",
                "lineNo": 263
              },
              {
                "line": "if (header != null) {",
                "type": "DELETE",
                "lineNo": 264
              },
              {
                "line": "try {",
                "type": "DELETE",
                "lineNo": 265
              },
              {
                "line": "return Optional.of(ZonedDateTime.parse(header, RFC_1123_DATE_TIME));",
                "type": "DELETE",
                "lineNo": 266
              },
              {
                "line": "} catch (DateTimeParseException ex) {",
                "type": "DELETE",
                "lineNo": 267
              },
              {
                "line": "LOG.debug(\"Ignored invalid Last-Modified date: {}\", header, ex);",
                "type": "DELETE",
                "lineNo": 268
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 269
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 270
              },
              {
                "line": "return Optional.empty();",
                "type": "DELETE",
                "lineNo": 271
              }
            ],
            "targetChanges": [
              {
                "line": "return getResponse().headers()",
                "type": "ADD",
                "lineNo": 290
              },
              {
                "line": ".firstValue(LAST_MODIFIED_HEADER)",
                "type": "ADD",
                "lineNo": 291
              },
              {
                "line": ".map(lm -> {",
                "type": "ADD",
                "lineNo": 292
              },
              {
                "line": "try {",
                "type": "ADD",
                "lineNo": 293
              },
              {
                "line": "return ZonedDateTime.parse(lm, RFC_1123_DATE_TIME);",
                "type": "ADD",
                "lineNo": 294
              },
              {
                "line": "} catch (DateTimeParseException ex) {",
                "type": "ADD",
                "lineNo": 295
              },
              {
                "line": "LOG.debug(\"Ignored invalid Last-Modified date: {}\", lm, ex);",
                "type": "ADD",
                "lineNo": 296
              },
              {
                "line": "return null;",
                "type": "ADD",
                "lineNo": 297
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 298
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 299
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String header"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LAST_MODIFIED_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.format.DateTimeParseException"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Ignored invalid Last-Modified date: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LAST_MODIFIED_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String lm"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String lm"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.format.DateTimeParseException"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Ignored invalid Last-Modified date: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String lm"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getExpiration()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 276
              }
            ],
            "targetChanges": [
              {
                "line": "var cacheControlHeader = getResponse().headers()",
                "type": "ADD",
                "lineNo": 304
              },
              {
                "line": ".firstValue(CACHE_CONTROL_HEADER)",
                "type": "ADD",
                "lineNo": 305
              },
              {
                "line": ".filter(not(h -> NO_CACHE_PATTERN.matcher(h).matches()))",
                "type": "ADD",
                "lineNo": 306
              },
              {
                "line": ".map(MAX_AGE_PATTERN::matcher)",
                "type": "ADD",
                "lineNo": 307
              },
              {
                "line": ".filter(Matcher::matches)",
                "type": "ADD",
                "lineNo": 308
              },
              {
                "line": ".map(m -> Integer.parseInt(m.group(1)))",
                "type": "ADD",
                "lineNo": 309
              },
              {
                "line": ".filter(maxAge -> maxAge != 0)",
                "type": "ADD",
                "lineNo": 310
              },
              {
                "line": ".map(maxAge -> ZonedDateTime.now(ZoneId.of(\"UTC\")).plusSeconds(maxAge));",
                "type": "ADD",
                "lineNo": 311
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional cacheControlHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CACHE_CONTROL_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.function.Predicate.not(Predicate)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.function.Predicate.not(Predicate)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String h"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.util.regex.Pattern NO_CACHE_PATTERN"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String h"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.util.regex.Pattern MAX_AGE_PATTERN"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Matcher"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.Integer"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.Integer maxAge"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Integer maxAge"
              },
              {
                "type": "CtLiteral",
                "value": "int '0'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.Integer maxAge"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.plusSeconds(long)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.now(ZoneId)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.now(ZoneId)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZoneId.of(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZoneId"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZoneId.of(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'UTC'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.plusSeconds(long)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Integer maxAge"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var cacheHeader = conn.getHeaderField(CACHE_CONTROL_HEADER);",
                "type": "DELETE",
                "lineNo": 278
              },
              {
                "line": "if (cacheHeader != null) {",
                "type": "DELETE",
                "lineNo": 279
              },
              {
                "line": "if (NO_CACHE_PATTERN.matcher(cacheHeader).matches()) {",
                "type": "DELETE",
                "lineNo": 280
              },
              {
                "line": "return Optional.empty();",
                "type": "DELETE",
                "lineNo": 281
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 282
              },
              {
                "line": "var m = MAX_AGE_PATTERN.matcher(cacheHeader);",
                "type": "DELETE",
                "lineNo": 284
              },
              {
                "line": "if (m.matches()) {",
                "type": "DELETE",
                "lineNo": 285
              },
              {
                "line": "var maxAge = Integer.parseInt(m.group(1));",
                "type": "DELETE",
                "lineNo": 286
              },
              {
                "line": "if (maxAge == 0) {",
                "type": "DELETE",
                "lineNo": 287
              },
              {
                "line": "return Optional.empty();",
                "type": "DELETE",
                "lineNo": 288
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 289
              },
              {
                "line": "return Optional.of(ZonedDateTime.now(ZoneId.of(\"UTC\")).plusSeconds(maxAge));",
                "type": "DELETE",
                "lineNo": 291
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 292
              }
            ],
            "targetChanges": [
              {
                "line": "if (cacheControlHeader.isPresent()) {",
                "type": "ADD",
                "lineNo": 313
              },
              {
                "line": "return cacheControlHeader;",
                "type": "ADD",
                "lineNo": 314
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String cacheHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CACHE_CONTROL_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String cacheHeader"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.util.regex.Pattern NO_CACHE_PATTERN"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String cacheHeader"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.regex.Matcher"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.util.regex.Pattern MAX_AGE_PATTERN"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String cacheHeader"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtLocalVariable",
                "value": "int maxAge"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.Integer"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtVariableRead",
                "value": "int maxAge"
              },
              {
                "type": "CtLiteral",
                "value": "int '0'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.plusSeconds(long)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.now(ZoneId)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.now(ZoneId)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZoneId.of(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZoneId"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZoneId.of(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'UTC'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.plusSeconds(long)"
              },
              {
                "type": "CtVariableRead",
                "value": "int maxAge"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional cacheControlHeader"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional cacheControlHeader"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var expiresHeader = conn.getHeaderField(EXPIRES_HEADER);",
                "type": "DELETE",
                "lineNo": 295
              },
              {
                "line": "if (expiresHeader != null) {",
                "type": "DELETE",
                "lineNo": 296
              },
              {
                "line": "try {",
                "type": "DELETE",
                "lineNo": 297
              },
              {
                "line": "return Optional.of(ZonedDateTime.parse(expiresHeader, RFC_1123_DATE_TIME));",
                "type": "DELETE",
                "lineNo": 298
              },
              {
                "line": "} catch (DateTimeParseException ex) {",
                "type": "DELETE",
                "lineNo": 299
              },
              {
                "line": "LOG.debug(\"Ignored invalid Expires date: {}\", expiresHeader, ex);",
                "type": "DELETE",
                "lineNo": 300
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 301
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 302
              },
              {
                "line": "return Optional.empty();",
                "type": "DELETE",
                "lineNo": 304
              }
            ],
            "targetChanges": [
              {
                "line": "return getResponse().headers()",
                "type": "ADD",
                "lineNo": 317
              },
              {
                "line": ".firstValue(EXPIRES_HEADER)",
                "type": "ADD",
                "lineNo": 318
              },
              {
                "line": ".flatMap(header -> {",
                "type": "ADD",
                "lineNo": 319
              },
              {
                "line": "try {",
                "type": "ADD",
                "lineNo": 320
              },
              {
                "line": "return Optional.of(ZonedDateTime.parse(header, RFC_1123_DATE_TIME));",
                "type": "ADD",
                "lineNo": 321
              },
              {
                "line": "} catch (DateTimeParseException ex) {",
                "type": "ADD",
                "lineNo": 322
              },
              {
                "line": "LOG.debug(\"Ignored invalid Expires date: {}\", header, ex);",
                "type": "ADD",
                "lineNo": 323
              },
              {
                "line": "return Optional.empty();",
                "type": "ADD",
                "lineNo": 324
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 325
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 326
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String expiresHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String EXPIRES_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String expiresHeader"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String expiresHeader"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.format.DateTimeParseException"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Ignored invalid Expires date: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String expiresHeader"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.flatMap(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String EXPIRES_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.flatMap(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String header"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.parse(CharSequence,DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.format.DateTimeParseException"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Ignored invalid Expires date: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.format.DateTimeParseException ex"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getLinks(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": ".collect(toList());",
                "type": "DELETE",
                "lineNo": 311
              }
            ],
            "targetChanges": [
              {
                "line": ".collect(toUnmodifiableList());",
                "type": "ADD",
                "lineNo": 333
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Collectors.toList()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Collectors.toList()"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.close()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "conn = null;",
                "type": "DELETE",
                "lineNo": 316
              }
            ],
            "targetChanges": [
              {
                "line": "lastResponse = null;",
                "type": "ADD",
                "lineNo": 338
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.http.HttpResponse lastResponse"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.performRequest(URL,JSONBuilder,Session,KeyPair,URL,String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            {@link URL} to send the request to.",
                "type": "DELETE",
                "lineNo": 421
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link URL} to send the request to.",
                "type": "ADD",
                "lineNo": 415
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            {@link JSONBuilder} containing claims. {@code null} for POST-as-GET",
                "type": "DELETE",
                "lineNo": 423
              },
              {
                "line": "*            request.",
                "type": "DELETE",
                "lineNo": 424
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link JSONBuilder} containing claims. {@code null} for POST-as-GET",
                "type": "ADD",
                "lineNo": 417
              },
              {
                "line": "*         request.",
                "type": "ADD",
                "lineNo": 418
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            {@link Session} instance to be used for signing and tracking",
                "type": "DELETE",
                "lineNo": 426
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link Session} instance to be used for signing and tracking",
                "type": "ADD",
                "lineNo": 420
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            {@link KeyPair} to be used for signing",
                "type": "DELETE",
                "lineNo": 428
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link KeyPair} to be used for signing",
                "type": "ADD",
                "lineNo": 422
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            If set, the account location is set as \"kid\" header. If {@code null},",
                "type": "DELETE",
                "lineNo": 430
              },
              {
                "line": "*            the public key is set as \"jwk\" header.",
                "type": "DELETE",
                "lineNo": 431
              }
            ],
            "targetChanges": [
              {
                "line": "*         If set, the account location is set as \"kid\" header. If {@code null}, the",
                "type": "ADD",
                "lineNo": 424
              },
              {
                "line": "*         public key is set as \"jwk\" header.",
                "type": "ADD",
                "lineNo": 425
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            Accept header",
                "type": "DELETE",
                "lineNo": 433
              }
            ],
            "targetChanges": [
              {
                "line": "*         Accept header",
                "type": "ADD",
                "lineNo": 427
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "KeyPair keypair, @Nullable URL accountLocation, String accept)",
                "type": "DELETE",
                "lineNo": 437
              },
              {
                "line": "throws AcmeException {",
                "type": "DELETE",
                "lineNo": 438
              }
            ],
            "targetChanges": [
              {
                "line": "KeyPair keypair, @Nullable URL accountLocation, String accept)",
                "type": "ADD",
                "lineNo": 431
              },
              {
                "line": "throws AcmeException {",
                "type": "ADD",
                "lineNo": 432
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtParameter",
                "value": "java.security.KeyPair keypair"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyPair"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL accountLocation"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              }
            ],
            "targetElements": [
              {
                "type": "CtParameter",
                "value": "java.security.KeyPair keypair"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyPair"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL accountLocation"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "conn = httpConnector.openConnection(url, session.networkSettings());",
                "type": "DELETE",
                "lineNo": 444
              },
              {
                "line": "conn.setRequestMethod(\"POST\");",
                "type": "DELETE",
                "lineNo": 445
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_HEADER, accept);",
                "type": "DELETE",
                "lineNo": 446
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_CHARSET_HEADER, DEFAULT_CHARSET);",
                "type": "DELETE",
                "lineNo": 447
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());",
                "type": "DELETE",
                "lineNo": 448
              },
              {
                "line": "conn.setRequestProperty(CONTENT_TYPE_HEADER, \"application/jose+json\");",
                "type": "DELETE",
                "lineNo": 449
              },
              {
                "line": "conn.setDoOutput(true);",
                "type": "DELETE",
                "lineNo": 450
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector httpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'POST'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_CHARSET_HEADER"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DEFAULT_CHARSET"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_LANGUAGE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'application/jose+json'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setDoOutput(boolean)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setDoOutput(boolean)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'true'"
              }
            ],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "var outputData = jose.toString().getBytes(StandardCharsets.UTF_8);",
                "type": "DELETE",
                "lineNo": 460
              }
            ],
            "targetChanges": [
              {
                "line": "var outputData = jose.toString();",
                "type": "ADD",
                "lineNo": 446
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "byte[] outputData"
              },
              {
                "type": "CtArrayTypeReference",
                "value": "byte[]"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.getBytes(Charset)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder.toString()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder jose"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder.toString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.getBytes(Charset)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.nio.charset.Charset UTF_8"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.nio.charset.StandardCharsets"
              },
              {
                "type": "CtFieldReference",
                "value": "java.nio.charset.Charset UTF_8"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String outputData"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder.toString()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder jose"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSONBuilder.toString()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "conn.setFixedLengthStreamingMode(outputData.length);",
                "type": "DELETE",
                "lineNo": 462
              },
              {
                "line": "conn.connect();",
                "type": "DELETE",
                "lineNo": 463
              }
            ],
            "targetChanges": [
              {
                "line": "sendRequest(session, url, builder -> {",
                "type": "ADD",
                "lineNo": 448
              },
              {
                "line": "builder.POST(HttpRequest.BodyPublishers.ofString(outputData));",
                "type": "ADD",
                "lineNo": 449
              },
              {
                "line": "builder.header(ACCEPT_HEADER, accept);",
                "type": "ADD",
                "lineNo": 450
              },
              {
                "line": "builder.header(CONTENT_TYPE_HEADER, \"application/jose+json\");",
                "type": "ADD",
                "lineNo": 451
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 452
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.setFixedLengthStreamingMode(int)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.setFixedLengthStreamingMode(int)"
              },
              {
                "type": "CtFieldRead",
                "value": "int length"
              },
              {
                "type": "CtVariableRead",
                "value": "byte[] outputData"
              },
              {
                "type": "CtLocalVariableReference",
                "value": "byte[] outputData"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.connect()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtParameter",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.POST(BodyPublisher)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.POST(BodyPublisher)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$BodyPublishers.ofString(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpRequest$BodyPublishers"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$BodyPublishers.ofString(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String outputData"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'application/jose+json'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "try (var out = conn.getOutputStream()) {",
                "type": "DELETE",
                "lineNo": 465
              },
              {
                "line": "out.write(outputData);",
                "type": "DELETE",
                "lineNo": 466
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 467
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.io.OutputStream out"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.OutputStream"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getOutputStream()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getOutputStream()"
              },
              {
                "type": "CtInvocation",
                "value": "java.io.OutputStream.write(byte[])"
              },
              {
                "type": "CtVariableRead",
                "value": "java.io.OutputStream out"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.io.OutputStream.write(byte[])"
              },
              {
                "type": "CtVariableRead",
                "value": "byte[] outputData"
              }
            ],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "var rc = conn.getResponseCode();",
                "type": "DELETE",
                "lineNo": 473
              },
              {
                "line": "if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_CREATED) {",
                "type": "DELETE",
                "lineNo": 474
              }
            ],
            "targetChanges": [
              {
                "line": "var rc = getResponse().statusCode();",
                "type": "ADD",
                "lineNo": 458
              },
              {
                "line": "if (rc != HTTP_OK && rc != HTTP_CREATED) {",
                "type": "ADD",
                "lineNo": 459
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_CREATED"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_CREATED"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_CREATED"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getRetryAfterHeader()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "// See RFC 2616 section 14.37",
                "type": "DELETE",
                "lineNo": 487
              },
              {
                "line": "var header = conn.getHeaderField(RETRY_AFTER_HEADER);",
                "type": "DELETE",
                "lineNo": 488
              },
              {
                "line": "if (header != null) {",
                "type": "DELETE",
                "lineNo": 489
              },
              {
                "line": "try {",
                "type": "DELETE",
                "lineNo": 490
              },
              {
                "line": "// delta-seconds",
                "type": "DELETE",
                "lineNo": 491
              },
              {
                "line": "if (header.matches(\"^\\\\d+$\")) {",
                "type": "DELETE",
                "lineNo": 492
              },
              {
                "line": "var delta = Integer.parseInt(header);",
                "type": "DELETE",
                "lineNo": 493
              },
              {
                "line": "var date = conn.getHeaderFieldDate(DATE_HEADER, System.currentTimeMillis());",
                "type": "DELETE",
                "lineNo": 494
              },
              {
                "line": "return Optional.of(Instant.ofEpochMilli(date).plusSeconds(delta));",
                "type": "DELETE",
                "lineNo": 495
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 496
              },
              {
                "line": "// HTTP-date",
                "type": "DELETE",
                "lineNo": 498
              },
              {
                "line": "var date = conn.getHeaderFieldDate(RETRY_AFTER_HEADER, 0L);",
                "type": "DELETE",
                "lineNo": 499
              },
              {
                "line": "if (date != 0) {",
                "type": "DELETE",
                "lineNo": 500
              },
              {
                "line": "return Optional.of(Instant.ofEpochMilli(date));",
                "type": "DELETE",
                "lineNo": 501
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 502
              },
              {
                "line": "} catch (Exception ex) {",
                "type": "DELETE",
                "lineNo": 503
              },
              {
                "line": "throw new AcmeProtocolException(\"Bad retry-after header value: \" + header, ex);",
                "type": "DELETE",
                "lineNo": 504
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 505
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 506
              },
              {
                "line": "return Optional.empty();",
                "type": "DELETE",
                "lineNo": 508
              }
            ],
            "targetChanges": [
              {
                "line": "return getResponse().headers()",
                "type": "ADD",
                "lineNo": 472
              },
              {
                "line": ".firstValue(RETRY_AFTER_HEADER)",
                "type": "ADD",
                "lineNo": 473
              },
              {
                "line": ".map(this::parseRetryAfterHeader);",
                "type": "ADD",
                "lineNo": 474
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String header"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String RETRY_AFTER_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.matches(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.matches(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '^\\d+$'"
              },
              {
                "type": "CtLocalVariable",
                "value": "int delta"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.Integer"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Integer.parseInt(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtLocalVariable",
                "value": "long date"
              },
              {
                "type": "CtTypeReference",
                "value": "long"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getHeaderFieldDate(String,long)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getHeaderFieldDate(String,long)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DATE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.System.currentTimeMillis()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.System"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.System.currentTimeMillis()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Instant.plusSeconds(long)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Instant.ofEpochMilli(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Instant"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Instant.ofEpochMilli(long)"
              },
              {
                "type": "CtVariableRead",
                "value": "long date"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Instant.plusSeconds(long)"
              },
              {
                "type": "CtVariableRead",
                "value": "int delta"
              },
              {
                "type": "CtLocalVariable",
                "value": "long date"
              },
              {
                "type": "CtTypeReference",
                "value": "long"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getHeaderFieldDate(String,long)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getHeaderFieldDate(String,long)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String RETRY_AFTER_HEADER"
              },
              {
                "type": "CtLiteral",
                "value": "long '0'"
              },
              {
                "type": "CtVariableRead",
                "value": "long date"
              },
              {
                "type": "CtLiteral",
                "value": "int '0'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Instant.ofEpochMilli(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Instant"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Instant.ofEpochMilli(long)"
              },
              {
                "type": "CtVariableRead",
                "value": "long date"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.lang.Exception ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.Exception"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String,Throwable)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String,Throwable)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Bad retry-after header value: '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String header"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Exception ex"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.empty()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.empty()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String RETRY_AFTER_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.parseRetryAfterHeader(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.parseRetryAfterHeader(String)"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var contentType = AcmeUtils.getContentType(conn.getHeaderField(CONTENT_TYPE_HEADER));",
                "type": "DELETE",
                "lineNo": 517
              },
              {
                "line": "if (!MIME_JSON_PROBLEM.equals(contentType)) {",
                "type": "DELETE",
                "lineNo": 518
              },
              {
                "line": "throw new AcmeException(\"HTTP \" + conn.getResponseCode() + \": \" + conn.getResponseMessage());",
                "type": "DELETE",
                "lineNo": 519
              }
            ],
            "targetChanges": [
              {
                "line": "if (getResponse().headers().firstValue(CONTENT_TYPE_HEADER)",
                "type": "ADD",
                "lineNo": 512
              },
              {
                "line": ".map(AcmeUtils::getContentType)",
                "type": "ADD",
                "lineNo": 513
              },
              {
                "line": ".filter(MIME_JSON_PROBLEM::equals)",
                "type": "ADD",
                "lineNo": 514
              },
              {
                "line": ".isEmpty()) {",
                "type": "ADD",
                "lineNo": 515
              },
              {
                "line": "// Generic HTTP error",
                "type": "ADD",
                "lineNo": 516
              },
              {
                "line": "throw new AcmeException(\"HTTP \" + getResponse().statusCode());",
                "type": "ADD",
                "lineNo": 517
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderField(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON_PROBLEM"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String contentType"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP '"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String ': '"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseMessage()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseMessage()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.firstValue(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String CONTENT_TYPE_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.getContentType(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.filter(Predicate)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.String.equals(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String MIME_JSON_PROBLEM"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP '"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.statusCode()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.statusCode()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var problem = new Problem(readJsonResponse(), conn.getURL());",
                "type": "DELETE",
                "lineNo": 522
              }
            ],
            "targetChanges": [
              {
                "line": "var problem = new Problem(readJsonResponse(), getResponse().request().uri().toURL());",
                "type": "ADD",
                "lineNo": 520
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.Problem.Problem(JSON,URL)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getURL()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getURL()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.Problem.Problem(JSON,URL)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.readJsonResponse()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.toURL()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest.uri()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.request()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.request()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest.uri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.toURL()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "if (conn != null) {",
                "type": "DELETE",
                "lineNo": 563
              }
            ],
            "targetChanges": [
              {
                "line": "if (lastResponse != null) {",
                "type": "ADD",
                "lineNo": 584
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpResponse lastResponse"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "conn.getHeaderFields().forEach((key, headers) ->",
                "type": "DELETE",
                "lineNo": 576
              },
              {
                "line": "headers.forEach(value ->",
                "type": "DELETE",
                "lineNo": 577
              },
              {
                "line": "LOG.debug(\"HEADER {}: {}\", key, value)",
                "type": "DELETE",
                "lineNo": 578
              },
              {
                "line": ")",
                "type": "DELETE",
                "lineNo": 579
              }
            ],
            "targetChanges": [
              {
                "line": "getResponse().headers().map().forEach((key, headers) ->",
                "type": "ADD",
                "lineNo": 597
              },
              {
                "line": "headers.forEach(value ->",
                "type": "ADD",
                "lineNo": 598
              },
              {
                "line": "LOG.debug(\"HEADER {}: {}\", key, value)",
                "type": "ADD",
                "lineNo": 599
              },
              {
                "line": ")",
                "type": "ADD",
                "lineNo": 600
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Map.forEach(BiConsumer)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderFields()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderFields()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Map.forEach(BiConsumer)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String key"
              },
              {
                "type": "CtParameter",
                "value": "java.util.List headers"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Iterable.forEach(Consumer)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.List headers"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Iterable.forEach(Consumer)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String value"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HEADER {}: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String key"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String value"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Map.forEach(BiConsumer)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.map()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.map()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Map.forEach(BiConsumer)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String key"
              },
              {
                "type": "CtParameter",
                "value": "java.util.List headers"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Iterable.forEach(Consumer)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.List headers"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Iterable.forEach(Consumer)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String value"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HEADER {}: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String key"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.collectLinks(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            Link relation",
                "type": "DELETE",
                "lineNo": 587
              }
            ],
            "targetChanges": [
              {
                "line": "*         Link relation",
                "type": "ADD",
                "lineNo": 608
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 591
              }
            ],
            "targetChanges": [
              {
                "line": "var p = Pattern.compile(\"<(.*?)>\\\\s*;\\\\s*rel=\\\"?\" + Pattern.quote(relation) + \"\\\"?\");",
                "type": "ADD",
                "lineNo": 612
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.regex.Pattern p"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.compile(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.compile(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '<(.*?)>\\s*;\\s*rel=\"?'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.quote(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.quote(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String relation"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '\"?'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var result = new ArrayList<String>();",
                "type": "DELETE",
                "lineNo": 593
              },
              {
                "line": "var links = conn.getHeaderFields().get(LINK_HEADER);",
                "type": "DELETE",
                "lineNo": 595
              },
              {
                "line": "if (links != null) {",
                "type": "DELETE",
                "lineNo": 596
              },
              {
                "line": "var p = Pattern.compile(\"<(.*?)>\\\\s*;\\\\s*rel=\\\"?\"+ Pattern.quote(relation) + \"\\\"?\");",
                "type": "DELETE",
                "lineNo": 597
              },
              {
                "line": "for (var link : links) {",
                "type": "DELETE",
                "lineNo": 598
              },
              {
                "line": "var m = p.matcher(link);",
                "type": "DELETE",
                "lineNo": 599
              },
              {
                "line": "if (m.matches()) {",
                "type": "DELETE",
                "lineNo": 600
              },
              {
                "line": "var location = m.group(1);",
                "type": "DELETE",
                "lineNo": 601
              },
              {
                "line": "LOG.debug(\"Link: {} -> {}\", relation, location);",
                "type": "DELETE",
                "lineNo": 602
              },
              {
                "line": "result.add(location);",
                "type": "DELETE",
                "lineNo": 603
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 604
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 605
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 606
              },
              {
                "line": "return result;",
                "type": "DELETE",
                "lineNo": 608
              }
            ],
            "targetChanges": [
              {
                "line": "return getResponse().headers().allValues(LINK_HEADER)",
                "type": "ADD",
                "lineNo": 614
              },
              {
                "line": ".stream()",
                "type": "ADD",
                "lineNo": 615
              },
              {
                "line": ".map(p::matcher)",
                "type": "ADD",
                "lineNo": 616
              },
              {
                "line": ".filter(Matcher::matches)",
                "type": "ADD",
                "lineNo": 617
              },
              {
                "line": ".map(m -> m.group(1))",
                "type": "ADD",
                "lineNo": 618
              },
              {
                "line": ".peek(location -> LOG.debug(\"Link: {} -> {}\", relation, location))",
                "type": "ADD",
                "lineNo": 619
              },
              {
                "line": ".collect(toUnmodifiableList());",
                "type": "ADD",
                "lineNo": 620
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.ArrayList result"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.ArrayList"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.util.ArrayList.ArrayList()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.ArrayList"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.List links"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.List"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Map.get(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getHeaderFields()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getHeaderFields()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Map.get(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LINK_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.List links"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.regex.Pattern p"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.compile(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.compile(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '<(.*?)>\\s*;\\s*rel=\"?'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.quote(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Pattern"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.quote(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String relation"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '\"?'"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String link"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.List links"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.regex.Matcher"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Pattern p"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String link"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String location"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Link: {} -> {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String relation"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.ArrayList.add(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.ArrayList result"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.ArrayList.add(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.ArrayList result"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.peek(Consumer)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpHeaders.allValues(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.headers()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpHeaders.allValues(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String LINK_HEADER"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Pattern.matcher(CharSequence)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Pattern p"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.filter(Predicate)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.matches()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.regex.Matcher"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.regex.Matcher m"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.regex.Matcher.group(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.peek(Consumer)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String location"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Link: {} -> {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String relation"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String location"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.collect(Collector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Collectors.toUnmodifiableList()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            Link to resolve. Absolute links are just converted to an URL. May be",
                "type": "DELETE",
                "lineNo": 615
              },
              {
                "line": "*            {@code null}.",
                "type": "DELETE",
                "lineNo": 616
              },
              {
                "line": "* @return Absolute URL of the given link, or {@code null} if the link was",
                "type": "DELETE",
                "lineNo": 617
              },
              {
                "line": "*         {@code null}.",
                "type": "DELETE",
                "lineNo": 618
              }
            ],
            "targetChanges": [
              {
                "line": "*         Link to resolve. Absolute links are just converted to an URL.",
                "type": "ADD",
                "lineNo": 627
              },
              {
                "line": "* @return Absolute URL of the given link",
                "type": "ADD",
                "lineNo": 628
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 620
              },
              {
                "line": "private URL resolveRelative(@Nullable String link) {",
                "type": "DELETE",
                "lineNo": 621
              },
              {
                "line": "if (link == null) {",
                "type": "DELETE",
                "lineNo": 622
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 623
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 624
              },
              {
                "line": "assertConnectionIsOpen();",
                "type": "DELETE",
                "lineNo": 626
              }
            ],
            "targetChanges": [
              {
                "line": "private URL resolveRelative(String link) {",
                "type": "ADD",
                "lineNo": 630
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String link"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String link"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String link"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "return new URL(conn.getURL(), link);",
                "type": "DELETE",
                "lineNo": 628
              }
            ],
            "targetChanges": [
              {
                "line": "return resolveUri(link).toURL();",
                "type": "ADD",
                "lineNo": 632
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(URL,String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getURL()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getURL()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String link"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.net.URI.toURL()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String link"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.toURL()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            URI to resolve",
                "type": "DELETE",
                "lineNo": 638
              },
              {
                "line": "* @return Absolute URI of the given link, or {@code null} if the URI was",
                "type": "DELETE",
                "lineNo": 639
              },
              {
                "line": "*         {@code null}.",
                "type": "DELETE",
                "lineNo": 640
              }
            ],
            "targetChanges": [
              {
                "line": "*         URI to resolve",
                "type": "ADD",
                "lineNo": 642
              },
              {
                "line": "* @return Absolute URI of the given link",
                "type": "ADD",
                "lineNo": 643
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 642
              },
              {
                "line": "private URI resolveUri(@Nullable String uri) {",
                "type": "DELETE",
                "lineNo": 643
              },
              {
                "line": "if (uri == null) {",
                "type": "DELETE",
                "lineNo": 644
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 645
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 646
              },
              {
                "line": "try {",
                "type": "DELETE",
                "lineNo": 648
              },
              {
                "line": "return conn.getURL().toURI().resolve(uri);",
                "type": "DELETE",
                "lineNo": 649
              },
              {
                "line": "} catch (URISyntaxException ex) {",
                "type": "DELETE",
                "lineNo": 650
              },
              {
                "line": "throw new AcmeProtocolException(\"Invalid URI\", ex);",
                "type": "DELETE",
                "lineNo": 651
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 652
              }
            ],
            "targetChanges": [
              {
                "line": "private URI resolveUri(String uri) {",
                "type": "ADD",
                "lineNo": 645
              },
              {
                "line": "return getResponse().request().uri().resolve(uri);",
                "type": "ADD",
                "lineNo": 646
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri(String)"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String uri"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String uri"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.resolve(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URL.toURI()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.getURL()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.getURL()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URL.toURI()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.resolve(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String uri"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.net.URISyntaxException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URISyntaxException"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String,Throwable)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String,Throwable)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Invalid URI'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URISyntaxException ex"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveUri(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String uri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.resolve(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest.uri()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse.request()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse.request()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest.uri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.resolve(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String uri"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,String,ZonedDateTime)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Sends an unsigned GET request.",
                "type": "DELETE",
                "lineNo": 320
              }
            ],
            "targetChanges": [
              {
                "line": "* Sends a HTTP request via http client. This is the central method to be used for",
                "type": "ADD",
                "lineNo": 342
              },
              {
                "line": "* sending. It will create a {@link HttpRequest} by using the request builder,",
                "type": "ADD",
                "lineNo": 343
              },
              {
                "line": "* configure commnon headers, and then send the request via {@link HttpClient}.",
                "type": "ADD",
                "lineNo": 344
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "* @param url",
                "type": "DELETE",
                "lineNo": 322
              },
              {
                "line": "*            {@link URL} to send the request to.",
                "type": "DELETE",
                "lineNo": 323
              }
            ],
            "type": "DELETE",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "*            {@link Session} instance to be used for signing and tracking",
                "type": "DELETE",
                "lineNo": 325
              },
              {
                "line": "* @param accept",
                "type": "DELETE",
                "lineNo": 326
              },
              {
                "line": "*            Accept header",
                "type": "DELETE",
                "lineNo": 327
              },
              {
                "line": "* @param ifModifiedSince",
                "type": "DELETE",
                "lineNo": 328
              },
              {
                "line": "*            Set an If-Modified-Since header with the given date. If set, an",
                "type": "DELETE",
                "lineNo": 329
              },
              {
                "line": "*            NOT_MODIFIED response is accepted as valid.",
                "type": "DELETE",
                "lineNo": 330
              },
              {
                "line": "* @return HTTP 200 class status that was returned",
                "type": "DELETE",
                "lineNo": 331
              }
            ],
            "targetChanges": [
              {
                "line": "*         {@link Session} to be used for sending",
                "type": "ADD",
                "lineNo": 347
              },
              {
                "line": "* @param url",
                "type": "ADD",
                "lineNo": 348
              },
              {
                "line": "*         Target {@link URL}",
                "type": "ADD",
                "lineNo": 349
              },
              {
                "line": "* @param body",
                "type": "ADD",
                "lineNo": 350
              },
              {
                "line": "*         Callback that completes the {@link HttpRequest.Builder} with the request",
                "type": "ADD",
                "lineNo": 351
              },
              {
                "line": "*         body (e.g. HTTP method, request body, more headers).",
                "type": "ADD",
                "lineNo": 352
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "protected int sendRequest(URL url, Session session, String accept,",
                "type": "DELETE",
                "lineNo": 333
              },
              {
                "line": "@Nullable ZonedDateTime ifModifiedSince) throws AcmeException {",
                "type": "DELETE",
                "lineNo": 334
              },
              {
                "line": "Objects.requireNonNull(url, \"url\");",
                "type": "DELETE",
                "lineNo": 335
              },
              {
                "line": "Objects.requireNonNull(session, \"session\");",
                "type": "DELETE",
                "lineNo": 336
              },
              {
                "line": "Objects.requireNonNull(accept, \"accept\");",
                "type": "DELETE",
                "lineNo": 337
              },
              {
                "line": "assertConnectionIsClosed();",
                "type": "DELETE",
                "lineNo": 338
              },
              {
                "line": "LOG.debug(\"GET {}\", url);",
                "type": "DELETE",
                "lineNo": 340
              }
            ],
            "targetChanges": [
              {
                "line": "protected void sendRequest(Session session, URL url, Consumer<HttpRequest.Builder> body) throws IOException {",
                "type": "ADD",
                "lineNo": 354
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,String,ZonedDateTime)"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL url"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Session"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtParameter",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.ZonedDateTime"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'url'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'session'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'accept'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsClosed()"
              },
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'GET {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(Session,URL,Consumer)"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Session"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL url"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "java.util.function.Consumer body"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.function.Consumer"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpRequest$Builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpRequest"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "conn = httpConnector.openConnection(url, session.networkSettings());",
                "type": "DELETE",
                "lineNo": 343
              },
              {
                "line": "conn.setRequestMethod(\"GET\");",
                "type": "DELETE",
                "lineNo": 344
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_HEADER, accept);",
                "type": "DELETE",
                "lineNo": 345
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_CHARSET_HEADER, DEFAULT_CHARSET);",
                "type": "DELETE",
                "lineNo": 346
              },
              {
                "line": "conn.setRequestProperty(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());",
                "type": "DELETE",
                "lineNo": 347
              },
              {
                "line": "if (ifModifiedSince != null) {",
                "type": "DELETE",
                "lineNo": 348
              },
              {
                "line": "conn.setRequestProperty(IF_MODIFIED_SINCE_HEADER, ifModifiedSince.format(RFC_1123_DATE_TIME));",
                "type": "DELETE",
                "lineNo": 349
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 350
              },
              {
                "line": "conn.setDoOutput(false);",
                "type": "DELETE",
                "lineNo": 351
              }
            ],
            "targetChanges": [
              {
                "line": "var builder = httpConnector.createRequestBuilder(url)",
                "type": "ADD",
                "lineNo": 356
              },
              {
                "line": ".header(ACCEPT_CHARSET_HEADER, DEFAULT_CHARSET)",
                "type": "ADD",
                "lineNo": 357
              },
              {
                "line": ".header(ACCEPT_LANGUAGE_HEADER, session.getLocale().toLanguageTag());",
                "type": "ADD",
                "lineNo": 358
              },
              {
                "line": "body.accept(builder);",
                "type": "ADD",
                "lineNo": 359
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector httpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.setRequestMethod(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'GET'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_HEADER"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String accept"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_CHARSET_HEADER"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DEFAULT_CHARSET"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_LANGUAGE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String IF_MODIFIED_SINCE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.ZonedDateTime.format(DateTimeFormatter)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.ZonedDateTime.format(DateTimeFormatter)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.format.DateTimeFormatter RFC_1123_DATE_TIME"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setDoOutput(boolean)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setDoOutput(boolean)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpRequest$Builder"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createRequestBuilder(URL)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector httpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createRequestBuilder(URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_CHARSET_HEADER"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DEFAULT_CHARSET"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.header(String,String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String ACCEPT_LANGUAGE_HEADER"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getLocale()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Locale.toLanguageTag()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.function.Consumer.accept(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.function.Consumer body"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.function.Consumer.accept(Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "conn.connect();",
                "type": "DELETE",
                "lineNo": 353
              },
              {
                "line": "logHeaders();",
                "type": "DELETE",
                "lineNo": 355
              },
              {
                "line": "var nonce = getNonce();",
                "type": "DELETE",
                "lineNo": 357
              },
              {
                "line": "if (nonce != null) {",
                "type": "DELETE",
                "lineNo": 358
              },
              {
                "line": "session.setNonce(nonce);",
                "type": "DELETE",
                "lineNo": 359
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 360
              },
              {
                "line": "var rc = conn.getResponseCode();",
                "type": "DELETE",
                "lineNo": 362
              },
              {
                "line": "if (rc != HttpURLConnection.HTTP_OK && rc != HttpURLConnection.HTTP_CREATED",
                "type": "DELETE",
                "lineNo": 363
              },
              {
                "line": "&& (rc != HttpURLConnection.HTTP_NOT_MODIFIED || ifModifiedSince == null)) {",
                "type": "DELETE",
                "lineNo": 364
              },
              {
                "line": "throwAcmeException();",
                "type": "DELETE",
                "lineNo": 365
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 366
              },
              {
                "line": "return rc;",
                "type": "DELETE",
                "lineNo": 367
              },
              {
                "line": "} catch (IOException ex) {",
                "type": "DELETE",
                "lineNo": 368
              },
              {
                "line": "throw new AcmeNetworkException(ex);",
                "type": "DELETE",
                "lineNo": 369
              }
            ],
            "targetChanges": [
              {
                "line": "lastResponse = httpClient.send(builder.build(), HttpResponse.BodyHandlers.ofInputStream());",
                "type": "ADD",
                "lineNo": 361
              },
              {
                "line": "} catch (InterruptedException ex) {",
                "type": "ADD",
                "lineNo": 362
              },
              {
                "line": "throw new IOException(\"Request was interrupted\", ex);",
                "type": "ADD",
                "lineNo": 363
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.logHeaders()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLocalVariable",
                "value": "int rc"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_CREATED"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_CREATED"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NOT_MODIFIED"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_NOT_MODIFIED"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime ifModifiedSince"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.throwAcmeException()"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.io.IOException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException.AcmeNetworkException(IOException)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException.AcmeNetworkException(IOException)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeNetworkException"
              },
              {
                "type": "CtVariableRead",
                "value": "java.io.IOException ex"
              }
            ],
            "targetElements": [
              {
                "type": "CtFieldWrite",
                "value": "java.net.http.HttpResponse lastResponse"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.send(HttpRequest,BodyHandler)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpClient httpClient"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.send(HttpRequest,BodyHandler)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpRequest$Builder.build()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpRequest$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpRequest$Builder.build()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpResponse$BodyHandlers.ofInputStream()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpResponse$BodyHandlers"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpResponse$BodyHandlers.ofInputStream()"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.lang.InterruptedException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.InterruptedException"
              },
              {
                "type": "CtThrow",
                "value": "java.io.IOException.IOException(String,Throwable)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.io.IOException.IOException(String,Throwable)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Request was interrupted'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.InterruptedException ex"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Asserts that the connection is currently open. Throws an exception if not.",
                "type": "DELETE",
                "lineNo": 551
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the response of the last request. If there is no connection currently",
                "type": "ADD",
                "lineNo": 567
              },
              {
                "line": "* open, an exception is thrown instead.",
                "type": "ADD",
                "lineNo": 568
              },
              {
                "line": "* <p>",
                "type": "ADD",
                "lineNo": 569
              },
              {
                "line": "* Note that the response provides an {@link InputStream} that can be read only",
                "type": "ADD",
                "lineNo": 570
              },
              {
                "line": "* once.",
                "type": "ADD",
                "lineNo": 571
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "private void assertConnectionIsOpen() {",
                "type": "DELETE",
                "lineNo": 553
              },
              {
                "line": "if (conn == null) {",
                "type": "DELETE",
                "lineNo": 554
              }
            ],
            "targetChanges": [
              {
                "line": "private HttpResponse<InputStream> getResponse() {",
                "type": "ADD",
                "lineNo": 573
              },
              {
                "line": "if (lastResponse == null) {",
                "type": "ADD",
                "lineNo": 574
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.assertConnectionIsOpen()"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getResponse()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpResponse"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.InputStream"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpResponse lastResponse"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          },
          {
            "targetChanges": [
              {
                "line": "return lastResponse;",
                "type": "ADD",
                "lineNo": 577
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpResponse lastResponse"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java",
        "name": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "/**",
                "type": "DELETE",
                "lineNo": 59
              },
              {
                "line": "* Opens a {@link HttpURLConnection} to the given {@link URL}.",
                "type": "DELETE",
                "lineNo": 60
              },
              {
                "line": "*",
                "type": "DELETE",
                "lineNo": 61
              },
              {
                "line": "* @param url",
                "type": "DELETE",
                "lineNo": 62
              },
              {
                "line": "*            {@link URL} to connect to",
                "type": "DELETE",
                "lineNo": 63
              },
              {
                "line": "* @param settings",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "*            {@link NetworkSettings} to be used",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "* @return {@link HttpURLConnection} connected to the {@link URL}",
                "type": "DELETE",
                "lineNo": 66
              },
              {
                "line": "*/",
                "type": "DELETE",
                "lineNo": 67
              },
              {
                "line": "public HttpURLConnection openConnection(URL url, NetworkSettings settings) throws IOException {",
                "type": "DELETE",
                "lineNo": 68
              },
              {
                "line": "var conn = (HttpURLConnection) url.openConnection(settings.getProxy());",
                "type": "DELETE",
                "lineNo": 69
              },
              {
                "line": "configure(conn, settings);",
                "type": "DELETE",
                "lineNo": 70
              },
              {
                "line": "return conn;",
                "type": "DELETE",
                "lineNo": 71
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 72
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL url"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URL.openConnection(Proxy)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URL.openConnection(Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/HttpConnector.java",
        "name": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Configures the new {@link HttpURLConnection}.",
                "type": "DELETE",
                "lineNo": 75
              }
            ],
            "targetChanges": [
              {
                "line": "* Creates a new {@link HttpClient.Builder}.",
                "type": "ADD",
                "lineNo": 89
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "* The {@link HttpURLConnection} is already preconfigured with a reasonable timeout,",
                "type": "DELETE",
                "lineNo": 77
              },
              {
                "line": "* disabled caches and a User-Agent header. Subclasses can override this method to",
                "type": "DELETE",
                "lineNo": 78
              },
              {
                "line": "* change the configuration.",
                "type": "DELETE",
                "lineNo": 79
              },
              {
                "line": "*",
                "type": "DELETE",
                "lineNo": 80
              },
              {
                "line": "* @param conn",
                "type": "DELETE",
                "lineNo": 81
              },
              {
                "line": "*         {@link HttpURLConnection} to configure.",
                "type": "DELETE",
                "lineNo": 82
              },
              {
                "line": "* @param settings",
                "type": "DELETE",
                "lineNo": 83
              },
              {
                "line": "*         {@link NetworkSettings} with settings to be used",
                "type": "DELETE",
                "lineNo": 84
              }
            ],
            "targetChanges": [
              {
                "line": "* The {@link HttpClient.Builder} is already preconfigured with a reasonable timeout,",
                "type": "ADD",
                "lineNo": 91
              },
              {
                "line": "* the proxy settings, authenticator, and that it follows normal redirects.",
                "type": "ADD",
                "lineNo": 92
              },
              {
                "line": "* Subclasses can override this method to extend the configuration, or to create a",
                "type": "ADD",
                "lineNo": 93
              },
              {
                "line": "* different builder.",
                "type": "ADD",
                "lineNo": 94
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "protected void configure(HttpURLConnection conn, NetworkSettings settings) {",
                "type": "DELETE",
                "lineNo": 86
              },
              {
                "line": "var timeout = (int) settings.getTimeout().toMillis();",
                "type": "DELETE",
                "lineNo": 87
              },
              {
                "line": "conn.setConnectTimeout(timeout);",
                "type": "DELETE",
                "lineNo": 88
              },
              {
                "line": "conn.setReadTimeout(timeout);",
                "type": "DELETE",
                "lineNo": 89
              },
              {
                "line": "conn.setUseCaches(false);",
                "type": "DELETE",
                "lineNo": 90
              },
              {
                "line": "conn.setRequestProperty(\"User-Agent\", USER_AGENT);",
                "type": "DELETE",
                "lineNo": 91
              }
            ],
            "targetChanges": [
              {
                "line": "public HttpClient.Builder createClientBuilder() {",
                "type": "ADD",
                "lineNo": 96
              },
              {
                "line": "var builder = HttpClient.newBuilder()",
                "type": "ADD",
                "lineNo": 97
              },
              {
                "line": ".followRedirects(HttpClient.Redirect.NORMAL)",
                "type": "ADD",
                "lineNo": 98
              },
              {
                "line": ".connectTimeout(networkSettings.getTimeout())",
                "type": "ADD",
                "lineNo": 99
              },
              {
                "line": ".proxy(networkSettings.getProxySelector());",
                "type": "ADD",
                "lineNo": 100
              },
              {
                "line": "if (networkSettings.getAuthenticator() != null) {",
                "type": "ADD",
                "lineNo": 102
              },
              {
                "line": "builder.authenticator(networkSettings.getAuthenticator());",
                "type": "ADD",
                "lineNo": 103
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 104
              },
              {
                "line": "return builder;",
                "type": "ADD",
                "lineNo": 106
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtParameter",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtLocalVariable",
                "value": "int timeout"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.toMillis()"
              },
              {
                "type": "CtTypeReference",
                "value": "int"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.toMillis()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setConnectTimeout(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setConnectTimeout(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "int timeout"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setReadTimeout(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setReadTimeout(int)"
              },
              {
                "type": "CtVariableRead",
                "value": "int timeout"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setUseCaches(boolean)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setUseCaches(boolean)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.setRequestProperty(String,String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'User-Agent'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String USER_AGENT"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.http.HttpClient$Builder builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.proxy(ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.connectTimeout(Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.followRedirects(Redirect)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.newBuilder()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.newBuilder()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.followRedirects(Redirect)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Redirect"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.connectTimeout(Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.proxy(ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.authenticator(Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.authenticator(Authenticator)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient$Builder builder"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "name": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout(Duration)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "if (timeout.toMillis() > Integer.MAX_VALUE) {",
                "type": "DELETE",
                "lineNo": 63
              },
              {
                "line": "throw new IllegalArgumentException(\"Timeout is out of range\");",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 65
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.toMillis()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration timeout"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.toMillis()"
              },
              {
                "type": "CtFieldRead",
                "value": "int MAX_VALUE"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.lang.Integer"
              },
              {
                "type": "CtFieldReference",
                "value": "int MAX_VALUE"
              },
              {
                "type": "CtThrow",
                "value": "java.lang.IllegalArgumentException.IllegalArgumentException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.lang.IllegalArgumentException.IllegalArgumentException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.IllegalArgumentException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Timeout is out of range'"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "name": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the {@link Proxy} to be used for connections.",
                "type": "DELETE",
                "lineNo": 32
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the {@link ProxySelector} to be used for connections.",
                "type": "ADD",
                "lineNo": 35
              },
              {
                "line": "*",
                "type": "ADD",
                "lineNo": 36
              },
              {
                "line": "* @since 3.0.0",
                "type": "ADD",
                "lineNo": 37
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "public Proxy getProxy() {",
                "type": "DELETE",
                "lineNo": 34
              },
              {
                "line": "return proxy;",
                "type": "DELETE",
                "lineNo": 35
              }
            ],
            "targetChanges": [
              {
                "line": "public ProxySelector getProxySelector() {",
                "type": "ADD",
                "lineNo": 39
              },
              {
                "line": "return proxySelector;",
                "type": "ADD",
                "lineNo": 40
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.Proxy proxy"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.ProxySelector"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.ProxySelector proxySelector"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
        "name": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Sets a {@link Proxy} that is to be used for all connections. If {@code null},",
                "type": "DELETE",
                "lineNo": 39
              },
              {
                "line": "* {@link Proxy#NO_PROXY} is used, which is also the default.",
                "type": "DELETE",
                "lineNo": 40
              }
            ],
            "targetChanges": [
              {
                "line": "* Sets a {@link ProxySelector} that is to be used for all connections. If",
                "type": "ADD",
                "lineNo": 44
              },
              {
                "line": "* {@code null}, {@link HttpClient.Builder#NO_PROXY} is used, which is also the",
                "type": "ADD",
                "lineNo": 45
              },
              {
                "line": "* default.",
                "type": "ADD",
                "lineNo": 46
              },
              {
                "line": "*",
                "type": "ADD",
                "lineNo": 47
              },
              {
                "line": "* @since 3.0.0",
                "type": "ADD",
                "lineNo": 48
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "public void setProxy(@Nullable Proxy proxy) {",
                "type": "DELETE",
                "lineNo": 42
              },
              {
                "line": "this.proxy = proxy != null ? proxy : Proxy.NO_PROXY;",
                "type": "DELETE",
                "lineNo": 43
              }
            ],
            "targetChanges": [
              {
                "line": "public void setProxySelector(@Nullable ProxySelector proxySelector) {",
                "type": "ADD",
                "lineNo": 50
              },
              {
                "line": "this.proxySelector = proxySelector != null ? proxySelector : HttpClient.Builder.NO_PROXY;",
                "type": "ADD",
                "lineNo": 51
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtParameter",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldWrite",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.Proxy NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.Proxy NO_PROXY"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxySelector(ProxySelector)"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtParameter",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.ProxySelector"
              },
              {
                "type": "CtFieldWrite",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.ProxySelector NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.ProxySelector NO_PROXY"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProvider.directory(Session,URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "try (var conn = connect(serverUri)) {",
                "type": "DELETE",
                "lineNo": 62
              }
            ],
            "targetChanges": [
              {
                "line": "try (var conn = connect(serverUri, session.networkSettings())) {",
                "type": "ADD",
                "lineNo": 63
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.networkSettings()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "if (lastModified != null && rc == HttpURLConnection.HTTP_NOT_MODIFIED) {",
                "type": "DELETE",
                "lineNo": 65
              }
            ],
            "targetChanges": [
              {
                "line": "if (lastModified != null && rc == HTTP_NOT_MODIFIED) {",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime lastModified"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NOT_MODIFIED"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_NOT_MODIFIED"
              }
            ],
            "targetElements": [
              {
                "type": "CtVariableRead",
                "value": "java.time.ZonedDateTime lastModified"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtVariableRead",
                "value": "int rc"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_NOT_MODIFIED"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public Connection connect(URI serverUri) {",
                "type": "DELETE",
                "lineNo": 50
              },
              {
                "line": "return new DefaultConnection(createHttpConnector());",
                "type": "DELETE",
                "lineNo": 51
              }
            ],
            "targetChanges": [
              {
                "line": "public Connection connect(URI serverUri, NetworkSettings networkSettings) {",
                "type": "ADD",
                "lineNo": 51
              },
              {
                "line": "return new DefaultConnection(createHttpConnector(networkSettings));",
                "type": "ADD",
                "lineNo": 52
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.DefaultConnection(HttpConnector)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.DefaultConnection(HttpConnector)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "protected HttpConnector createHttpConnector() {",
                "type": "DELETE",
                "lineNo": 149
              },
              {
                "line": "return new HttpConnector();",
                "type": "DELETE",
                "lineNo": 150
              }
            ],
            "targetChanges": [
              {
                "line": "protected HttpConnector createHttpConnector(NetworkSettings settings) {",
                "type": "ADD",
                "lineNo": 150
              },
              {
                "line": "return new HttpConnector(settings);",
                "type": "ADD",
                "lineNo": 151
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*            Server {@link URI}",
                "type": "DELETE",
                "lineNo": 61
              }
            ],
            "targetChanges": [
              {
                "line": "*         Server {@link URI}",
                "type": "ADD",
                "lineNo": 62
              },
              {
                "line": "* @param networkSettings",
                "type": "ADD",
                "lineNo": 63
              },
              {
                "line": "*         {@link NetworkSettings} to be used for the connection",
                "type": "ADD",
                "lineNo": 64
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "Connection connect(URI serverUri);",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "targetChanges": [
              {
                "line": "Connection connect(URI serverUri, NetworkSettings networkSettings);",
                "type": "ADD",
                "lineNo": 67
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleAcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleAcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.pebble.PebbleAcmeProvider.createHttpConnector()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "protected HttpConnector createHttpConnector() {",
                "type": "DELETE",
                "lineNo": 84
              },
              {
                "line": "return new PebbleHttpConnector();",
                "type": "DELETE",
                "lineNo": 85
              }
            ],
            "targetChanges": [
              {
                "line": "protected HttpConnector createHttpConnector(NetworkSettings settings) {",
                "type": "ADD",
                "lineNo": 85
              },
              {
                "line": "return new PebbleHttpConnector(settings);",
                "type": "ADD",
                "lineNo": 86
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleAcmeProvider.createHttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.PebbleHttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.PebbleHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleHttpConnector.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleHttpConnector.java",
        "name": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.openConnection(URL,NetworkSettings)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public HttpURLConnection openConnection(URL url, NetworkSettings settings) throws IOException {",
                "type": "DELETE",
                "lineNo": 43
              },
              {
                "line": "var conn = super.openConnection(url, settings);",
                "type": "DELETE",
                "lineNo": 44
              },
              {
                "line": "if (conn instanceof HttpsURLConnection) {",
                "type": "DELETE",
                "lineNo": 45
              },
              {
                "line": "var conns = (HttpsURLConnection) conn;",
                "type": "DELETE",
                "lineNo": 46
              },
              {
                "line": "conns.setSSLSocketFactory(createSocketFactory());",
                "type": "DELETE",
                "lineNo": 47
              },
              {
                "line": "conns.setHostnameVerifier((h, s) -> true);",
                "type": "DELETE",
                "lineNo": 48
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 49
              },
              {
                "line": "return conn;",
                "type": "DELETE",
                "lineNo": 50
              }
            ],
            "targetChanges": [
              {
                "line": "public HttpClient.Builder createClientBuilder() {",
                "type": "ADD",
                "lineNo": 44
              },
              {
                "line": "var builder = super.createClientBuilder();",
                "type": "ADD",
                "lineNo": 45
              },
              {
                "line": "builder.sslContext(createSSLContext());",
                "type": "ADD",
                "lineNo": 46
              },
              {
                "line": "return builder;",
                "type": "ADD",
                "lineNo": 47
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL url"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL url"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeAccess",
                "value": "javax.net.ssl.HttpsURLConnection"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.HttpsURLConnection"
              },
              {
                "type": "CtLocalVariable",
                "value": "javax.net.ssl.HttpsURLConnection conns"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.HttpsURLConnection"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.HttpsURLConnection"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(SSLSocketFactory)"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.HttpsURLConnection conns"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.HttpsURLConnection.setSSLSocketFactory(SSLSocketFactory)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSocketFactory()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSocketFactory()"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.HttpsURLConnection.setHostnameVerifier(HostnameVerifier)"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.HttpsURLConnection conns"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.HttpsURLConnection.setHostnameVerifier(HostnameVerifier)"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String h"
              },
              {
                "type": "CtParameter",
                "value": "javax.net.ssl.SSLSession s"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'true'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createClientBuilder()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.http.HttpClient$Builder builder"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.sslContext(SSLContext)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient$Builder builder"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.sslContext(SSLContext)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSSLContext()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSSLContext()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient$Builder builder"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleHttpConnector.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/pebble/PebbleHttpConnector.java",
        "name": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSocketFactory()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Lazily creates an {@link SSLSocketFactory} that exclusively accepts the Pebble",
                "type": "DELETE",
                "lineNo": 54
              }
            ],
            "targetChanges": [
              {
                "line": "* Lazily creates an {@link SSLContext} that exclusively accepts the Pebble",
                "type": "ADD",
                "lineNo": 51
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "protected synchronized SSLSocketFactory createSocketFactory() throws IOException {",
                "type": "DELETE",
                "lineNo": 57
              },
              {
                "line": "if (sslSocketFactory == null) {",
                "type": "DELETE",
                "lineNo": 58
              }
            ],
            "targetChanges": [
              {
                "line": "protected synchronized SSLContext createSSLContext() {",
                "type": "ADD",
                "lineNo": 54
              },
              {
                "line": "if (sslContext == null) {",
                "type": "ADD",
                "lineNo": 55
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSocketFactory()"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.SSLSocketFactory"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtFieldRead",
                "value": "javax.net.ssl.SSLSocketFactory sslSocketFactory"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.pebble.PebbleHttpConnector.createSSLContext()"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.SSLContext"
              },
              {
                "type": "CtFieldRead",
                "value": "javax.net.ssl.SSLContext sslContext"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var ctx = SSLContext.getInstance(\"TLS\");",
                "type": "DELETE",
                "lineNo": 66
              },
              {
                "line": "ctx.init(null, tmf.getTrustManagers(), null);",
                "type": "DELETE",
                "lineNo": 67
              },
              {
                "line": "sslSocketFactory = ctx.getSocketFactory();",
                "type": "DELETE",
                "lineNo": 69
              },
              {
                "line": "} catch (KeyStoreException | CertificateException | NoSuchAlgorithmException",
                "type": "DELETE",
                "lineNo": 70
              },
              {
                "line": "| KeyManagementException ex) {",
                "type": "DELETE",
                "lineNo": 71
              },
              {
                "line": "throw new IOException(\"Could not create truststore\", ex);",
                "type": "DELETE",
                "lineNo": 72
              }
            ],
            "targetChanges": [
              {
                "line": "sslContext = SSLContext.getInstance(\"TLS\");",
                "type": "ADD",
                "lineNo": 63
              },
              {
                "line": "sslContext.init(null, tmf.getTrustManagers(), null);",
                "type": "ADD",
                "lineNo": 64
              },
              {
                "line": "} catch (IOException | KeyStoreException | CertificateException",
                "type": "ADD",
                "lineNo": 65
              },
              {
                "line": "| NoSuchAlgorithmException | KeyManagementException ex) {",
                "type": "ADD",
                "lineNo": 66
              },
              {
                "line": "throw new RuntimeException(\"Could not create truststore\", ex);",
                "type": "ADD",
                "lineNo": 67
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "javax.net.ssl.SSLContext ctx"
              },
              {
                "type": "CtTypeReference",
                "value": "javax.net.ssl.SSLContext"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.SSLContext.getInstance(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "javax.net.ssl.SSLContext"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.SSLContext.getInstance(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'TLS'"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.SSLContext ctx"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.TrustManagerFactory tmf"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtFieldWrite",
                "value": "javax.net.ssl.SSLSocketFactory sslSocketFactory"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.SSLContext.getSocketFactory()"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.SSLContext ctx"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.SSLContext.getSocketFactory()"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.security.KeyStoreException | java.security.cert.CertificateException | java.security.NoSuchAlgorithmException | java.security.KeyManagementException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyStoreException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.CertificateException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.NoSuchAlgorithmException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyManagementException"
              },
              {
                "type": "CtThrow",
                "value": "java.io.IOException.IOException(String,Throwable)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.io.IOException.IOException(String,Throwable)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Could not create truststore'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.security.GeneralSecurityException ex"
              }
            ],
            "targetElements": [
              {
                "type": "CtFieldWrite",
                "value": "javax.net.ssl.SSLContext sslContext"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.SSLContext.getInstance(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "javax.net.ssl.SSLContext"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.SSLContext.getInstance(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'TLS'"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)"
              },
              {
                "type": "CtFieldRead",
                "value": "javax.net.ssl.SSLContext sslContext"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.SSLContext.init(KeyManager[],TrustManager[],SecureRandom)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
              },
              {
                "type": "CtVariableRead",
                "value": "javax.net.ssl.TrustManagerFactory tmf"
              },
              {
                "type": "CtExecutableReference",
                "value": "javax.net.ssl.TrustManagerFactory.getTrustManagers()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtCatchVariable",
                "value": "java.io.IOException | java.security.KeyStoreException | java.security.cert.CertificateException | java.security.NoSuchAlgorithmException | java.security.KeyManagementException ex"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyStoreException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.CertificateException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.NoSuchAlgorithmException"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.KeyManagementException"
              },
              {
                "type": "CtThrow",
                "value": "java.lang.RuntimeException.RuntimeException(String,Throwable)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.lang.RuntimeException.RuntimeException(String,Throwable)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.RuntimeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Could not create truststore'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Exception ex"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "return Objects.requireNonNull(sslSocketFactory);",
                "type": "DELETE",
                "lineNo": 75
              }
            ],
            "targetChanges": [
              {
                "line": "return Objects.requireNonNull(sslContext);",
                "type": "ADD",
                "lineNo": 70
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "javax.net.ssl.SSLSocketFactory sslSocketFactory"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Objects.requireNonNull(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Objects"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Objects.requireNonNull(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "javax.net.ssl.SSLContext sslContext"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testAcceptThrowsServerException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getMessage()).isEqualTo(\"HTTP 500: Infernal Server Error\");",
                "type": "DELETE",
                "lineNo": 552
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getMessage()).isEqualTo(\"HTTP 500\");",
                "type": "ADD",
                "lineNo": 551
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getMessage()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getMessage()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP 500: Infernal Server Error'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getMessage()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getMessage()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP 500'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/HttpConnectorTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/HttpConnectorTest.java",
        "name": "org.shredzone.acme4j.connector.HttpConnectorTest.testMockOpenConnection()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Test if a HTTP connection can be opened.",
                "type": "DELETE",
                "lineNo": 34
              },
              {
                "line": "* <p>",
                "type": "DELETE",
                "lineNo": 35
              },
              {
                "line": "* This is just a mock to check that the parameters are properly set.",
                "type": "DELETE",
                "lineNo": 36
              }
            ],
            "targetChanges": [
              {
                "line": "* Test if a {@link java.net.http.HttpClient.Builder} can be created and has proper",
                "type": "ADD",
                "lineNo": 32
              },
              {
                "line": "* default values.",
                "type": "ADD",
                "lineNo": 33
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "public void testMockOpenConnection() {",
                "type": "DELETE",
                "lineNo": 39
              }
            ],
            "targetChanges": [
              {
                "line": "public void testClientBuilderDefaultValues() {",
                "type": "ADD",
                "lineNo": 36
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnectorTest.testMockOpenConnection()"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnectorTest.testClientBuilderDefaultValues()"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "settings.setTimeout(Duration.ofSeconds(50));",
                "type": "DELETE",
                "lineNo": 41
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout(Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout(Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofSeconds(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofSeconds(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '50'"
              }
            ],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "var conn = mock(HttpURLConnection.class);",
                "type": "DELETE",
                "lineNo": 43
              }
            ],
            "targetChanges": [
              {
                "line": "var connector = new HttpConnector(settings);",
                "type": "ADD",
                "lineNo": 39
              },
              {
                "line": "var client = connector.createClientBuilder().build();",
                "type": "ADD",
                "lineNo": 40
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "var conn"
              },
              {
                "type": "CtTypeReference",
                "value": "var"
              },
              {
                "type": "CtInvocation",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtExecutableReference",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.build()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.build()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var connector = new HttpConnector();",
                "type": "DELETE",
                "lineNo": 45
              },
              {
                "line": "connector.configure(conn, settings);",
                "type": "DELETE",
                "lineNo": 46
              },
              {
                "line": "verify(conn).setConnectTimeout(50000);",
                "type": "DELETE",
                "lineNo": 48
              },
              {
                "line": "verify(conn).setReadTimeout(50000);",
                "type": "DELETE",
                "lineNo": 49
              },
              {
                "line": "verify(conn).setUseCaches(false);",
                "type": "DELETE",
                "lineNo": 50
              },
              {
                "line": "verify(conn).setRequestProperty(\"User-Agent\", HttpConnector.defaultUserAgent());",
                "type": "DELETE",
                "lineNo": 51
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(client.connectTimeout().orElseThrow()).isEqualTo(settings.getTimeout());",
                "type": "ADD",
                "lineNo": 42
              },
              {
                "line": "assertThat(client.followRedirects()).isEqualTo(HttpClient.Redirect.NORMAL);",
                "type": "ADD",
                "lineNo": 43
              },
              {
                "line": "assertThat(client.authenticator()).isEmpty();",
                "type": "ADD",
                "lineNo": 44
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.configure(HttpURLConnection,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtInvocation",
                "value": "setConnectTimeout(int)"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "setConnectTimeout(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '50000'"
              },
              {
                "type": "CtInvocation",
                "value": "setReadTimeout(int)"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "setReadTimeout(int)"
              },
              {
                "type": "CtLiteral",
                "value": "int '50000'"
              },
              {
                "type": "CtInvocation",
                "value": "setUseCaches(boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "setUseCaches(boolean)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              },
              {
                "type": "CtInvocation",
                "value": "setRequestProperty(java.lang.String,java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "setRequestProperty(java.lang.String,java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'User-Agent'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.defaultUserAgent()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.defaultUserAgent()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.connectTimeout()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.connectTimeout()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getTimeout()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.followRedirects()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.followRedirects()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Redirect"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.authenticator()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.authenticator()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/HttpConnectorTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/HttpConnectorTest.java",
        "name": "org.shredzone.acme4j.connector.HttpConnectorTest.testOpenConnection()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Test if a HTTP connection can be opened.",
                "type": "DELETE",
                "lineNo": 55
              },
              {
                "line": "* <p>",
                "type": "DELETE",
                "lineNo": 56
              },
              {
                "line": "* This test requires a network connection. It should be excluded from automated",
                "type": "DELETE",
                "lineNo": 57
              },
              {
                "line": "* builds.",
                "type": "DELETE",
                "lineNo": 58
              }
            ],
            "targetChanges": [
              {
                "line": "* Test if a {@link java.net.http.HttpClient.Builder} can be created and if it is",
                "type": "ADD",
                "lineNo": 48
              },
              {
                "line": "* preconfigured properly.",
                "type": "ADD",
                "lineNo": 49
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Tag(\"requires-network\")",
                "type": "DELETE",
                "lineNo": 61
              },
              {
                "line": "public void testOpenConnection() throws IOException {",
                "type": "DELETE",
                "lineNo": 62
              }
            ],
            "targetChanges": [
              {
                "line": "public void testClientBuilder() {",
                "type": "ADD",
                "lineNo": 52
              },
              {
                "line": "var timeout = Duration.ofSeconds(50);",
                "type": "ADD",
                "lineNo": 53
              },
              {
                "line": "var authenticator = mock(Authenticator.class);",
                "type": "ADD",
                "lineNo": 54
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnectorTest.testOpenConnection()"
              },
              {
                "type": "CtAnnotation",
                "value": "org.junit.jupiter.api.Tag"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'requires-network'"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.HttpConnectorTest.testClientBuilder()"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.time.Duration timeout"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofSeconds(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofSeconds(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '50'"
              },
              {
                "type": "CtLocalVariable",
                "value": "var authenticator"
              },
              {
                "type": "CtTypeReference",
                "value": "var"
              },
              {
                "type": "CtInvocation",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtExecutableReference",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var connector = new HttpConnector();",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "var conn = connector.openConnection(new URL(\"http://example.com\"), settings);",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "assertThat(conn).isNotNull();",
                "type": "DELETE",
                "lineNo": 66
              },
              {
                "line": "conn.connect();",
                "type": "DELETE",
                "lineNo": 67
              },
              {
                "line": "assertThat(conn.getResponseCode()).isEqualTo(HttpURLConnection.HTTP_OK);",
                "type": "DELETE",
                "lineNo": 68
              }
            ],
            "targetChanges": [
              {
                "line": "settings.setTimeout(timeout);",
                "type": "ADD",
                "lineNo": 57
              },
              {
                "line": "settings.setAuthenticator(authenticator);",
                "type": "ADD",
                "lineNo": 58
              },
              {
                "line": "var connector = new HttpConnector(settings);",
                "type": "ADD",
                "lineNo": 60
              },
              {
                "line": "var client = connector.createClientBuilder().build();",
                "type": "ADD",
                "lineNo": 61
              },
              {
                "line": "assertThat(client.connectTimeout().orElseThrow()).isEqualTo(timeout);",
                "type": "ADD",
                "lineNo": 63
              },
              {
                "line": "assertThat(client.followRedirects()).isEqualTo(HttpClient.Redirect.NORMAL);",
                "type": "ADD",
                "lineNo": 64
              },
              {
                "line": "assertThat(client.authenticator().orElseThrow()).isSameAs(authenticator);",
                "type": "ADD",
                "lineNo": 65
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.openConnection(URL,NetworkSettings)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'http://example.com'"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.HttpURLConnection)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.HttpURLConnection)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URLConnection.connect()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(int)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(int)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(int)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.HttpURLConnection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.HttpURLConnection.getResponseCode()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(int)"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_OK"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_OK"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout(Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setTimeout(Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration timeout"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setAuthenticator(Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setAuthenticator(Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "var authenticator"
              },
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.HttpConnector.HttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.http.HttpClient"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient$Builder.build()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.HttpConnector connector"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector.createClientBuilder()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient$Builder.build()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.connectTimeout()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.connectTimeout()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration timeout"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.followRedirects()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.followRedirects()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.http.HttpClient$Redirect)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Redirect"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.http.HttpClient$Redirect NORMAL"
              },
              {
                "type": "CtInvocation",
                "value": "isSameAs(java.lang.Object)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.http.HttpClient.authenticator()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.http.HttpClient client"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.http.HttpClient.authenticator()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var authenticator"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
        "name": "org.shredzone.acme4j.connector.NetworkSettingsTest.testGettersAndSetters()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(settings.getProxy()).isEqualTo(Proxy.NO_PROXY);",
                "type": "DELETE",
                "lineNo": 37
              },
              {
                "line": "var proxy = new Proxy(Proxy.Type.HTTP, new InetSocketAddress(\"10.0.0.1\", 8080));",
                "type": "DELETE",
                "lineNo": 38
              },
              {
                "line": "settings.setProxy(proxy);",
                "type": "DELETE",
                "lineNo": 39
              },
              {
                "line": "assertThat(settings.getProxy()).isEqualTo(proxy);",
                "type": "DELETE",
                "lineNo": 40
              },
              {
                "line": "settings.setProxy(null);",
                "type": "DELETE",
                "lineNo": 41
              },
              {
                "line": "assertThat(settings.getProxy()).isEqualTo(Proxy.NO_PROXY);",
                "type": "DELETE",
                "lineNo": 42
              }
            ],
            "targetChanges": [
              {
                "line": "var proxyAddress = new InetSocketAddress(\"10.0.0.1\", 8080);",
                "type": "ADD",
                "lineNo": 41
              },
              {
                "line": "var proxySelector = ProxySelector.of(proxyAddress);",
                "type": "ADD",
                "lineNo": 42
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.Proxy NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.Proxy NO_PROXY"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.Proxy.Proxy(Type,SocketAddress)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.Proxy$Type HTTP"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.Proxy$Type"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.Proxy$Type HTTP"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.InetSocketAddress.InetSocketAddress(String,int)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.InetSocketAddress"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '10.0.0.1'"
              },
              {
                "type": "CtLiteral",
                "value": "int '8080'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Proxy proxy"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxy(Proxy)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Proxy)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxy()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.Proxy)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.Proxy NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.Proxy"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.Proxy NO_PROXY"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.InetSocketAddress proxyAddress"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.InetSocketAddress"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.InetSocketAddress.InetSocketAddress(String,int)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.InetSocketAddress"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '10.0.0.1'"
              },
              {
                "type": "CtLiteral",
                "value": "int '8080'"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.ProxySelector"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.ProxySelector.of(InetSocketAddress)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.ProxySelector"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.ProxySelector.of(InetSocketAddress)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.InetSocketAddress proxyAddress"
              }
            ]
          },
          {
            "targetChanges": [
              {
                "line": "assertThat(settings.getProxySelector()).isSameAs(HttpClient.Builder.NO_PROXY);",
                "type": "ADD",
                "lineNo": 44
              },
              {
                "line": "settings.setProxySelector(proxySelector);",
                "type": "ADD",
                "lineNo": 45
              },
              {
                "line": "assertThat(settings.getProxySelector()).isSameAs(proxySelector);",
                "type": "ADD",
                "lineNo": 46
              },
              {
                "line": "settings.setProxySelector(null);",
                "type": "ADD",
                "lineNo": 47
              },
              {
                "line": "assertThat(settings.getProxySelector()).isEqualTo(HttpClient.Builder.NO_PROXY);",
                "type": "ADD",
                "lineNo": 48
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isSameAs(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(java.net.ProxySelector)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.ProxySelector NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.ProxySelector NO_PROXY"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxySelector(ProxySelector)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxySelector(ProxySelector)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtInvocation",
                "value": "isSameAs(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(java.net.ProxySelector)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.ProxySelector proxySelector"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxySelector(ProxySelector)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setProxySelector(ProxySelector)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.ProxySelector)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getProxySelector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.ProxySelector)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.ProxySelector NO_PROXY"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.http.HttpClient$Builder"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.ProxySelector NO_PROXY"
              }
            ]
          },
          {
            "targetChanges": [
              {
                "line": "var defaultAuthenticator = Authenticator.getDefault();",
                "type": "ADD",
                "lineNo": 54
              },
              {
                "line": "assertThat(settings.getAuthenticator()).isNull();",
                "type": "ADD",
                "lineNo": 55
              },
              {
                "line": "settings.setAuthenticator(defaultAuthenticator);",
                "type": "ADD",
                "lineNo": 56
              },
              {
                "line": "assertThat(settings.getAuthenticator()).isSameAs(defaultAuthenticator);",
                "type": "ADD",
                "lineNo": 57
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.Authenticator defaultAuthenticator"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.Authenticator"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.Authenticator.getDefault()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.Authenticator"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.Authenticator.getDefault()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setAuthenticator(Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.setAuthenticator(Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Authenticator defaultAuthenticator"
              },
              {
                "type": "CtInvocation",
                "value": "isSameAs(java.net.Authenticator)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.Authenticator)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings.getAuthenticator()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(java.net.Authenticator)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.Authenticator defaultAuthenticator"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
        "name": "org.shredzone.acme4j.connector.NetworkSettingsTest.testInvalidTimeouts()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThrows(IllegalArgumentException.class,",
                "type": "DELETE",
                "lineNo": 62
              },
              {
                "line": "() -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),",
                "type": "DELETE",
                "lineNo": 63
              },
              {
                "line": "\"timeout accepted out of range value\");",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "assertThrows(java.lang.Class,java.lang.Object,java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThrows(java.lang.Class,java.lang.Object,java.lang.String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "setTimeout()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtLocalVariableReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "setTimeout()"
              },
              {
                "type": "CtInvocation",
                "value": "ofMillis()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "ofMillis()"
              },
              {
                "type": "CtVariableRead",
                "value": "<unknown> Integer.MAX_VALUE"
              },
              {
                "type": "CtLiteral",
                "value": "long '1'"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'timeout accepted out of range value'"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/SessionProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/SessionProviderTest.java",
        "name": "org.shredzone.acme4j.connector.SessionProviderTest$Provider1.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public Connection connect(URI serverUri) {",
                "type": "DELETE",
                "lineNo": 85
              }
            ],
            "targetChanges": [
              {
                "line": "public Connection connect(URI serverUri, NetworkSettings networkSettings) {",
                "type": "ADD",
                "lineNo": 85
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.SessionProviderTest$Provider1.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.SessionProviderTest$Provider1.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/SessionProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/SessionProviderTest.java",
        "name": "org.shredzone.acme4j.connector.SessionProviderTest$Provider2.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public Connection connect(URI serverUri) {",
                "type": "DELETE",
                "lineNo": 113
              }
            ],
            "targetChanges": [
              {
                "line": "public Connection connect(URI serverUri, NetworkSettings networkSettings) {",
                "type": "ADD",
                "lineNo": 113
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.SessionProviderTest$Provider2.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.SessionProviderTest$Provider2.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testConnect()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "protected HttpConnector createHttpConnector() {",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "targetChanges": [
              {
                "line": "protected HttpConnector createHttpConnector(NetworkSettings settings) {",
                "type": "ADD",
                "lineNo": 65
              },
              {
                "line": "assertThat(settings).isSameAs(NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1.createHttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtInvocation",
                "value": "isSameAs(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings NETWORK_SETTINGS"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "return super.createHttpConnector();",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "return super.createHttpConnector(settings);",
                "type": "ADD",
                "lineNo": 68
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var connection = provider.connect(SERVER_URI);",
                "type": "DELETE",
                "lineNo": 70
              }
            ],
            "targetChanges": [
              {
                "line": "var connection = provider.connect(SERVER_URI, NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 72
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1 provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URI SERVER_URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1 provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URI SERVER_URI"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings NETWORK_SETTINGS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testResourcesCacheControl()",
        "hunks": [
          {
            "targetChanges": [
              {
                "line": "verify(session).networkSettings();",
                "type": "ADD",
                "lineNo": 128
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var session"
              },
              {
                "type": "CtExecutableReference",
                "value": "networkSettings()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testResourcesExprired()",
        "hunks": [
          {
            "targetChanges": [
              {
                "line": "verify(session).networkSettings();",
                "type": "ADD",
                "lineNo": 188
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var session"
              },
              {
                "type": "CtExecutableReference",
                "value": "networkSettings()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testResourcesIfModifiedSince()",
        "hunks": [
          {
            "targetChanges": [
              {
                "line": "verify(session).networkSettings();",
                "type": "ADD",
                "lineNo": 222
              }
            ],
            "type": "ADD",
            "sourceElements": [],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "networkSettings()"
              },
              {
                "type": "CtInvocation",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "verify(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var session"
              },
              {
                "type": "CtExecutableReference",
                "value": "networkSettings()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1.createHttpConnector()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "protected HttpConnector createHttpConnector() {",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "targetChanges": [
              {
                "line": "protected HttpConnector createHttpConnector(NetworkSettings settings) {",
                "type": "ADD",
                "lineNo": 65
              },
              {
                "line": "assertThat(settings).isSameAs(NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1.createHttpConnector()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$1.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.HttpConnector"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              },
              {
                "type": "CtInvocation",
                "value": "isSameAs(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              },
              {
                "type": "CtExecutableReference",
                "value": "isSameAs(org.shredzone.acme4j.connector.NetworkSettings)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings NETWORK_SETTINGS"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "return super.createHttpConnector();",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "return super.createHttpConnector(settings);",
                "type": "ADD",
                "lineNo": 68
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.createHttpConnector(NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings settings"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testResourcesHttpError()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "/**",
                "type": "DELETE",
                "lineNo": 225
              },
              {
                "line": "* Verify that HTTP errors are handled correctly.",
                "type": "DELETE",
                "lineNo": 226
              },
              {
                "line": "*/",
                "type": "DELETE",
                "lineNo": 227
              },
              {
                "line": "@Test",
                "type": "DELETE",
                "lineNo": 228
              },
              {
                "line": "public void testResourcesHttpError() throws IOException {",
                "type": "DELETE",
                "lineNo": 229
              },
              {
                "line": "var conn = mock(HttpURLConnection.class);",
                "type": "DELETE",
                "lineNo": 230
              },
              {
                "line": "var connector = mock(HttpConnector.class);",
                "type": "DELETE",
                "lineNo": 231
              },
              {
                "line": "var connection = new DefaultConnection(connector);",
                "type": "DELETE",
                "lineNo": 232
              },
              {
                "line": "when(connector.openConnection(any(), any())).thenReturn(conn);",
                "type": "DELETE",
                "lineNo": 234
              },
              {
                "line": "when(conn.getResponseCode()).thenReturn(HttpURLConnection.HTTP_INTERNAL_ERROR);",
                "type": "DELETE",
                "lineNo": 235
              },
              {
                "line": "when(conn.getResponseMessage()).thenReturn(\"Internal error\");",
                "type": "DELETE",
                "lineNo": 236
              },
              {
                "line": "var provider = new TestAbstractAcmeProvider(connection);",
                "type": "DELETE",
                "lineNo": 238
              },
              {
                "line": "var session = TestUtils.session(provider);",
                "type": "DELETE",
                "lineNo": 239
              },
              {
                "line": "assertThrows(AcmeException.class, () -> provider.directory(session, SERVER_URI));",
                "type": "DELETE",
                "lineNo": 241
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 242
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest.testResourcesHttpError()"
              },
              {
                "type": "CtAnnotation",
                "value": "org.junit.jupiter.api.Test"
              },
              {
                "type": "CtTypeReference",
                "value": "void"
              },
              {
                "type": "CtTypeReference",
                "value": "java.io.IOException"
              },
              {
                "type": "CtLocalVariable",
                "value": "var conn"
              },
              {
                "type": "CtTypeReference",
                "value": "var"
              },
              {
                "type": "CtInvocation",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtExecutableReference",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtLocalVariable",
                "value": "var connector"
              },
              {
                "type": "CtTypeReference",
                "value": "var"
              },
              {
                "type": "CtInvocation",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtExecutableReference",
                "value": "mock(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.DefaultConnection connection"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.DefaultConnection(HttpConnector)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection"
              },
              {
                "type": "CtVariableRead",
                "value": "var connector"
              },
              {
                "type": "CtInvocation",
                "value": "thenReturn(java.lang.Object)"
              },
              {
                "type": "CtInvocation",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "openConnection()"
              },
              {
                "type": "CtVariableRead",
                "value": "var connector"
              },
              {
                "type": "CtExecutableReference",
                "value": "openConnection()"
              },
              {
                "type": "CtInvocation",
                "value": "any()"
              },
              {
                "type": "CtExecutableReference",
                "value": "any()"
              },
              {
                "type": "CtInvocation",
                "value": "any()"
              },
              {
                "type": "CtExecutableReference",
                "value": "any()"
              },
              {
                "type": "CtExecutableReference",
                "value": "thenReturn(java.lang.Object)"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtInvocation",
                "value": "thenReturn(int)"
              },
              {
                "type": "CtInvocation",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getResponseCode()"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "getResponseCode()"
              },
              {
                "type": "CtExecutableReference",
                "value": "thenReturn(int)"
              },
              {
                "type": "CtFieldRead",
                "value": "int HTTP_INTERNAL_ERROR"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.HttpURLConnection"
              },
              {
                "type": "CtFieldReference",
                "value": "int HTTP_INTERNAL_ERROR"
              },
              {
                "type": "CtInvocation",
                "value": "thenReturn(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "when(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getResponseMessage()"
              },
              {
                "type": "CtVariableRead",
                "value": "var conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "getResponseMessage()"
              },
              {
                "type": "CtExecutableReference",
                "value": "thenReturn(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Internal error'"
              },
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider provider"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.TestAbstractAcmeProvider(Connection)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.DefaultConnection connection"
              },
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Session"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.session(AcmeProvider)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.TestUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.session(AcmeProvider)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider provider"
              },
              {
                "type": "CtInvocation",
                "value": "assertThrows(java.lang.Class,java.lang.Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThrows(java.lang.Class,java.lang.Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "directory()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider provider"
              },
              {
                "type": "CtLocalVariableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider provider"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider"
              },
              {
                "type": "CtExecutableReference",
                "value": "directory()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtLocalVariableReference",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Session"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URI SERVER_URI"
              },
              {
                "type": "CtFieldReference",
                "value": "java.net.URI SERVER_URI"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/AbstractAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public Connection connect(URI serverUri) {",
                "type": "DELETE",
                "lineNo": 319
              }
            ],
            "targetChanges": [
              {
                "line": "public Connection connect(URI serverUri, NetworkSettings networkSettings) {",
                "type": "ADD",
                "lineNo": 305
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProviderTest$TestAbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "return connection != null ? connection : super.connect(serverUri);",
                "type": "DELETE",
                "lineNo": 321
              }
            ],
            "targetChanges": [
              {
                "line": "return connection != null ? connection : super.connect(serverUri, networkSettings);",
                "type": "ADD",
                "lineNo": 307
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              }
            ],
            "targetElements": [
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/GenericAcmeProviderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/GenericAcmeProviderTest.java",
        "name": "org.shredzone.acme4j.provider.GenericAcmeProviderTest.testResolve()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var connection = provider.connect(serverUri);",
                "type": "DELETE",
                "lineNo": 53
              }
            ],
            "targetChanges": [
              {
                "line": "var connection = provider.connect(serverUri, DEFAULT_NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 54
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.GenericAcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.connector.Connection connection"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.GenericAcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AbstractAcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings DEFAULT_NETWORK_SETTINGS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/TestableConnectionProvider.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/provider/TestableConnectionProvider.java",
        "name": "org.shredzone.acme4j.provider.TestableConnectionProvider.connect(URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public Connection connect(URI serverUri) {",
                "type": "DELETE",
                "lineNo": 122
              }
            ],
            "targetChanges": [
              {
                "line": "public Connection connect(URI serverUri, NetworkSettings networkSettings) {",
                "type": "ADD",
                "lineNo": 123
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.TestableConnectionProvider.connect(URI)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.provider.TestableConnectionProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.Connection"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI serverUri"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.connector.NetworkSettings networkSettings"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.connector.NetworkSettings"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "name": "org.shredzone.acme4j.toolbox.TestUtils.session(AcmeProvider)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "return provider.connect(getServerUri());",
                "type": "DELETE",
                "lineNo": 164
              }
            ],
            "targetChanges": [
              {
                "line": "return provider.connect(getServerUri(), DEFAULT_NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 166
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings DEFAULT_NETWORK_SETTINGS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "name": "org.shredzone.acme4j.toolbox.TestUtils$1.connect()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "return provider.connect(getServerUri());",
                "type": "DELETE",
                "lineNo": 164
              }
            ],
            "targetChanges": [
              {
                "line": "return provider.connect(getServerUri(), DEFAULT_NETWORK_SETTINGS);",
                "type": "ADD",
                "lineNo": 166
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.provider.AcmeProvider provider"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.provider.AcmeProvider.connect(URI,NetworkSettings)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getServerUri()"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.connector.NetworkSettings DEFAULT_NETWORK_SETTINGS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.orderCertificate(String,Validator,Revoker)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getMessage()).isEqualTo(\"HTTP 404: Not Found\");",
                "type": "DELETE",
                "lineNo": 223
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getMessage()).isEqualTo(\"HTTP 404\");",
                "type": "ADD",
                "lineNo": 223
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getMessage()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getMessage()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP 404: Not Found'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getMessage()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getMessage()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'HTTP 404'"
              }
            ]
          }
        ],
        "is_test_source": true
      }
    ]
  },
  {
    "bCommit": "18e56c9",
    "aCommit": "1907545",
    "changes": [
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "name": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "*         {@code null} if the server did not provide such an information.",
                "type": "DELETE",
                "lineNo": 60
              }
            ],
            "targetChanges": [
              {
                "line": "*         empty if the server did not provide such an information.",
                "type": "ADD",
                "lineNo": 60
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 62
              },
              {
                "line": "public Boolean getTermsOfServiceAgreed() {",
                "type": "DELETE",
                "lineNo": 63
              },
              {
                "line": "return getJSON().get(KEY_TOS_AGREED).map(Value::asBoolean).orElse(null);",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Boolean> getTermsOfServiceAgreed() {",
                "type": "ADD",
                "lineNo": 62
              },
              {
                "line": "return getJSON().get(KEY_TOS_AGREED).map(Value::asBoolean);",
                "type": "ADD",
                "lineNo": 63
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.Boolean"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_TOS_AGREED"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.Boolean"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_TOS_AGREED"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "name": "org.shredzone.acme4j.Account.getKeyIdentifier()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* not bound to an external account, {@code null} is returned instead.",
                "type": "DELETE",
                "lineNo": 101
              }
            ],
            "targetChanges": [
              {
                "line": "* not bound to an external account, the result is empty.",
                "type": "ADD",
                "lineNo": 101
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 105
              },
              {
                "line": "public String getKeyIdentifier() {",
                "type": "DELETE",
                "lineNo": 106
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<String> getKeyIdentifier() {",
                "type": "ADD",
                "lineNo": 105
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(j -> j.get(\"kid\")).map(Value::asString)",
                "type": "DELETE",
                "lineNo": 110
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 111
              }
            ],
            "targetChanges": [
              {
                "line": ".map(j -> j.get(\"kid\")).map(Value::asString);",
                "type": "ADD",
                "lineNo": 109
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'kid'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'kid'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Account.java",
        "name": "org.shredzone.acme4j.Account.preAuthorize(Identifier)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var authLocation = conn.getLocation();",
                "type": "DELETE",
                "lineNo": 200
              },
              {
                "line": "if (authLocation == null) {",
                "type": "DELETE",
                "lineNo": 201
              },
              {
                "line": "throw new AcmeProtocolException(\"Server did not provide an authorization location\");",
                "type": "DELETE",
                "lineNo": 202
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 203
              }
            ],
            "targetChanges": [
              {
                "line": "var authLocation = conn.getLocation()",
                "type": "ADD",
                "lineNo": 198
              },
              {
                "line": ".orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an authorization location\"));",
                "type": "ADD",
                "lineNo": 199
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL authLocation"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL authLocation"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an authorization location'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL authLocation"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an authorization location'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
        "name": "org.shredzone.acme4j.AccountBuilder.createLogin(Session)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var location = conn.getLocation();",
                "type": "DELETE",
                "lineNo": 264
              },
              {
                "line": "if (location == null) {",
                "type": "DELETE",
                "lineNo": 265
              },
              {
                "line": "throw new AcmeProtocolException(\"Server did not provide an account location\");",
                "type": "DELETE",
                "lineNo": 266
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 267
              }
            ],
            "targetChanges": [
              {
                "line": "var location = conn.getLocation()",
                "type": "ADD",
                "lineNo": 264
              },
              {
                "line": ".orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));",
                "type": "ADD",
                "lineNo": 265
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL location"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL location"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an account location'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL location"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an account location'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "name": "org.shredzone.acme4j.Authorization.getExpires()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 70
              },
              {
                "line": "public Instant getExpires() {",
                "type": "DELETE",
                "lineNo": 71
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getExpires() {",
                "type": "ADD",
                "lineNo": 70
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(AcmeUtils::parseTimestamp)",
                "type": "DELETE",
                "lineNo": 74
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 75
              }
            ],
            "targetChanges": [
              {
                "line": ".map(AcmeUtils::parseTimestamp);",
                "type": "ADD",
                "lineNo": 73
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.parseTimestamp(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.parseTimestamp(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.parseTimestamp(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.parseTimestamp(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "name": "org.shredzone.acme4j.Authorization.findChallenge(String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* @return {@link Challenge} matching that name, or {@code null} if there is no such",
                "type": "DELETE",
                "lineNo": 111
              }
            ],
            "targetChanges": [
              {
                "line": "* @return {@link Challenge} matching that name, or empty if there is no such",
                "type": "ADD",
                "lineNo": 109
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 116
              },
              {
                "line": "public <T extends Challenge> T findChallenge(final String type) {",
                "type": "DELETE",
                "lineNo": 117
              },
              {
                "line": "return (T) getChallenges().stream()",
                "type": "DELETE",
                "lineNo": 118
              }
            ],
            "targetChanges": [
              {
                "line": "@SuppressWarnings(\"unchecked\")",
                "type": "ADD",
                "lineNo": 114
              },
              {
                "line": "public <T extends Challenge> Optional<T> findChallenge(final String type) {",
                "type": "ADD",
                "lineNo": 115
              },
              {
                "line": "return (Optional<T>) getChallenges().stream()",
                "type": "ADD",
                "lineNo": 116
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Challenge"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getChallenges()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getChallenges()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collection.stream()"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtAnnotation",
                "value": "java.lang.SuppressWarnings"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'unchecked'"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.stream.Stream.filter(Predicate)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collection.stream()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getChallenges()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getChallenges()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collection.stream()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".reduce((a, b) -> {throw new AcmeProtocolException(\"Found more than one challenge of type \" + type);})",
                "type": "DELETE",
                "lineNo": 120
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 121
              }
            ],
            "targetChanges": [
              {
                "line": ".reduce((a, b) -> {",
                "type": "ADD",
                "lineNo": 118
              },
              {
                "line": "throw new AcmeProtocolException(\"Found more than one challenge of type \" + type);",
                "type": "ADD",
                "lineNo": 119
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 120
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.challenge.Challenge a"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.challenge.Challenge b"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found more than one challenge of type '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String type"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.challenge.Challenge a"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.challenge.Challenge b"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found more than one challenge of type '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String type"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
        "name": "org.shredzone.acme4j.Authorization.findChallenge(Class)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* @return {@link Challenge} of that type, or {@code null} if there is no such",
                "type": "DELETE",
                "lineNo": 130
              }
            ],
            "targetChanges": [
              {
                "line": "* @return {@link Challenge} of that type, or empty if there is no such",
                "type": "ADD",
                "lineNo": 129
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 134
              },
              {
                "line": "public <T extends Challenge> T findChallenge(Class<T> type) {",
                "type": "DELETE",
                "lineNo": 135
              }
            ],
            "targetChanges": [
              {
                "line": "public <T extends Challenge> Optional<T> findChallenge(Class<T> type) {",
                "type": "ADD",
                "lineNo": 133
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Challenge"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.Class type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.Class"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.Class type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.Class"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".reduce((a, b) -> {throw new AcmeProtocolException(\"Found more than one challenge of type \" + type.getName());})",
                "type": "DELETE",
                "lineNo": 139
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 140
              }
            ],
            "targetChanges": [
              {
                "line": ".reduce((a, b) -> {",
                "type": "ADD",
                "lineNo": 137
              },
              {
                "line": "throw new AcmeProtocolException(\"Found more than one challenge of type \" + type.getName());",
                "type": "ADD",
                "lineNo": 138
              },
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 139
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtParameter",
                "value": "null a"
              },
              {
                "type": "CtParameter",
                "value": "null b"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found more than one challenge of type '"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Class.getName()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Class type"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Class.getName()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.stream.Stream.reduce(BinaryOperator)"
              },
              {
                "type": "CtParameter",
                "value": "null a"
              },
              {
                "type": "CtParameter",
                "value": "null b"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found more than one challenge of type '"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.Class.getName()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.Class type"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Class.getName()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "name": "org.shredzone.acme4j.Metadata.getTermsOfService()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns an {@link URI} of the current terms of service, or {@code null} if not",
                "type": "DELETE",
                "lineNo": 45
              },
              {
                "line": "* available.",
                "type": "DELETE",
                "lineNo": 46
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns an {@link URI} of the current terms of service, or empty if not available.",
                "type": "ADD",
                "lineNo": 45
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 48
              },
              {
                "line": "public URI getTermsOfService() {",
                "type": "DELETE",
                "lineNo": 49
              },
              {
                "line": "return meta.get(\"termsOfService\").map(Value::asURI).orElse(null);",
                "type": "DELETE",
                "lineNo": 50
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URI> getTermsOfService() {",
                "type": "ADD",
                "lineNo": 47
              },
              {
                "line": "return meta.get(\"termsOfService\").map(Value::asURI);",
                "type": "ADD",
                "lineNo": 48
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'termsOfService'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURI()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURI()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'termsOfService'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURI()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURI()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "name": "org.shredzone.acme4j.Metadata.getWebsite()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* server. {@code null} if not available.",
                "type": "DELETE",
                "lineNo": 55
              }
            ],
            "targetChanges": [
              {
                "line": "* server. Empty if not available.",
                "type": "ADD",
                "lineNo": 53
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 57
              },
              {
                "line": "public URL getWebsite() {",
                "type": "DELETE",
                "lineNo": 58
              },
              {
                "line": "return meta.get(\"website\").map(Value::asURL).orElse(null);",
                "type": "DELETE",
                "lineNo": 59
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getWebsite() {",
                "type": "ADD",
                "lineNo": 55
              },
              {
                "line": "return meta.get(\"website\").map(Value::asURL);",
                "type": "ADD",
                "lineNo": 56
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'website'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'website'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asURL()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "name": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* before auto-renewal. {@code null} if the CA does not support short-term",
                "type": "DELETE",
                "lineNo": 92
              },
              {
                "line": "* auto-renewal.",
                "type": "DELETE",
                "lineNo": 93
              }
            ],
            "targetChanges": [
              {
                "line": "* before auto-renewal. Empty if the CA does not support short-term auto-renewal.",
                "type": "ADD",
                "lineNo": 89
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 97
              },
              {
                "line": "public Duration getAutoRenewalMinLifetime() {",
                "type": "DELETE",
                "lineNo": 98
              },
              {
                "line": "var ar = meta.get(\"auto-renewal\").optional().map(Value::asObject);",
                "type": "DELETE",
                "lineNo": 99
              },
              {
                "line": "if (ar.isEmpty()) {",
                "type": "DELETE",
                "lineNo": 100
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 101
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 102
              },
              {
                "line": "return ar.get().get(\"min-lifetime\").map(Value::asDuration).orElse(null);",
                "type": "DELETE",
                "lineNo": 103
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Duration> getAutoRenewalMinLifetime() {",
                "type": "ADD",
                "lineNo": 93
              },
              {
                "line": "return meta.get(\"auto-renewal\").optional().map(Value::asObject)",
                "type": "ADD",
                "lineNo": 94
              },
              {
                "line": ".map(j -> j.get(\"min-lifetime\"))",
                "type": "ADD",
                "lineNo": 95
              },
              {
                "line": ".map(Value::asDuration);",
                "type": "ADD",
                "lineNo": 96
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'min-lifetime'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'min-lifetime'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "name": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* date. {@code null} if the CA does not support short-term auto-renewal.",
                "type": "DELETE",
                "lineNo": 108
              }
            ],
            "targetChanges": [
              {
                "line": "* date.",
                "type": "ADD",
                "lineNo": 101
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 112
              },
              {
                "line": "public Duration getAutoRenewalMaxDuration() {",
                "type": "DELETE",
                "lineNo": 113
              },
              {
                "line": "var ar = meta.get(\"auto-renewal\").optional().map(Value::asObject);",
                "type": "DELETE",
                "lineNo": 114
              },
              {
                "line": "if (ar.isEmpty()) {",
                "type": "DELETE",
                "lineNo": 115
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 116
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 117
              },
              {
                "line": "return ar.get().get(\"max-duration\").map(Value::asDuration).orElse(null);",
                "type": "DELETE",
                "lineNo": 118
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Duration> getAutoRenewalMaxDuration() {",
                "type": "ADD",
                "lineNo": 105
              },
              {
                "line": "return meta.get(\"auto-renewal\").optional().map(Value::asObject)",
                "type": "ADD",
                "lineNo": 106
              },
              {
                "line": ".map(j -> j.get(\"max-duration\"))",
                "type": "ADD",
                "lineNo": 107
              },
              {
                "line": ".map(Value::asDuration);",
                "type": "ADD",
                "lineNo": 108
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'max-duration'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'max-duration'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Metadata.java",
        "name": "org.shredzone.acme4j.Metadata.isAutoRenewalGetAllowed()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var ar = meta.get(\"auto-renewal\").optional().map(Value::asObject);",
                "type": "DELETE",
                "lineNo": 127
              },
              {
                "line": "if (ar.isEmpty()) {",
                "type": "DELETE",
                "lineNo": 128
              },
              {
                "line": "return false;",
                "type": "DELETE",
                "lineNo": 129
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 130
              },
              {
                "line": "return ar.get().get(\"allow-certificate-get\").map(Value::asBoolean).orElse(false);",
                "type": "DELETE",
                "lineNo": 131
              }
            ],
            "targetChanges": [
              {
                "line": "return meta.get(\"auto-renewal\").optional().map(Value::asObject)",
                "type": "ADD",
                "lineNo": 117
              },
              {
                "line": ".map(j -> j.get(\"allow-certificate-get\"))",
                "type": "ADD",
                "lineNo": 118
              },
              {
                "line": ".map(Value::asBoolean)",
                "type": "ADD",
                "lineNo": 119
              },
              {
                "line": ".orElse(false);",
                "type": "ADD",
                "lineNo": 120
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional ar"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'allow-certificate-get'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'auto-renewal'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.optional()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asObject()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON j"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'allow-certificate-get'"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asBoolean()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "boolean 'false'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getError()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 55
              },
              {
                "line": "public Problem getError() {",
                "type": "DELETE",
                "lineNo": 56
              },
              {
                "line": "return getJSON().get(\"error\").map(v -> v.asProblem(getLocation())).orElse(null);",
                "type": "DELETE",
                "lineNo": 57
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Problem> getError() {",
                "type": "ADD",
                "lineNo": 55
              },
              {
                "line": "return getJSON().get(\"error\").map(v -> v.asProblem(getLocation()));",
                "type": "ADD",
                "lineNo": 56
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'error'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value v"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value v"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'error'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value v"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value v"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getExpires()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the expiry date of the authorization, if set by the server, {@code null}",
                "type": "DELETE",
                "lineNo": 61
              },
              {
                "line": "* otherwise.",
                "type": "DELETE",
                "lineNo": 62
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the expiry date of the authorization, if set by the server.",
                "type": "ADD",
                "lineNo": 60
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "public Instant getExpires() {",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "return getJSON().get(\"expires\").map(Value::asInstant).orElse(null);",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getExpires() {",
                "type": "ADD",
                "lineNo": 62
              },
              {
                "line": "return getJSON().get(\"expires\").map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 63
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'expires'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'expires'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getNotBefore()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the \"not before\" date that was used for the order, or {@code null}.",
                "type": "DELETE",
                "lineNo": 83
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the \"not before\" date that was used for the order.",
                "type": "ADD",
                "lineNo": 80
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 85
              },
              {
                "line": "public Instant getNotBefore() {",
                "type": "DELETE",
                "lineNo": 86
              },
              {
                "line": "return getJSON().get(\"notBefore\").map(Value::asInstant).orElse(null);",
                "type": "DELETE",
                "lineNo": 87
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getNotBefore() {",
                "type": "ADD",
                "lineNo": 82
              },
              {
                "line": "return getJSON().get(\"notBefore\").map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 83
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'notBefore'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'notBefore'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getNotAfter()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the \"not after\" date that was used for the order, or {@code null}.",
                "type": "DELETE",
                "lineNo": 91
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the \"not after\" date that was used for the order.",
                "type": "ADD",
                "lineNo": 87
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 93
              },
              {
                "line": "public Instant getNotAfter() {",
                "type": "DELETE",
                "lineNo": 94
              },
              {
                "line": "return getJSON().get(\"notAfter\").map(Value::asInstant).orElse(null);",
                "type": "DELETE",
                "lineNo": 95
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getNotAfter() {",
                "type": "ADD",
                "lineNo": 89
              },
              {
                "line": "return getJSON().get(\"notAfter\").map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 90
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'notAfter'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'notAfter'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getCertificate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the {@link Certificate} if it is available. {@code null} otherwise.",
                "type": "DELETE",
                "lineNo": 122
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the {@link Certificate} if it is available.",
                "type": "ADD",
                "lineNo": 117
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 124
              },
              {
                "line": "public Certificate getCertificate() {",
                "type": "DELETE",
                "lineNo": 125
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Certificate> getCertificate() {",
                "type": "ADD",
                "lineNo": 119
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(getLogin()::bindCertificate)",
                "type": "DELETE",
                "lineNo": 128
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 129
              }
            ],
            "targetChanges": [
              {
                "line": ".map(getLogin()::bindCertificate);",
                "type": "ADD",
                "lineNo": 122
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Gets the STAR extension's {@link Certificate} if it is available. {@code null}",
                "type": "DELETE",
                "lineNo": 133
              },
              {
                "line": "* otherwise.",
                "type": "DELETE",
                "lineNo": 134
              }
            ],
            "targetChanges": [
              {
                "line": "* Gets the STAR extension's {@link Certificate} if it is available.",
                "type": "ADD",
                "lineNo": 126
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 138
              },
              {
                "line": "public Certificate getAutoRenewalCertificate() {",
                "type": "DELETE",
                "lineNo": 139
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Certificate> getAutoRenewalCertificate() {",
                "type": "ADD",
                "lineNo": 130
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(getLogin()::bindCertificate)",
                "type": "DELETE",
                "lineNo": 142
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 143
              }
            ],
            "targetChanges": [
              {
                "line": ".map(getLogin()::bindCertificate);",
                "type": "ADD",
                "lineNo": 133
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Login.bindCertificate(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLogin()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the earliest date of validity of the first certificate issued, or",
                "type": "DELETE",
                "lineNo": 183
              },
              {
                "line": "* {@code null}.",
                "type": "DELETE",
                "lineNo": 184
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the earliest date of validity of the first certificate issued.",
                "type": "ADD",
                "lineNo": 173
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 188
              },
              {
                "line": "public Instant getAutoRenewalStartDate() {",
                "type": "DELETE",
                "lineNo": 189
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getAutoRenewalStartDate() {",
                "type": "ADD",
                "lineNo": 177
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asInstant)",
                "type": "DELETE",
                "lineNo": 196
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 197
              }
            ],
            "targetChanges": [
              {
                "line": ".map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 184
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the latest date of validity of the last certificate issued, or",
                "type": "DELETE",
                "lineNo": 201
              },
              {
                "line": "* {@code null}.",
                "type": "DELETE",
                "lineNo": 202
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the latest date of validity of the last certificate issued.",
                "type": "ADD",
                "lineNo": 188
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 206
              },
              {
                "line": "public Instant getAutoRenewalEndDate() {",
                "type": "DELETE",
                "lineNo": 207
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getAutoRenewalEndDate() {",
                "type": "ADD",
                "lineNo": 192
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asInstant)",
                "type": "DELETE",
                "lineNo": 214
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 215
              }
            ],
            "targetChanges": [
              {
                "line": ".map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 199
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the maximum lifetime of each certificate, or {@code null}.",
                "type": "DELETE",
                "lineNo": 219
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the maximum lifetime of each certificate.",
                "type": "ADD",
                "lineNo": 203
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 223
              },
              {
                "line": "public Duration getAutoRenewalLifetime() {",
                "type": "DELETE",
                "lineNo": 224
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Duration> getAutoRenewalLifetime() {",
                "type": "ADD",
                "lineNo": 207
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asDuration)",
                "type": "DELETE",
                "lineNo": 231
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 232
              }
            ],
            "targetChanges": [
              {
                "line": ".map(Value::asDuration);",
                "type": "ADD",
                "lineNo": 214
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
        "name": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the pre-date period of each certificate, or {@code null}.",
                "type": "DELETE",
                "lineNo": 236
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the pre-date period of each certificate.",
                "type": "ADD",
                "lineNo": 218
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 240
              },
              {
                "line": "public Duration getAutoRenewalLifetimeAdjust() {",
                "type": "DELETE",
                "lineNo": 241
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Duration> getAutoRenewalLifetimeAdjust() {",
                "type": "ADD",
                "lineNo": 222
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Duration"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asDuration)",
                "type": "DELETE",
                "lineNo": 248
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 249
              }
            ],
            "targetChanges": [
              {
                "line": ".map(Value::asDuration);",
                "type": "ADD",
                "lineNo": 229
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asDuration()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java",
        "name": "org.shredzone.acme4j.OrderBuilder.create()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var orderLocation = conn.getLocation();",
                "type": "DELETE",
                "lineNo": 317
              },
              {
                "line": "if (orderLocation == null) {",
                "type": "DELETE",
                "lineNo": 318
              },
              {
                "line": "throw new AcmeProtocolException(\"Server did not provide an order location\");",
                "type": "DELETE",
                "lineNo": 319
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 320
              }
            ],
            "targetChanges": [
              {
                "line": "var orderLocation = conn.getLocation()",
                "type": "ADD",
                "lineNo": 317
              },
              {
                "line": ".orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an order location\"));",
                "type": "ADD",
                "lineNo": 318
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL orderLocation"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL orderLocation"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an order location'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URL orderLocation"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide an order location'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "name": "org.shredzone.acme4j.Problem.getTitle()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* if supported by the server. {@code null} if the server did not provide a title.",
                "type": "DELETE",
                "lineNo": 72
              }
            ],
            "targetChanges": [
              {
                "line": "* if supported by the server. Empty if the server did not provide a title.",
                "type": "ADD",
                "lineNo": 72
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 76
              },
              {
                "line": "public String getTitle() {",
                "type": "DELETE",
                "lineNo": 77
              },
              {
                "line": "return problemJson.get(\"title\").map(Value::asString).orElse(null);",
                "type": "DELETE",
                "lineNo": 78
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<String> getTitle() {",
                "type": "ADD",
                "lineNo": 76
              },
              {
                "line": "return problemJson.get(\"title\").map(Value::asString);",
                "type": "ADD",
                "lineNo": 77
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON problemJson"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'title'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON problemJson"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'title'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "name": "org.shredzone.acme4j.Problem.getDetail()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 87
              },
              {
                "line": "public String getDetail() {",
                "type": "DELETE",
                "lineNo": 88
              },
              {
                "line": "return problemJson.get(\"detail\").map(Value::asString).orElse(null);",
                "type": "DELETE",
                "lineNo": 89
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<String> getDetail() {",
                "type": "ADD",
                "lineNo": 86
              },
              {
                "line": "return problemJson.get(\"detail\").map(Value::asString);",
                "type": "ADD",
                "lineNo": 87
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON problemJson"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'detail'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.shredzone.acme4j.toolbox.JSON problemJson"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'detail'"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "name": "org.shredzone.acme4j.Problem.getInstance()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 96
              },
              {
                "line": "public URI getInstance() {",
                "type": "DELETE",
                "lineNo": 97
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URI> getInstance() {",
                "type": "ADD",
                "lineNo": 94
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "})",
                "type": "DELETE",
                "lineNo": 106
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 107
              }
            ],
            "targetChanges": [
              {
                "line": "});",
                "type": "ADD",
                "lineNo": 103
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "name": "org.shredzone.acme4j.Problem.getIdentifier()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the {@link Identifier} this problem relates to. May be {@code null}.",
                "type": "DELETE",
                "lineNo": 111
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the {@link Identifier} this problem relates to.",
                "type": "ADD",
                "lineNo": 107
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 115
              },
              {
                "line": "public Identifier getIdentifier() {",
                "type": "DELETE",
                "lineNo": 116
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Identifier> getIdentifier() {",
                "type": "ADD",
                "lineNo": 111
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Identifier"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Identifier"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(Value::asIdentifier)",
                "type": "DELETE",
                "lineNo": 119
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 120
              }
            ],
            "targetChanges": [
              {
                "line": ".map(Value::asIdentifier);",
                "type": "ADD",
                "lineNo": 114
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asIdentifier()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asIdentifier()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
        "name": "org.shredzone.acme4j.Problem.toString()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "if (getDetail() != null) {",
                "type": "DELETE",
                "lineNo": 156
              },
              {
                "line": "sb.append(getDetail());",
                "type": "DELETE",
                "lineNo": 157
              },
              {
                "line": "} else if (getTitle() != null) {",
                "type": "DELETE",
                "lineNo": 158
              },
              {
                "line": "sb.append(getTitle());",
                "type": "DELETE",
                "lineNo": 159
              }
            ],
            "targetChanges": [
              {
                "line": "if (getDetail().isPresent()) {",
                "type": "ADD",
                "lineNo": 150
              },
              {
                "line": "sb.append(getDetail().get());",
                "type": "ADD",
                "lineNo": 151
              },
              {
                "line": "} else if (getTitle().isPresent()) {",
                "type": "ADD",
                "lineNo": 152
              },
              {
                "line": "sb.append(getTitle().get());",
                "type": "ADD",
                "lineNo": 153
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.StringBuilder sb"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.StringBuilder sb"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.StringBuilder sb"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtInvocation",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.StringBuilder sb"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.StringBuilder.append(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/RevocationReason.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/RevocationReason.java",
        "name": "org.shredzone.acme4j.RevocationReason.code(int)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* @return Matching {@link RevocationReason}, or {@code null} if not known",
                "type": "DELETE",
                "lineNo": 57
              }
            ],
            "targetChanges": [
              {
                "line": "* @return Matching {@link RevocationReason}",
                "type": "ADD",
                "lineNo": 55
              },
              {
                "line": "* @throws IllegalArgumentException if the reason code is unknown or invalid",
                "type": "ADD",
                "lineNo": 56
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 59
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              }
            ],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 64
              }
            ],
            "targetChanges": [
              {
                "line": ".orElseThrow(() -> new IllegalArgumentException(\"Unknown revocation reason code: \" + reasonCode));",
                "type": "ADD",
                "lineNo": 62
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.lang.IllegalArgumentException.IllegalArgumentException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.IllegalArgumentException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Unknown revocation reason code: '"
              },
              {
                "type": "CtVariableRead",
                "value": "int reasonCode"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java",
        "name": "org.shredzone.acme4j.challenge.Challenge.getValidated()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 86
              },
              {
                "line": "public Instant getValidated() {",
                "type": "DELETE",
                "lineNo": 87
              },
              {
                "line": "return getJSON().get(KEY_VALIDATED).map(Value::asInstant).orElse(null);",
                "type": "DELETE",
                "lineNo": 88
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getValidated() {",
                "type": "ADD",
                "lineNo": 86
              },
              {
                "line": "return getJSON().get(KEY_VALIDATED).map(Value::asInstant);",
                "type": "ADD",
                "lineNo": 87
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_VALIDATED"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_VALIDATED"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asInstant()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java",
        "name": "org.shredzone.acme4j.challenge.Challenge.getError()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 96
              },
              {
                "line": "public Problem getError() {",
                "type": "DELETE",
                "lineNo": 97
              },
              {
                "line": "return getJSON().get(KEY_ERROR)",
                "type": "DELETE",
                "lineNo": 98
              },
              {
                "line": ".map(it -> it.asProblem(getLocation()))",
                "type": "DELETE",
                "lineNo": 99
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 100
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Problem> getError() {",
                "type": "ADD",
                "lineNo": 95
              },
              {
                "line": "return getJSON().get(KEY_ERROR).map(it -> it.asProblem(getLocation()));",
                "type": "ADD",
                "lineNo": 96
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_ERROR"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value it"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value it"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeJsonResource.getJSON()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON.get(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String KEY_ERROR"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.map(Function)"
              },
              {
                "type": "CtParameter",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value it"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value it"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.JSON$Value.asProblem(URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java",
        "name": "org.shredzone.acme4j.connector.Connection.getNonce()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* @return Base64 encoded nonce, or {@code null} if no nonce header was set",
                "type": "DELETE",
                "lineNo": 164
              }
            ],
            "targetChanges": [
              {
                "line": "* @return Base64 encoded nonce, or empty if no nonce header was set",
                "type": "ADD",
                "lineNo": 163
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 166
              },
              {
                "line": "String getNonce();",
                "type": "DELETE",
                "lineNo": 167
              }
            ],
            "targetChanges": [
              {
                "line": "Optional<String> getNonce();",
                "type": "ADD",
                "lineNo": 165
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/Connection.java",
        "name": "org.shredzone.acme4j.connector.Connection.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* @return Location {@link URL}, or {@code null} if no Location header was set",
                "type": "DELETE",
                "lineNo": 174
              }
            ],
            "targetChanges": [
              {
                "line": "* @return Location {@link URL}, or empty if no Location header was set",
                "type": "ADD",
                "lineNo": 172
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 176
              },
              {
                "line": "URL getLocation();",
                "type": "DELETE",
                "lineNo": 177
              }
            ],
            "targetChanges": [
              {
                "line": "Optional<URL> getLocation();",
                "type": "ADD",
                "lineNo": 174
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.resetNonce(Session)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var nonce = getNonce();",
                "type": "DELETE",
                "lineNo": 139
              },
              {
                "line": "if (nonce == null) {",
                "type": "DELETE",
                "lineNo": 140
              },
              {
                "line": "throw new AcmeProtocolException(\"Server did not provide a nonce\");",
                "type": "DELETE",
                "lineNo": 141
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 142
              },
              {
                "line": "session.setNonce(nonce);",
                "type": "DELETE",
                "lineNo": 143
              }
            ],
            "targetChanges": [
              {
                "line": "session.setNonce(getNonce()",
                "type": "ADD",
                "lineNo": 139
              },
              {
                "line": ".orElseThrow(() -> new AcmeProtocolException(\"Server did not provide a nonce\"))",
                "type": "ADD",
                "lineNo": 140
              },
              {
                "line": ");",
                "type": "ADD",
                "lineNo": 141
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide a nonce'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Server did not provide a nonce'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.sendRequest(URL,Session,ZonedDateTime)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var nonce = getNonce();",
                "type": "DELETE",
                "lineNo": 171
              },
              {
                "line": "if (nonce != null) {",
                "type": "DELETE",
                "lineNo": 172
              },
              {
                "line": "session.setNonce(nonce);",
                "type": "DELETE",
                "lineNo": 173
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 174
              }
            ],
            "targetChanges": [
              {
                "line": "getNonce().ifPresent(session::setNonce);",
                "type": "ADD",
                "lineNo": 169
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.ifPresent(Consumer)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.ifPresent(Consumer)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 248
              },
              {
                "line": "public String getNonce() {",
                "type": "DELETE",
                "lineNo": 249
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<String> getNonce() {",
                "type": "ADD",
                "lineNo": 243
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "if (nonceHeaderOpt.isEmpty()) {",
                "type": "DELETE",
                "lineNo": 254
              },
              {
                "line": "return null;",
                "type": "DELETE",
                "lineNo": 255
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 256
              }
            ],
            "targetChanges": [
              {
                "line": "if (nonceHeaderOpt.isPresent()) {",
                "type": "ADD",
                "lineNo": 248
              },
              {
                "line": "var nonceHeader = nonceHeaderOpt.get();",
                "type": "ADD",
                "lineNo": 249
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isEmpty()"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var nonceHeader = nonceHeaderOpt.get();",
                "type": "DELETE",
                "lineNo": 258
              },
              {
                "line": "if (!AcmeUtils.isValidBase64Url(nonceHeader)) {",
                "type": "DELETE",
                "lineNo": 259
              },
              {
                "line": "throw new AcmeProtocolException(\"Invalid replay nonce: \" + nonceHeader);",
                "type": "DELETE",
                "lineNo": 260
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 261
              }
            ],
            "targetChanges": [
              {
                "line": "if (!AcmeUtils.isValidBase64Url(nonceHeader)) {",
                "type": "ADD",
                "lineNo": 251
              },
              {
                "line": "throw new AcmeProtocolException(\"Invalid replay nonce: \" + nonceHeader);",
                "type": "ADD",
                "lineNo": 252
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 253
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Invalid replay nonce: '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.AcmeUtils.isValidBase64Url(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Invalid replay nonce: '"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "LOG.debug(\"Replay Nonce: {}\", nonceHeader);",
                "type": "DELETE",
                "lineNo": 263
              },
              {
                "line": "return nonceHeader;",
                "type": "DELETE",
                "lineNo": 265
              }
            ],
            "targetChanges": [
              {
                "line": "LOG.debug(\"Replay Nonce: {}\", nonceHeader);",
                "type": "ADD",
                "lineNo": 255
              },
              {
                "line": "}",
                "type": "ADD",
                "lineNo": 256
              },
              {
                "line": "return nonceHeaderOpt;",
                "type": "ADD",
                "lineNo": 257
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Replay Nonce: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.debug(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Replay Nonce: {}'"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonceHeader"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional nonceHeaderOpt"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 269
              },
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 270
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 261
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getLocation()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": ".map(this::resolveRelative)",
                "type": "DELETE",
                "lineNo": 277
              },
              {
                "line": ".orElse(null);",
                "type": "DELETE",
                "lineNo": 278
              }
            ],
            "targetChanges": [
              {
                "line": ".map(this::resolveRelative);",
                "type": "ADD",
                "lineNo": 268
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.resolveRelative(String)"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/DefaultConnection.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnection.performRequest(URL,JSONBuilder,Session,KeyPair,URL,String)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "session.setNonce(getNonce());",
                "type": "DELETE",
                "lineNo": 454
              }
            ],
            "targetChanges": [
              {
                "line": "session.setNonce(getNonce().orElse(null));",
                "type": "ADD",
                "lineNo": 444
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.DefaultConnection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "name": "org.shredzone.acme4j.exception.AcmeRateLimitedException.AcmeRateLimitedException(Problem,Instant,Collection)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "documents != null ? Collections.unmodifiableCollection(documents) : null;",
                "type": "DELETE",
                "lineNo": 52
              }
            ],
            "targetChanges": [
              {
                "line": "documents != null ? Collections.unmodifiableCollection(documents) : Collections.emptyList();",
                "type": "ADD",
                "lineNo": 53
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtVariableRead",
                "value": "java.util.Collection documents"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collections.unmodifiableCollection(Collection)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Collections"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collections.unmodifiableCollection(Collection)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Collection documents"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              }
            ],
            "targetElements": [
              {
                "type": "CtVariableRead",
                "value": "java.util.Collection documents"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collections.unmodifiableCollection(Collection)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Collections"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collections.unmodifiableCollection(Collection)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Collection documents"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Collections.emptyList()"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Collections"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Collections.emptyList()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "name": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the instant of time the request is expected to succeed again. {@code null}",
                "type": "DELETE",
                "lineNo": 56
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the instant of time the request is expected to succeed again. Empty",
                "type": "ADD",
                "lineNo": 57
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 59
              },
              {
                "line": "public Instant getRetryAfter() {",
                "type": "DELETE",
                "lineNo": 60
              },
              {
                "line": "return retryAfter;",
                "type": "DELETE",
                "lineNo": 61
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<Instant> getRetryAfter() {",
                "type": "ADD",
                "lineNo": 60
              },
              {
                "line": "return Optional.ofNullable(retryAfter);",
                "type": "ADD",
                "lineNo": 61
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.Instant retryAfter"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.time.Instant"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.ofNullable(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.ofNullable(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.Instant retryAfter"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
        "name": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* {@code null} if the server did not provide such URLs.",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "* Empty if the server did not provide such URLs.",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 68
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java",
        "name": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Returns the {@link URI} of the terms-of-service document to accept, or {@code null}",
                "type": "DELETE",
                "lineNo": 49
              }
            ],
            "targetChanges": [
              {
                "line": "* Returns the {@link URI} of the terms-of-service document to accept. Empty",
                "type": "ADD",
                "lineNo": 50
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "@Nullable",
                "type": "DELETE",
                "lineNo": 52
              },
              {
                "line": "public URI getTermsOfServiceUri() {",
                "type": "DELETE",
                "lineNo": 53
              },
              {
                "line": "return tosUri;",
                "type": "DELETE",
                "lineNo": 54
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URI> getTermsOfServiceUri() {",
                "type": "ADD",
                "lineNo": 53
              },
              {
                "line": "return Optional.ofNullable(tosUri);",
                "type": "ADD",
                "lineNo": 54
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URI tosUri"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.ofNullable(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.ofNullable(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URI tosUri"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredException.java",
        "name": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getInstance()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var instance = getProblem().getInstance();",
                "type": "DELETE",
                "lineNo": 62
              }
            ],
            "targetChanges": [
              {
                "line": "var instance = getProblem().getInstance()",
                "type": "ADD",
                "lineNo": 62
              },
              {
                "line": ".orElseThrow(() -> new AcmeProtocolException(\"Instance URL required, but missing.\"));",
                "type": "ADD",
                "lineNo": 63
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URI instance"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeServerException.getProblem()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeServerException.getProblem()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URI instance"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeServerException.getProblem()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeServerException.getProblem()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Instance URL required, but missing.'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "if (instance == null) {",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "throw new AcmeProtocolException(\"Instance URL required, but missing.\");",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "type": "DELETE",
            "sourceElements": [
              {
                "type": "CtVariableRead",
                "value": "java.net.URI instance"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException.AcmeProtocolException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeProtocolException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Instance URL required, but missing.'"
              }
            ],
            "targetElements": []
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "aPath": "acme4j-client/src/main/java/org/shredzone/acme4j/provider/AbstractAcmeProvider.java",
        "name": "org.shredzone.acme4j.provider.AbstractAcmeProvider.directory(Session,URI)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var nonce = conn.getNonce();",
                "type": "DELETE",
                "lineNo": 76
              },
              {
                "line": "if (nonce != null) {",
                "type": "DELETE",
                "lineNo": 77
              },
              {
                "line": "session.setNonce(nonce);",
                "type": "DELETE",
                "lineNo": 78
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 79
              }
            ],
            "targetChanges": [
              {
                "line": "conn.getNonce().ifPresent(session::setNonce);",
                "type": "ADD",
                "lineNo": 76
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.lang.String nonce"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.ifPresent(Consumer)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.ifPresent(Consumer)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.setNonce(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest.testRegistration()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 74
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 75
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 75
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 76
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed()).isTrue();",
                "type": "DELETE",
                "lineNo": 97
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();",
                "type": "ADD",
                "lineNo": 98
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getKeyIdentifier()).isNull();",
                "type": "DELETE",
                "lineNo": 100
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getKeyIdentifier()).isEmpty();",
                "type": "ADD",
                "lineNo": 101
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest$1.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 74
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 75
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 75
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 76
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest.testRegistrationWithKid()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 136
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 137
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 137
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 138
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 136
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 137
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 137
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 138
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest.testOnlyExistingRegistration()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 178
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 179
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 179
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 180
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
        "name": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 178
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 179
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 179
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 180
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountBuilderTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest.testUpdateAccount()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 90
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 91
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 91
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 92
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed()).isTrue();",
                "type": "DELETE",
                "lineNo": 111
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();",
                "type": "ADD",
                "lineNo": 112
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getKeyIdentifier()).isEqualTo(\"NCC-1701\");",
                "type": "DELETE",
                "lineNo": 116
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getKeyIdentifier().orElseThrow()).isEqualTo(\"NCC-1701\");",
                "type": "ADD",
                "lineNo": 117
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'NCC-1701'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getKeyIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'NCC-1701'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest$1.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 90
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 91
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 91
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 92
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest.testLazyLoading()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 147
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 148
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 148
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 149
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed()).isTrue();",
                "type": "DELETE",
                "lineNo": 169
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();",
                "type": "ADD",
                "lineNo": 170
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed()).isTrue();",
                "type": "DELETE",
                "lineNo": 174
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();",
                "type": "ADD",
                "lineNo": 175
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isTrue()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.Boolean)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Account account"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Account.getTermsOfServiceAgreed()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isTrue()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest$2.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 147
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 148
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 148
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 149
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest.testPreAuthorizeDomain()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 201
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 202
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 202
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 203
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(auth.getExpires()).isNull();",
                "type": "DELETE",
                "lineNo": 219
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(auth.getExpires()).isEmpty();",
                "type": "ADD",
                "lineNo": 220
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest$3.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 201
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 202
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 202
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 203
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$3.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest.testChangeKey()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 329
              },
              {
                "line": "return resourceUrl;",
                "type": "DELETE",
                "lineNo": 330
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 330
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 331
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$5.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL resourceUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$5.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest$5.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 329
              },
              {
                "line": "return resourceUrl;",
                "type": "DELETE",
                "lineNo": 330
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 330
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 331
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$5.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL resourceUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$5.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest.testModify()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 426
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 427
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 427
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 428
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$7.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$7.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountTest.java",
        "name": "org.shredzone.acme4j.AccountTest$7.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 426
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 427
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 427
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 428
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$7.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.AccountTest$7.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testFindChallenge()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(c1).isNull();",
                "type": "DELETE",
                "lineNo": 61
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c1).isEmpty();",
                "type": "ADD",
                "lineNo": 61
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c1"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c1"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c2).isNotNull();",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "assertThat(c2).isInstanceOf(Http01Challenge.class);",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c2).isNotEmpty();",
                "type": "ADD",
                "lineNo": 65
              },
              {
                "line": "assertThat(c2.get()).isInstanceOf(Http01Challenge.class);",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c3).isNotNull();",
                "type": "DELETE",
                "lineNo": 70
              },
              {
                "line": "assertThat(c3).isInstanceOf(Dns01Challenge.class);",
                "type": "DELETE",
                "lineNo": 71
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c3).isNotEmpty();",
                "type": "ADD",
                "lineNo": 70
              },
              {
                "line": "assertThat(c3.get()).isInstanceOf(Dns01Challenge.class);",
                "type": "ADD",
                "lineNo": 71
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c4).isNotNull();",
                "type": "DELETE",
                "lineNo": 75
              },
              {
                "line": "assertThat(c4).isInstanceOf(TlsAlpn01Challenge.class);",
                "type": "DELETE",
                "lineNo": 76
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c4).isNotEmpty();",
                "type": "ADD",
                "lineNo": 75
              },
              {
                "line": "assertThat(c4.get()).isInstanceOf(TlsAlpn01Challenge.class);",
                "type": "ADD",
                "lineNo": 76
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Challenge)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isInstanceOf(java.lang.Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testFindChallengeByType()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(c1).isNull();",
                "type": "DELETE",
                "lineNo": 88
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c1).isEmpty();",
                "type": "ADD",
                "lineNo": 88
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.AuthorizationTest$NonExistingChallenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.AuthorizationTest$NonExistingChallenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.AuthorizationTest$NonExistingChallenge c1"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c1"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c2).isNotNull();",
                "type": "DELETE",
                "lineNo": 92
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c2).isNotEmpty();",
                "type": "ADD",
                "lineNo": 92
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c2"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c3).isNotNull();",
                "type": "DELETE",
                "lineNo": 96
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c3).isNotEmpty();",
                "type": "ADD",
                "lineNo": 96
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c3"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(c4).isNotNull();",
                "type": "DELETE",
                "lineNo": 100
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(c4).isNotEmpty();",
                "type": "ADD",
                "lineNo": 100
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.TlsAlpn01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.TlsAlpn01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional c4"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testUpdate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "DELETE",
                "lineNo": 150
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "ADD",
                "lineNo": 150
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testWildcard()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "DELETE",
                "lineNo": 194
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "ADD",
                "lineNo": 194
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testLazyLoading()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "DELETE",
                "lineNo": 247
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "ADD",
                "lineNo": 247
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
        "name": "org.shredzone.acme4j.AuthorizationTest.testUpdateRetryAfter()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "DELETE",
                "lineNo": 291
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));",
                "type": "ADD",
                "lineNo": 291
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-02T17:12:40Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit SECONDS"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "name": "org.shredzone.acme4j.OrderBuilderTest.testOrderCertificate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 69
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 70
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 70
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 71
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore()).isEqualTo(\"2016-01-01T00:10:00Z\");",
                "type": "DELETE",
                "lineNo": 101
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEqualTo(\"2016-01-08T00:10:00Z\");",
                "type": "DELETE",
                "lineNo": 102
              },
              {
                "line": "softly.assertThat(order.getExpires()).isEqualTo(\"2016-01-10T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 103
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore().orElseThrow())",
                "type": "ADD",
                "lineNo": 102
              },
              {
                "line": ".isEqualTo(\"2016-01-01T00:10:00Z\");",
                "type": "ADD",
                "lineNo": 103
              },
              {
                "line": "softly.assertThat(order.getNotAfter().orElseThrow())",
                "type": "ADD",
                "lineNo": 104
              },
              {
                "line": ".isEqualTo(\"2016-01-08T00:10:00Z\");",
                "type": "ADD",
                "lineNo": 105
              },
              {
                "line": "softly.assertThat(order.getExpires().orElseThrow())",
                "type": "ADD",
                "lineNo": 106
              },
              {
                "line": ".isEqualTo(\"2016-01-10T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 107
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:10:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:10:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-10T00:00:00Z'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:10:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:10:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-10T00:00:00Z'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isNull();",
                "type": "DELETE",
                "lineNo": 106
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isNull();",
                "type": "DELETE",
                "lineNo": 107
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isNull();",
                "type": "DELETE",
                "lineNo": 108
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isNull();",
                "type": "DELETE",
                "lineNo": 109
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEmpty();",
                "type": "ADD",
                "lineNo": 110
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEmpty();",
                "type": "ADD",
                "lineNo": 111
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEmpty();",
                "type": "ADD",
                "lineNo": 112
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEmpty();",
                "type": "ADD",
                "lineNo": 113
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "name": "org.shredzone.acme4j.OrderBuilderTest$1.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 69
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 70
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 70
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 71
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$1.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "name": "org.shredzone.acme4j.OrderBuilderTest.testAutoRenewOrderCertificate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 144
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 145
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 148
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 149
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore()).isNull();",
                "type": "DELETE",
                "lineNo": 167
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isNull();",
                "type": "DELETE",
                "lineNo": 168
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore()).isEmpty();",
                "type": "ADD",
                "lineNo": 171
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEmpty();",
                "type": "ADD",
                "lineNo": 172
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(autoRenewStart);",
                "type": "DELETE",
                "lineNo": 170
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(autoRenewEnd);",
                "type": "DELETE",
                "lineNo": 171
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(validity);",
                "type": "DELETE",
                "lineNo": 172
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(predate);",
                "type": "DELETE",
                "lineNo": 173
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate().orElseThrow()).isEqualTo(autoRenewStart);",
                "type": "ADD",
                "lineNo": 174
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate().orElseThrow()).isEqualTo(autoRenewEnd);",
                "type": "ADD",
                "lineNo": 175
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime().orElseThrow()).isEqualTo(validity);",
                "type": "ADD",
                "lineNo": 176
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow()).isEqualTo(predate);",
                "type": "ADD",
                "lineNo": 177
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant autoRenewStart"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant autoRenewEnd"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration validity"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration predate"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant autoRenewStart"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant autoRenewEnd"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration validity"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Duration predate"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
        "name": "org.shredzone.acme4j.OrderBuilderTest$2.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 144
              },
              {
                "line": "return locationUrl;",
                "type": "DELETE",
                "lineNo": 145
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 148
              },
              {
                "line": "return Optional.of(locationUrl);",
                "type": "ADD",
                "lineNo": 149
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.OrderBuilderTest$2.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.util.Optional"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.of(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.net.URL locationUrl"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testUpdate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getExpires()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "DELETE",
                "lineNo": 72
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getExpires().orElseThrow()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "ADD",
                "lineNo": 72
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore()).isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 78
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEqualTo(\"2016-01-08T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 79
              },
              {
                "line": "softly.assertThat(order.getCertificate().getLocation())",
                "type": "DELETE",
                "lineNo": 80
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore().orElseThrow())",
                "type": "ADD",
                "lineNo": 78
              },
              {
                "line": ".isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 79
              },
              {
                "line": "softly.assertThat(order.getNotAfter().orElseThrow())",
                "type": "ADD",
                "lineNo": 80
              },
              {
                "line": ".isEqualTo(\"2016-01-08T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 81
              },
              {
                "line": "softly.assertThat(order.getCertificate().orElseThrow().getLocation())",
                "type": "ADD",
                "lineNo": 82
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isNull();",
                "type": "DELETE",
                "lineNo": 85
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isNull();",
                "type": "DELETE",
                "lineNo": 86
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isNull();",
                "type": "DELETE",
                "lineNo": 87
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isNull();",
                "type": "DELETE",
                "lineNo": 88
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEmpty();",
                "type": "ADD",
                "lineNo": 87
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEmpty();",
                "type": "ADD",
                "lineNo": 88
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEmpty();",
                "type": "ADD",
                "lineNo": 89
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEmpty();",
                "type": "ADD",
                "lineNo": 90
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getError()).isNotNull();",
                "type": "DELETE",
                "lineNo": 91
              },
              {
                "line": "softly.assertThat(order.getError().getType())",
                "type": "DELETE",
                "lineNo": 92
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getError()).isNotEmpty();",
                "type": "ADD",
                "lineNo": 93
              },
              {
                "line": "softly.assertThat(order.getError().orElseThrow().getType())",
                "type": "ADD",
                "lineNo": 94
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.Problem)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.Problem)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getType()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getType()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getType()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getType()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getError().getDetail())",
                "type": "DELETE",
                "lineNo": 94
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getError().flatMap(Problem::getDetail).orElseThrow())",
                "type": "ADD",
                "lineNo": 96
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.flatMap(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.flatMap(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testLazyLoading()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getCertificate().getLocation())",
                "type": "DELETE",
                "lineNo": 142
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getCertificate().orElseThrow().getLocation())",
                "type": "ADD",
                "lineNo": 144
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getCertificate().getLocation())",
                "type": "DELETE",
                "lineNo": 148
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getCertificate().orElseThrow().getLocation())",
                "type": "ADD",
                "lineNo": 150
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getExpires()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "DELETE",
                "lineNo": 151
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getExpires().orElseThrow()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "ADD",
                "lineNo": 153
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testFinalize()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getExpires()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "DELETE",
                "lineNo": 201
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getExpires().orElseThrow()).isEqualTo(\"2015-03-01T14:09:00Z\");",
                "type": "ADD",
                "lineNo": 203
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getExpires()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-03-01T14:09:00Z'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore()).isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 207
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEqualTo(\"2016-01-08T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 208
              },
              {
                "line": "softly.assertThat(order.getCertificate().getLocation())",
                "type": "DELETE",
                "lineNo": 209
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getNotBefore().orElseThrow())",
                "type": "ADD",
                "lineNo": 209
              },
              {
                "line": ".isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 210
              },
              {
                "line": "softly.assertThat(order.getNotAfter().orElseThrow())",
                "type": "ADD",
                "lineNo": 211
              },
              {
                "line": ".isEqualTo(\"2016-01-08T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 212
              },
              {
                "line": "softly.assertThat(order.getCertificate().orElseThrow().getLocation())",
                "type": "ADD",
                "lineNo": 213
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-08T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate()).isNull();",
                "type": "DELETE",
                "lineNo": 211
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate()).isEmpty();",
                "type": "ADD",
                "lineNo": 215
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.Certificate)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.Certificate)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testAutoRenewUpdate()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 258
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 259
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));",
                "type": "DELETE",
                "lineNo": 260
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));",
                "type": "DELETE",
                "lineNo": 261
              },
              {
                "line": "softly.assertThat(order.getNotBefore()).isNull();",
                "type": "DELETE",
                "lineNo": 262
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isNull();",
                "type": "DELETE",
                "lineNo": 263
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())",
                "type": "ADD",
                "lineNo": 262
              },
              {
                "line": ".isEqualTo(\"2016-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 263
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())",
                "type": "ADD",
                "lineNo": 264
              },
              {
                "line": ".isEqualTo(\"2017-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 265
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())",
                "type": "ADD",
                "lineNo": 266
              },
              {
                "line": ".isEqualTo(Duration.ofHours(168));",
                "type": "ADD",
                "lineNo": 267
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())",
                "type": "ADD",
                "lineNo": 268
              },
              {
                "line": ".isEqualTo(Duration.ofDays(6));",
                "type": "ADD",
                "lineNo": 269
              },
              {
                "line": "softly.assertThat(order.getNotBefore()).isEmpty();",
                "type": "ADD",
                "lineNo": 270
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEmpty();",
                "type": "ADD",
                "lineNo": 271
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2017-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '168'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '6'"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2016-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2017-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '168'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '6'"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
        "name": "org.shredzone.acme4j.OrderTest.testAutoRenewFinalize()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getCertificate()).isNull();",
                "type": "DELETE",
                "lineNo": 297
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate().getLocation())",
                "type": "DELETE",
                "lineNo": 298
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getCertificate()).isEmpty();",
                "type": "ADD",
                "lineNo": 305
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())",
                "type": "ADD",
                "lineNo": 306
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.Certificate)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.Certificate)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.AcmeResource.getLocation()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2018-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 301
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2019-01-01T00:00:00Z\");",
                "type": "DELETE",
                "lineNo": 302
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));",
                "type": "DELETE",
                "lineNo": 303
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));",
                "type": "DELETE",
                "lineNo": 304
              },
              {
                "line": "softly.assertThat(order.getNotBefore()).isNull();",
                "type": "DELETE",
                "lineNo": 305
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isNull();",
                "type": "DELETE",
                "lineNo": 306
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())",
                "type": "ADD",
                "lineNo": 309
              },
              {
                "line": ".isEqualTo(\"2018-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 310
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())",
                "type": "ADD",
                "lineNo": 311
              },
              {
                "line": ".isEqualTo(\"2019-01-01T00:00:00Z\");",
                "type": "ADD",
                "lineNo": 312
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())",
                "type": "ADD",
                "lineNo": 313
              },
              {
                "line": ".isEqualTo(Duration.ofHours(168));",
                "type": "ADD",
                "lineNo": 314
              },
              {
                "line": "softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())",
                "type": "ADD",
                "lineNo": 315
              },
              {
                "line": ".isEqualTo(Duration.ofDays(6));",
                "type": "ADD",
                "lineNo": 316
              },
              {
                "line": "softly.assertThat(order.getNotBefore()).isEmpty();",
                "type": "ADD",
                "lineNo": 317
              },
              {
                "line": "softly.assertThat(order.getNotAfter()).isEmpty();",
                "type": "ADD",
                "lineNo": 318
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2018-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2019-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '168'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '6'"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalStartDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2018-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalEndDate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2019-01-01T00:00:00Z'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '168'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getAutoRenewalLifetimeAdjust()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '6'"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/ProblemTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/ProblemTest.java",
        "name": "org.shredzone.acme4j.ProblemTest.testProblem()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(problem.getTitle()).isEqualTo(\"Some of the identifiers requested were rejected\");",
                "type": "DELETE",
                "lineNo": 43
              },
              {
                "line": "softly.assertThat(problem.getDetail()).isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");",
                "type": "DELETE",
                "lineNo": 44
              },
              {
                "line": "softly.assertThat(problem.getInstance()).isEqualTo(URI.create(\"https://example.com/documents/error.html\"));",
                "type": "DELETE",
                "lineNo": 45
              },
              {
                "line": "softly.assertThat(problem.getIdentifier()).isNull();",
                "type": "DELETE",
                "lineNo": 46
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(problem.getTitle().orElseThrow())",
                "type": "ADD",
                "lineNo": 43
              },
              {
                "line": ".isEqualTo(\"Some of the identifiers requested were rejected\");",
                "type": "ADD",
                "lineNo": 44
              },
              {
                "line": "softly.assertThat(problem.getDetail().orElseThrow())",
                "type": "ADD",
                "lineNo": 45
              },
              {
                "line": ".isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");",
                "type": "ADD",
                "lineNo": 46
              },
              {
                "line": "softly.assertThat(problem.getInstance().orElseThrow())",
                "type": "ADD",
                "lineNo": 47
              },
              {
                "line": ".isEqualTo(URI.create(\"https://example.com/documents/error.html\"));",
                "type": "ADD",
                "lineNo": 48
              },
              {
                "line": "softly.assertThat(problem.getIdentifier()).isEmpty();",
                "type": "ADD",
                "lineNo": 49
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Some of the identifiers requested were rejected'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Identifier \"abc12_\" is malformed'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/documents/error.html'"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.Identifier)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.Identifier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Some of the identifiers requested were rejected'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Identifier \"abc12_\" is malformed'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/documents/error.html'"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(p1.getTitle()).isNull();",
                "type": "DELETE",
                "lineNo": 57
              },
              {
                "line": "softly.assertThat(p1.getDetail()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");",
                "type": "DELETE",
                "lineNo": 58
              },
              {
                "line": "softly.assertThat(p1.getIdentifier().getDomain()).isEqualTo(\"_example.com\");",
                "type": "DELETE",
                "lineNo": 59
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(p1.getTitle()).isEmpty();",
                "type": "ADD",
                "lineNo": 60
              },
              {
                "line": "softly.assertThat(p1.getDetail().orElseThrow())",
                "type": "ADD",
                "lineNo": 61
              },
              {
                "line": ".isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");",
                "type": "ADD",
                "lineNo": 62
              },
              {
                "line": "softly.assertThat(p1.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"_example.com\");",
                "type": "ADD",
                "lineNo": 63
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Invalid underscore in DNS name \"_example.com\"'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '_example.com'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Invalid underscore in DNS name \"_example.com\"'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p1"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '_example.com'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(p2.getTitle()).isNull();",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "softly.assertThat(p2.getDetail()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "softly.assertThat(p2.getIdentifier().getDomain()).isEqualTo(\"example.net\");",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(p2.getTitle()).isEmpty();",
                "type": "ADD",
                "lineNo": 68
              },
              {
                "line": "softly.assertThat(p2.getDetail().orElseThrow())",
                "type": "ADD",
                "lineNo": 69
              },
              {
                "line": ".isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");",
                "type": "ADD",
                "lineNo": 70
              },
              {
                "line": "softly.assertThat(p2.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"example.net\");",
                "type": "ADD",
                "lineNo": 71
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'This CA will not issue for \"example.net\"'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'example.net'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getTitle()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'This CA will not issue for \"example.net\"'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem p2"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getIdentifier()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Identifier.getDomain()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'example.net'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java",
        "name": "org.shredzone.acme4j.SessionTest.testDirectory()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(meta.getTermsOfService())",
                "type": "DELETE",
                "lineNo": 166
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(meta.getTermsOfService().orElseThrow())",
                "type": "ADD",
                "lineNo": 166
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(meta.getWebsite()).isEqualTo(url(\"https://www.example.com/\"));",
                "type": "DELETE",
                "lineNo": 168
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(meta.getWebsite().orElseThrow().toExternalForm())",
                "type": "ADD",
                "lineNo": 168
              },
              {
                "line": ".isEqualTo(\"https://www.example.com/\");",
                "type": "ADD",
                "lineNo": 169
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.url(String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.url(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://www.example.com/'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URL.toExternalForm()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URL.toExternalForm()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://www.example.com/'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(meta.getAutoRenewalMaxDuration()).isEqualTo(Duration.ofDays(365));",
                "type": "DELETE",
                "lineNo": 171
              },
              {
                "line": "softly.assertThat(meta.getAutoRenewalMinLifetime()).isEqualTo(Duration.ofHours(24));",
                "type": "DELETE",
                "lineNo": 172
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(meta.getAutoRenewalMaxDuration().orElseThrow())",
                "type": "ADD",
                "lineNo": 172
              },
              {
                "line": ".isEqualTo(Duration.ofDays(365));",
                "type": "ADD",
                "lineNo": 173
              },
              {
                "line": "softly.assertThat(meta.getAutoRenewalMinLifetime().orElseThrow())",
                "type": "ADD",
                "lineNo": 174
              },
              {
                "line": ".isEqualTo(Duration.ofHours(24));",
                "type": "ADD",
                "lineNo": 175
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '365'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '24'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofDays(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '365'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.Duration"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.time.Duration.ofHours(long)"
              },
              {
                "type": "CtLiteral",
                "value": "int '24'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java",
        "name": "org.shredzone.acme4j.SessionTest.testNoMeta()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(meta.getTermsOfService()).isNull();",
                "type": "DELETE",
                "lineNo": 214
              },
              {
                "line": "softly.assertThat(meta.getWebsite()).isNull();",
                "type": "DELETE",
                "lineNo": 215
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(meta.getTermsOfService()).isEmpty();",
                "type": "ADD",
                "lineNo": 217
              },
              {
                "line": "softly.assertThat(meta.getWebsite()).isEmpty();",
                "type": "ADD",
                "lineNo": 218
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(meta.getAutoRenewalMaxDuration()).isNull();",
                "type": "DELETE",
                "lineNo": 218
              },
              {
                "line": "softly.assertThat(meta.getAutoRenewalMinLifetime()).isNull();",
                "type": "DELETE",
                "lineNo": 219
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(meta.getAutoRenewalMaxDuration()).isEmpty();",
                "type": "ADD",
                "lineNo": 221
              },
              {
                "line": "softly.assertThat(meta.getAutoRenewalMinLifetime()).isEmpty();",
                "type": "ADD",
                "lineNo": 222
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Duration)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMaxDuration()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getAutoRenewalMinLifetime()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/challenge/ChallengeTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/challenge/ChallengeTest.java",
        "name": "org.shredzone.acme4j.challenge.ChallengeTest.testUnmarshal()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(challenge.getValidated()).isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));",
                "type": "DELETE",
                "lineNo": 60
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(challenge.getValidated().orElseThrow())",
                "type": "ADD",
                "lineNo": 60
              },
              {
                "line": ".isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));",
                "type": "ADD",
                "lineNo": 61
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-12-12T17:19:36.336Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit MILLIS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit MILLIS"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getValidated()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isCloseTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '2015-12-12T17:19:36.336Z'"
              },
              {
                "type": "CtInvocation",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtExecutableReference",
                "value": "within(int,java.time.temporal.ChronoUnit)"
              },
              {
                "type": "CtLiteral",
                "value": "int '1'"
              },
              {
                "type": "CtFieldRead",
                "value": "java.time.temporal.ChronoUnit MILLIS"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.time.temporal.ChronoUnit"
              },
              {
                "type": "CtFieldReference",
                "value": "java.time.temporal.ChronoUnit MILLIS"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var error = challenge.getError();",
                "type": "DELETE",
                "lineNo": 64
              },
              {
                "line": "softly.assertThat(error).isNotNull();",
                "type": "DELETE",
                "lineNo": 65
              }
            ],
            "targetChanges": [
              {
                "line": "var error = challenge.getError().orElseThrow();",
                "type": "ADD",
                "lineNo": 65
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.Problem)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.Problem)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "softly.assertThat(error.getDetail()).isEqualTo(\"bad token\");",
                "type": "DELETE",
                "lineNo": 67
              },
              {
                "line": "softly.assertThat(error.getInstance()).isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));",
                "type": "DELETE",
                "lineNo": 68
              }
            ],
            "targetChanges": [
              {
                "line": "softly.assertThat(error.getDetail().orElseThrow()).isEqualTo(\"bad token\");",
                "type": "ADD",
                "lineNo": 67
              },
              {
                "line": "softly.assertThat(error.getInstance().orElseThrow())",
                "type": "ADD",
                "lineNo": 68
              },
              {
                "line": ".isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));",
                "type": "ADD",
                "lineNo": 69
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'bad token'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'http://example.com/documents/faq.html'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'bad token'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.assertj.core.api.AutoCloseableSoftAssertions softly"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem error"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'http://example.com/documents/faq.html'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testNoNonceFromHeader()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "* Test that {@link DefaultConnection#getNonce()} returns {@code null} if there is no",
                "type": "DELETE",
                "lineNo": 109
              }
            ],
            "targetChanges": [
              {
                "line": "* Test that {@link DefaultConnection#getNonce()} is empty if there is no",
                "type": "ADD",
                "lineNo": 109
              }
            ],
            "type": "MODIFY",
            "sourceElements": [],
            "targetElements": []
          },
          {
            "sourceChanges": [
              {
                "line": "assertThat(conn.getNonce()).isNull();",
                "type": "DELETE",
                "lineNo": 120
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(conn.getNonce()).isEmpty();",
                "type": "ADD",
                "lineNo": 120
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testGetNonceFromHeader()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(conn.getNonce()).isEqualTo(TestUtils.DUMMY_NONCE);",
                "type": "DELETE",
                "lineNo": 138
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(conn.getNonce().orElseThrow()).isEqualTo(TestUtils.DUMMY_NONCE);",
                "type": "ADD",
                "lineNo": 138
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DUMMY_NONCE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.TestUtils"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String DUMMY_NONCE"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getNonce()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String DUMMY_NONCE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.toolbox.TestUtils"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String DUMMY_NONCE"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testGetAbsoluteLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(location).isEqualTo(new URL(\"https://example.com/otherlocation\"));",
                "type": "DELETE",
                "lineNo": 218
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(location.orElseThrow())",
                "type": "ADD",
                "lineNo": 218
              },
              {
                "line": ".isEqualTo(new URL(\"https://example.com/otherlocation\"));",
                "type": "ADD",
                "lineNo": 219
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL location"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/otherlocation'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional location"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/otherlocation'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testGetRelativeLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(location).isEqualTo(new URL(baseUrl + \"/otherlocation\"));",
                "type": "DELETE",
                "lineNo": 234
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(location.orElseThrow())",
                "type": "ADD",
                "lineNo": 235
              },
              {
                "line": ".isEqualTo(new URL(baseUrl + \"/otherlocation\"));",
                "type": "ADD",
                "lineNo": 236
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URL location"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String baseUrl"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '/otherlocation'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional location"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URL)"
              },
              {
                "type": "CtConstructorCall",
                "value": "java.net.URL.URL(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String baseUrl"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String '/otherlocation'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testNoLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(conn.getLocation()).isNull();",
                "type": "DELETE",
                "lineNo": 301
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(conn.getLocation()).isEmpty();",
                "type": "ADD",
                "lineNo": 303
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.connector.Connection conn"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.connector.Connection.getLocation()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testAcceptThrowsUserActionRequiredException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(((AcmeUserActionRequiredException) ex).getTermsOfServiceUri())",
                "type": "DELETE",
                "lineNo": 448
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(((AcmeUserActionRequiredException) ex).getTermsOfServiceUri().orElseThrow())",
                "type": "ADD",
                "lineNo": 450
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DefaultConnectionTest.java",
        "name": "org.shredzone.acme4j.connector.DefaultConnectionTest.testAcceptThrowsRateLimitedException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);",
                "type": "DELETE",
                "lineNo": 481
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);",
                "type": "ADD",
                "lineNo": 483
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant retryAfter"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(<unknown>)"
              },
              {
                "type": "CtInvocation",
                "value": "orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "var ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant retryAfter"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DummyConnection.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DummyConnection.java",
        "name": "org.shredzone.acme4j.connector.DummyConnection.getNonce()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public String getNonce() {",
                "type": "DELETE",
                "lineNo": 83
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<String> getNonce() {",
                "type": "ADD",
                "lineNo": 83
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DummyConnection.getNonce()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DummyConnection.getNonce()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DummyConnection.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/DummyConnection.java",
        "name": "org.shredzone.acme4j.connector.DummyConnection.getLocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public URL getLocation() {",
                "type": "DELETE",
                "lineNo": 88
              }
            ],
            "targetChanges": [
              {
                "line": "public Optional<URL> getLocation() {",
                "type": "ADD",
                "lineNo": 88
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DummyConnection.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.connector.DummyConnection.getLocation()"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
        "name": "org.shredzone.acme4j.exception.AcmeRateLimitedExceptionTest.testAcmeRateLimitedException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);",
                "type": "DELETE",
                "lineNo": 50
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);",
                "type": "ADD",
                "lineNo": 50
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant retryAfter"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant retryAfter"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
        "name": "org.shredzone.acme4j.exception.AcmeRateLimitedExceptionTest.testNullAcmeRateLimitedException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getRetryAfter()).isNull();",
                "type": "DELETE",
                "lineNo": 68
              },
              {
                "line": "assertThat(ex.getDocuments()).isNull();",
                "type": "DELETE",
                "lineNo": 69
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getRetryAfter()).isEmpty();",
                "type": "ADD",
                "lineNo": 68
              },
              {
                "line": "assertThat(ex.getDocuments()).isEmpty();",
                "type": "ADD",
                "lineNo": 69
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Collection)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Collection)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getRetryAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Collection)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Collection)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeRateLimitedException.getDocuments()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredExceptionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredExceptionTest.java",
        "name": "org.shredzone.acme4j.exception.AcmeUserActionRequiredExceptionTest.testAcmeUserActionRequiredException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getTermsOfServiceUri()).isEqualTo(tosUri);",
                "type": "DELETE",
                "lineNo": 46
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getTermsOfServiceUri().orElseThrow()).isEqualTo(tosUri);",
                "type": "ADD",
                "lineNo": 46
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI tosUri"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI tosUri"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredExceptionTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeUserActionRequiredExceptionTest.java",
        "name": "org.shredzone.acme4j.exception.AcmeUserActionRequiredExceptionTest.testNullAcmeUserActionRequiredException()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(ex.getTermsOfServiceUri()).isNull();",
                "type": "DELETE",
                "lineNo": 65
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(ex.getTermsOfServiceUri()).isEmpty();",
                "type": "ADD",
                "lineNo": 65
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException ex"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.exception.AcmeUserActionRequiredException.getTermsOfServiceUri()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/JSONTest.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/JSONTest.java",
        "name": "org.shredzone.acme4j.toolbox.JSONTest.testGetter()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(problem.getDetail()).isEqualTo(\"too many requests\");",
                "type": "DELETE",
                "lineNo": 221
              },
              {
                "line": "assertThat(problem.getInstance()).isEqualTo(URI.create(\"https://example.com/documents/errors.html\"));",
                "type": "DELETE",
                "lineNo": 222
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(problem.getDetail().orElseThrow()).isEqualTo(\"too many requests\");",
                "type": "ADD",
                "lineNo": 221
              },
              {
                "line": "assertThat(problem.getInstance().orElseThrow())",
                "type": "ADD",
                "lineNo": 222
              },
              {
                "line": ".isEqualTo(URI.create(\"https://example.com/documents/errors.html\"));",
                "type": "ADD",
                "lineNo": 223
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'too many requests'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/documents/errors.html'"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.lang.String)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getDetail()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.lang.String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'too many requests'"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Problem problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.getInstance()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'https://example.com/documents/errors.html'"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "aPath": "acme4j-client/src/test/java/org/shredzone/acme4j/toolbox/TestUtils.java",
        "name": "org.shredzone.acme4j.toolbox.TestUtils.createProblem(URI,String,URL)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "public static Problem createProblem(URI type, String detail, URL instance) {",
                "type": "DELETE",
                "lineNo": 285
              }
            ],
            "targetChanges": [
              {
                "line": "public static Problem createProblem(URI type, String detail, @Nullable URL instance) {",
                "type": "ADD",
                "lineNo": 286
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.createProblem(URI,String,URL)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String detail"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL instance"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ],
            "targetElements": [
              {
                "type": "CtMethod",
                "value": "org.shredzone.acme4j.toolbox.TestUtils.createProblem(URI,String,URL)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URI type"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtParameter",
                "value": "java.lang.String detail"
              },
              {
                "type": "CtTypeReference",
                "value": "java.lang.String"
              },
              {
                "type": "CtParameter",
                "value": "java.net.URL instance"
              },
              {
                "type": "CtAnnotation",
                "value": "edu.umd.cs.findbugs.annotations.Nullable"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URL"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "aPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "name": "org.shredzone.acme4j.example.ClientTest.fetchCertificate(Collection)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "LOG.error(\"Order has failed, reason: {}\", order.getError());",
                "type": "DELETE",
                "lineNo": 124
              }
            ],
            "targetChanges": [
              {
                "line": "LOG.error(\"Order has failed, reason: {}\", order.getError()",
                "type": "ADD",
                "lineNo": 126
              },
              {
                "line": ".map(Problem::toString)",
                "type": "ADD",
                "lineNo": 127
              },
              {
                "line": ".orElse(\"unknown\")",
                "type": "ADD",
                "lineNo": 128
              },
              {
                "line": ");",
                "type": "ADD",
                "lineNo": 129
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Order has failed, reason: {}'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Order has failed, reason: {}'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Problem.toString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.toString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'unknown'"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "Certificate certificate = order.getCertificate();",
                "type": "DELETE",
                "lineNo": 140
              }
            ],
            "targetChanges": [
              {
                "line": "Certificate certificate = order.getCertificate().orElseThrow();",
                "type": "ADD",
                "lineNo": 145
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "aPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "name": "org.shredzone.acme4j.example.ClientTest.findOrRegisterAccount(Session,KeyPair)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "URI tos = session.getMetadata().getTermsOfService();",
                "type": "DELETE",
                "lineNo": 216
              },
              {
                "line": "if (tos != null) {",
                "type": "DELETE",
                "lineNo": 217
              },
              {
                "line": "acceptAgreement(tos);",
                "type": "DELETE",
                "lineNo": 218
              }
            ],
            "targetChanges": [
              {
                "line": "Optional<URI> tos = session.getMetadata().getTermsOfService();",
                "type": "ADD",
                "lineNo": 221
              },
              {
                "line": "if (tos.isPresent()) {",
                "type": "ADD",
                "lineNo": 222
              },
              {
                "line": "acceptAgreement(tos.get());",
                "type": "ADD",
                "lineNo": 223
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.net.URI tos"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getMetadata()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getMetadata()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI tos"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.example.ClientTest.acceptAgreement(URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.example.ClientTest.acceptAgreement(URI)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.net.URI tos"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.util.Optional tos"
              },
              {
                "type": "CtTypeReference",
                "value": "java.util.Optional"
              },
              {
                "type": "CtTypeReference",
                "value": "java.net.URI"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Session.getMetadata()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Session session"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Session.getMetadata()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional tos"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.isPresent()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.example.ClientTest.acceptAgreement(URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.example.ClientTest.acceptAgreement(URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.get()"
              },
              {
                "type": "CtVariableRead",
                "value": "java.util.Optional tos"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.get()"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "aPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "name": "org.shredzone.acme4j.example.ClientTest.authorize(Authorization)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "LOG.error(\"Challenge has failed, reason: {}\", challenge.getError());",
                "type": "DELETE",
                "lineNo": 275
              }
            ],
            "targetChanges": [
              {
                "line": "LOG.error(\"Challenge has failed, reason: {}\", challenge.getError()",
                "type": "ADD",
                "lineNo": 280
              },
              {
                "line": ".map(Problem::toString)",
                "type": "ADD",
                "lineNo": 281
              },
              {
                "line": ".orElse(\"unknown\"));",
                "type": "ADD",
                "lineNo": 282
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Challenge has failed, reason: {}'"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "org.slf4j.Logger LOG"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.slf4j.Logger.error(String,Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Challenge has failed, reason: {}'"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.challenge.Challenge.getError()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Problem.toString()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Problem.toString()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.Problem"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElse(Object)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'unknown'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "aPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "name": "org.shredzone.acme4j.example.ClientTest.httpChallenge(Authorization)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "Http01Challenge challenge = auth.findChallenge(Http01Challenge.class);",
                "type": "DELETE",
                "lineNo": 316
              },
              {
                "line": "if (challenge == null) {",
                "type": "DELETE",
                "lineNo": 317
              },
              {
                "line": "throw new AcmeException(\"Found no \" + Http01Challenge.TYPE + \" challenge, don't know what to do...\");",
                "type": "DELETE",
                "lineNo": 318
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 319
              }
            ],
            "targetChanges": [
              {
                "line": "Http01Challenge challenge = auth.findChallenge(Http01Challenge.class)",
                "type": "ADD",
                "lineNo": 323
              },
              {
                "line": ".orElseThrow(() -> new AcmeException(\"Found no \" + Http01Challenge.TYPE",
                "type": "ADD",
                "lineNo": 324
              },
              {
                "line": "+ \" challenge, don't know what to do...\"));",
                "type": "ADD",
                "lineNo": 325
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found no '"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String ' challenge, don't know what to do...'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found no '"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String ' challenge, don't know what to do...'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "aPath": "acme4j-example/src/main/java/org/shredzone/acme4j/example/ClientTest.java",
        "name": "org.shredzone.acme4j.example.ClientTest.dnsChallenge(Authorization)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "Dns01Challenge challenge = auth.findChallenge(Dns01Challenge.TYPE);",
                "type": "DELETE",
                "lineNo": 358
              },
              {
                "line": "if (challenge == null) {",
                "type": "DELETE",
                "lineNo": 359
              },
              {
                "line": "throw new AcmeException(\"Found no \" + Dns01Challenge.TYPE + \" challenge, don't know what to do...\");",
                "type": "DELETE",
                "lineNo": 360
              },
              {
                "line": "}",
                "type": "DELETE",
                "lineNo": 361
              }
            ],
            "targetChanges": [
              {
                "line": "Dns01Challenge challenge = auth.findChallenge(Dns01Challenge.TYPE)",
                "type": "ADD",
                "lineNo": 364
              },
              {
                "line": ".map(Dns01Challenge.class::cast)",
                "type": "ADD",
                "lineNo": 365
              },
              {
                "line": ".orElseThrow(() -> new AcmeException(\"Found no \" + Dns01Challenge.TYPE",
                "type": "ADD",
                "lineNo": 366
              },
              {
                "line": "+ \" challenge, don't know what to do...\"));",
                "type": "ADD",
                "lineNo": 367
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtLiteral",
                "value": "<nulltype> 'null'"
              },
              {
                "type": "CtThrow",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found no '"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String ' challenge, don't know what to do...'"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(String)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "java.lang.Class.cast(Object)"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.lang.Class.cast(Object)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow(Supplier)"
              },
              {
                "type": "CtConstructorCall",
                "value": "org.shredzone.acme4j.exception.AcmeException.AcmeException(String)"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.exception.AcmeException"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'Found no '"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtFieldReference",
                "value": "java.lang.String TYPE"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String ' challenge, don't know what to do...'"
              }
            ]
          }
        ],
        "is_test_source": false
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/boulder/OrderHttpIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/boulder/OrderHttpIT.java",
        "name": "org.shredzone.acme4j.it.boulder.OrderHttpIT.testHttpValidation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class);",
                "type": "DELETE",
                "lineNo": 65
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 66
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 66
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var certificate = order.getCertificate();",
                "type": "DELETE",
                "lineNo": 96
              },
              {
                "line": "var cert = certificate.getCertificate();",
                "type": "DELETE",
                "lineNo": 97
              },
              {
                "line": "assertThat(cert).isNotNull();",
                "type": "DELETE",
                "lineNo": 98
              }
            ],
            "targetChanges": [
              {
                "line": "var cert = order.getCertificate()",
                "type": "ADD",
                "lineNo": 96
              },
              {
                "line": ".map(Certificate::getCertificate)",
                "type": "ADD",
                "lineNo": 97
              },
              {
                "line": ".orElseThrow();",
                "type": "ADD",
                "lineNo": 98
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.X509Certificate cert"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.X509Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.security.cert.X509Certificate)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.security.cert.X509Certificate)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.security.cert.X509Certificate cert"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.X509Certificate cert"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.X509Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.testHttpValidation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class);",
                "type": "DELETE",
                "lineNo": 59
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 60
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 59
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.testDnsValidation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(Dns01Challenge.class);",
                "type": "DELETE",
                "lineNo": 78
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 79
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(Dns01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 77
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.testTlsAlpnValidation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(TlsAlpn01Challenge.class);",
                "type": "DELETE",
                "lineNo": 99
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 100
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(TlsAlpn01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 97
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.TlsAlpn01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.TlsAlpn01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.TlsAlpn01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.testDomainKeyRevocation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class);",
                "type": "DELETE",
                "lineNo": 120
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 121
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(Http01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 117
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Http01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Http01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderIT.orderCertificate(String,Validator,Revoker)",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(order.getNotBefore()).isEqualTo(notBefore);",
                "type": "DELETE",
                "lineNo": 162
              },
              {
                "line": "assertThat(order.getNotAfter()).isEqualTo(notAfter);",
                "type": "DELETE",
                "lineNo": 163
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(order.getNotBefore().orElseThrow()).isEqualTo(notBefore);",
                "type": "ADD",
                "lineNo": 158
              },
              {
                "line": "assertThat(order.getNotAfter().orElseThrow()).isEqualTo(notAfter);",
                "type": "ADD",
                "lineNo": 159
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notBefore"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notAfter"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notBefore"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notAfter"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var certificate = order.getCertificate();",
                "type": "DELETE",
                "lineNo": 202
              }
            ],
            "targetChanges": [
              {
                "line": "var certificate = order.getCertificate().orElseThrow();",
                "type": "ADD",
                "lineNo": 198
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderWildcardIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/OrderWildcardIT.java",
        "name": "org.shredzone.acme4j.it.pebble.OrderWildcardIT.testDnsValidation()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(order.getNotBefore()).isEqualTo(notBefore);",
                "type": "DELETE",
                "lineNo": 67
              },
              {
                "line": "assertThat(order.getNotAfter()).isEqualTo(notAfter);",
                "type": "DELETE",
                "lineNo": 68
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(order.getNotBefore().orElseThrow()).isEqualTo(notBefore);",
                "type": "ADD",
                "lineNo": 68
              },
              {
                "line": "assertThat(order.getNotAfter().orElseThrow()).isEqualTo(notAfter);",
                "type": "ADD",
                "lineNo": 69
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notBefore"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notAfter"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotBefore()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notBefore"
              },
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.time.Instant)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getNotAfter()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.time.Instant)"
              },
              {
                "type": "CtVariableRead",
                "value": "java.time.Instant notAfter"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var challenge = auth.findChallenge(Dns01Challenge.class);",
                "type": "DELETE",
                "lineNo": 79
              },
              {
                "line": "assertThat(challenge).isNotNull();",
                "type": "DELETE",
                "lineNo": 80
              }
            ],
            "targetChanges": [
              {
                "line": "var challenge = auth.findChallenge(Dns01Challenge.class).orElseThrow();",
                "type": "ADD",
                "lineNo": 80
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtInvocation",
                "value": "isNotNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(org.shredzone.acme4j.challenge.Dns01Challenge)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNotNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge challenge"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.challenge.Dns01Challenge"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Authorization auth"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Authorization.findChallenge(Class)"
              },
              {
                "type": "CtFieldRead",
                "value": "java.lang.Class class"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          },
          {
            "sourceChanges": [
              {
                "line": "var certificate = order.getCertificate();",
                "type": "DELETE",
                "lineNo": 115
              },
              {
                "line": "var cert = certificate.getCertificate();",
                "type": "DELETE",
                "lineNo": 116
              }
            ],
            "targetChanges": [
              {
                "line": "var cert = order.getCertificate()",
                "type": "ADD",
                "lineNo": 115
              },
              {
                "line": ".map(Certificate::getCertificate)",
                "type": "ADD",
                "lineNo": 116
              },
              {
                "line": ".orElseThrow();",
                "type": "ADD",
                "lineNo": 117
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtLocalVariable",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtTypeReference",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.X509Certificate cert"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.X509Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Certificate certificate"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              }
            ],
            "targetElements": [
              {
                "type": "CtLocalVariable",
                "value": "java.security.cert.X509Certificate cert"
              },
              {
                "type": "CtTypeReference",
                "value": "java.security.cert.X509Certificate"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Order order"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Order.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.map(Function)"
              },
              {
                "type": "CtExecutableReferenceExpression",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Certificate.getCertificate()"
              },
              {
                "type": "CtTypeAccess",
                "value": "org.shredzone.acme4j.Certificate"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              }
            ]
          }
        ],
        "is_test_source": true
      },
      {
        "bPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/SessionIT.java",
        "aPath": "acme4j-it/src/test/java/org/shredzone/acme4j/it/pebble/SessionIT.java",
        "name": "org.shredzone.acme4j.it.pebble.SessionIT.testMetadata()",
        "hunks": [
          {
            "sourceChanges": [
              {
                "line": "assertThat(meta.getTermsOfService()).isEqualTo(URI.create(\"data:text/plain,Do%20what%20thou%20wilt\"));",
                "type": "DELETE",
                "lineNo": 47
              },
              {
                "line": "assertThat(meta.getWebsite()).isNull();",
                "type": "DELETE",
                "lineNo": 48
              }
            ],
            "targetChanges": [
              {
                "line": "assertThat(meta.getTermsOfService().orElseThrow())",
                "type": "ADD",
                "lineNo": 47
              },
              {
                "line": ".isEqualTo(URI.create(\"data:text/plain,Do%20what%20thou%20wilt\"));",
                "type": "ADD",
                "lineNo": 48
              },
              {
                "line": "assertThat(meta.getWebsite()).isEmpty();",
                "type": "ADD",
                "lineNo": 49
              }
            ],
            "type": "MODIFY",
            "sourceElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'data:text/plain,Do%20what%20thou%20wilt'"
              },
              {
                "type": "CtInvocation",
                "value": "isNull()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URL)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isNull()"
              }
            ],
            "targetElements": [
              {
                "type": "CtInvocation",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getTermsOfService()"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.util.Optional.orElseThrow()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEqualTo(java.net.URI)"
              },
              {
                "type": "CtInvocation",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtTypeAccess",
                "value": "java.net.URI"
              },
              {
                "type": "CtExecutableReference",
                "value": "java.net.URI.create(String)"
              },
              {
                "type": "CtLiteral",
                "value": "java.lang.String 'data:text/plain,Do%20what%20thou%20wilt'"
              },
              {
                "type": "CtInvocation",
                "value": "isEmpty()"
              },
              {
                "type": "CtInvocation",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtExecutableReference",
                "value": "assertThat(java.util.Optional)"
              },
              {
                "type": "CtInvocation",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtVariableRead",
                "value": "org.shredzone.acme4j.Metadata meta"
              },
              {
                "type": "CtExecutableReference",
                "value": "org.shredzone.acme4j.Metadata.getWebsite()"
              },
              {
                "type": "CtExecutableReference",
                "value": "isEmpty()"
              }
            ]
          }
        ],
        "is_test_source": true
      }
    ]
  }
]