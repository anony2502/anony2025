[
  {
    "name": "org.apache.shenyu.plugin.springcloud.context.SpringCloudShenyuContextDecoratorTest.testDecorator()",
    "bSource": {
      "startLine": 37,
      "code": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"divide-springCloud\");\n    }"
    },
    "aSource": {
      "startLine": 37,
      "code": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"springCloud-springCloud\");\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java",
    "bCommit": "e3384f858",
    "aCommit": "e27a26b8c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Assertions.assertEquals(shenyuContext.getModule(), \"divide-springCloud\");",
          "type": "DELETE",
          "lineNo": 45
        }
      ],
      "targetChanges": [
        {
          "line": "Assertions.assertEquals(shenyuContext.getModule(), \"springCloud-springCloud\");",
          "type": "ADD",
          "lineNo": 45
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.junit.jupiter.api.Assertions"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getModule()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext shenyuContext"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getModule()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'divide-springCloud'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.junit.jupiter.api.Assertions"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getModule()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext shenyuContext"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getModule()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'springCloud-springCloud'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"divide-springCloud\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"springCloud-springCloud\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        45
      ]
    },
    "aCommitTime": 1704185452,
    "ID": "apache/shenyu:13",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImplTest.testDoSubmit()",
    "bSource": {
      "startLine": 168,
      "code": "@Test\n    public void testDoSubmit() {\n        assertFalse(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }"
    },
    "aSource": {
      "startLine": 167,
      "code": "@Test\n    public void testDoSubmit() {\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java",
    "bCommit": "4800386d9",
    "aCommit": "fc2bc20aa",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertFalse(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));",
          "type": "DELETE",
          "lineNo": 170
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));",
          "type": "ADD",
          "lineNo": 169
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertFalse(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertFalse(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl.doSubmit(String,List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImplTest$MockAbstractShenyuClientRegisterServiceImpl abstractShenyuClientRegisterService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl.doSubmit(String,List)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Selector_Id'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.ArrayList"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl.doSubmit(String,List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImplTest$MockAbstractShenyuClientRegisterServiceImpl abstractShenyuClientRegisterService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.service.register.AbstractShenyuClientRegisterServiceImpl.doSubmit(String,List)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'Selector_Id'"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.ArrayList"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertFalse",
          "childCount": 1
        },
        "dstNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        169
      ]
    },
    "aCommitTime": 1690862297,
    "ID": "apache/shenyu:32",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.listener.etcd.EtcdClientTest.deleteEtcdPathRecursive()",
    "bSource": {
      "startLine": 87,
      "code": "@Test\n    public void deleteEtcdPathRecursive() {\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }"
    },
    "aSource": {
      "startLine": 87,
      "code": "@Test\n    public void deleteEtcdPathRecursive() {\n        when(client.getKVClient().delete(any(ByteSequence.class), any(DeleteOption.class))).thenReturn(mock(CompletableFuture.class));\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java",
    "bCommit": "40e1f22e7",
    "aCommit": "6f90d1a12",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(client.getKVClient().delete(any(ByteSequence.class), any(DeleteOption.class))).thenReturn(mock(CompletableFuture.class));",
          "type": "ADD",
          "lineNo": 89
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "delete()"
        },
        {
          "type": "CtInvocation",
          "value": "getKVClient()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.etcd.jetcd.Client client"
        },
        {
          "type": "CtExecutableReference",
          "value": "getKVClient()"
        },
        {
          "type": "CtExecutableReference",
          "value": "delete()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        89
      ]
    },
    "aCommitTime": 1690724679,
    "ID": "apache/shenyu:16",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.config.DataSyncConfigurationTest.testConsulClient()",
    "bSource": {
      "startLine": 212,
      "code": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"127.0.0.1\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }"
    },
    "aSource": {
      "startLine": 212,
      "code": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"http://127.0.0.1:8500\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataSyncConfigurationTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataSyncConfigurationTest.java",
    "bCommit": "f3385719a",
    "aCommit": "7667c46dc",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(consulProperties.getUrl()).thenReturn(\"127.0.0.1\");",
          "type": "DELETE",
          "lineNo": 216
        }
      ],
      "targetChanges": [
        {
          "line": "when(consulProperties.getUrl()).thenReturn(\"http://127.0.0.1:8500\");",
          "type": "ADD",
          "lineNo": 216
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties.getUrl()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties consulProperties"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties.getUrl()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '127.0.0.1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties.getUrl()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties consulProperties"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.properties.ConsulProperties.getUrl()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'http://127.0.0.1:8500'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"127.0.0.1\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"http://127.0.0.1:8500\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        217
      ]
    },
    "aCommitTime": 1689756142,
    "ID": "apache/shenyu:27",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.config.ConsulServerConfigurationTest.consulClientTest()",
    "bSource": {
      "startLine": 52,
      "code": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }"
    },
    "aSource": {
      "startLine": 52,
      "code": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            when(config.getServerLists()).thenReturn(\"127.0.0.1:8500\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java",
    "bCommit": "bf61e5e08",
    "aCommit": "4ea79fa2f",
    "hunk": {
      "targetChanges": [
        {
          "line": "when(config.getServerLists()).thenReturn(\"127.0.0.1:8500\");",
          "type": "ADD",
          "lineNo": 60
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig.getServerLists()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig config"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.register.common.config.ShenyuRegisterCenterConfig.getServerLists()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '127.0.0.1:8500'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        60
      ]
    },
    "aCommitTime": 1689305395,
    "ID": "apache/shenyu:14",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.client.sofa.SofaServiceEventListenerTest.testBuildURIRegisterDTO()",
    "bSource": {
      "startLine": 112,
      "code": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .eventType(EventType.REGISTER)\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }"
    },
    "bPath": "shenyu-client/shenyu-client-sofa/src/test/java/org/apache/shenyu/client/sofa/SofaServiceEventListenerTest.java",
    "aPath": "shenyu-client/shenyu-client-sofa/src/test/java/org/apache/shenyu/client/sofa/SofaServiceEventListenerTest.java",
    "bCommit": "bc16c5fdc",
    "aCommit": "846ec64bd",
    "hunk": {
      "targetChanges": [
        {
          "line": ".eventType(EventType.REGISTER)",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.register.common.dto.URIRegisterDTO$Builder.eventType(EventType)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.register.common.enums.EventType REGISTER"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.register.common.enums.EventType"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.shenyu.register.common.enums.EventType REGISTER"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "host",
          "childCount": 2
        },
        "dstNode": {
          "label": "eventType",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "host",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "host",
          "childCount": 2
        },
        "dstNode": {
          "label": "eventType",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "HOST",
          "childCount": 0
        },
        "dstNode": {
          "label": "HOST",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        125
      ]
    },
    "aCommitTime": 1686031631,
    "ID": "apache/shenyu:11",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClientTest.getChildren()",
    "bSource": {
      "startLine": 145,
      "code": "@Test\n    void getChildren() throws Exception {\n        assertThrows(ShenyuException.class, () -> client.getChildren(\"/test\"));\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }"
    },
    "aSource": {
      "startLine": 145,
      "code": "@Test\n    void getChildren() throws Exception {\n        assertTrue(client.getChildren(\"/test\").isEmpty());\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }"
    },
    "bPath": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClientTest.java",
    "aPath": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClientTest.java",
    "bCommit": "be2c3ff1c",
    "aCommit": "09b236e16",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThrows(ShenyuException.class, () -> client.getChildren(\"/test\"));",
          "type": "DELETE",
          "lineNo": 147
        }
      ],
      "targetChanges": [
        {
          "line": "assertTrue(client.getChildren(\"/test\").isEmpty());",
          "type": "ADD",
          "lineNo": 147
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertThrows(java.lang.Class,java.lang.Object)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThrows(java.lang.Class,java.lang.Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "getChildren()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClient client"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "getChildren()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertTrue(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClient.getChildren(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClient client"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClient.getChildren(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/test'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.isEmpty()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "assertThrows",
          "childCount": 2
        },
        "dstNode": {
          "label": "assertTrue",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.apache.shenyu.sync.data.zookeeper.ZookeeperClientTest",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Lambda",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getChildren",
          "childCount": 2
        },
        "dstNode": {
          "label": "getChildren",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        147
      ]
    },
    "aCommitTime": 1680408043,
    "ID": "apache/shenyu:0",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.shiro.config.ShiroRealmTest.testSupports()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n    public void testSupports() {\n        StatelessToken token = mock(StatelessToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n    public void testSupports() {\n        BearerToken token = mock(BearerToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroRealmTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroRealmTest.java",
    "bCommit": "3d8798be9",
    "aCommit": "b5bc26d21",
    "hunk": {
      "sourceChanges": [
        {
          "line": "StatelessToken token = mock(StatelessToken.class);",
          "type": "DELETE",
          "lineNo": 69
        }
      ],
      "targetChanges": [
        {
          "line": "BearerToken token = mock(BearerToken.class);",
          "type": "ADD",
          "lineNo": 69
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.admin.shiro.bean.StatelessToken token"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.admin.shiro.bean.StatelessToken"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shiro.authc.BearerToken token"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shiro.authc.BearerToken"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.admin.shiro.bean.StatelessToken",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.apache.shiro.authc.BearerToken",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.admin.shiro.bean.StatelessToken",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.apache.shiro.authc.BearerToken",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        69
      ]
    },
    "aCommitTime": 1680145804,
    "ID": "apache/shenyu:19",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.register.instance.nacos.NacosInstanceRegisterRepositoryTest.testPersistInstance()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    public void testPersistInstance() {\n        InstanceRegisterDTO data = InstanceRegisterDTO.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    public void testPersistInstance() {\n        InstanceEntity data = InstanceEntity.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }"
    },
    "bPath": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java",
    "aPath": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java",
    "bCommit": "bcbf1fd40",
    "aCommit": "d8ece536e",
    "hunk": {
      "sourceChanges": [
        {
          "line": "InstanceRegisterDTO data = InstanceRegisterDTO.builder()",
          "type": "DELETE",
          "lineNo": 81
        }
      ],
      "targetChanges": [
        {
          "line": "InstanceEntity data = InstanceEntity.builder()",
          "type": "ADD",
          "lineNo": 81
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO data"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO$Builder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO$Builder.port(Integer)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO$Builder.host(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO$Builder.appName(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO.builder()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO.builder()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity data"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity$Builder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity$Builder.port(Integer)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity$Builder.host(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity$Builder.appName(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity.builder()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.register.instance.api.entity.InstanceEntity.builder()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.apache.shenyu.register.instance.api.entity.InstanceEntity",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.register.common.dto.InstanceRegisterDTO",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.apache.shenyu.register.instance.api.entity.InstanceEntity",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        81
      ]
    },
    "aCommitTime": 1666451428,
    "ID": "apache/shenyu:7",
    "trivial": [
      "MOVE_RENAME_CLASS"
    ]
  },
  {
    "name": "org.apache.shenyu.plugin.sentinel.SentinelPluginTest.testSentinelPluginNotHttpStatusOK()",
    "bSource": {
      "startLine": 191,
      "code": "/**\n     * Test chain.execute doOnSuccess return other status.\n     */\n    @Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data))\n                .expectError(HttpStatusCodeException.class).verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }"
    },
    "aSource": {
      "startLine": 190,
      "code": "/**\n     * Test chain.execute doOnSuccess return other status.\n     */\n    @Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data)).expectComplete().verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java",
    "bCommit": "20576a278",
    "aCommit": "942435610",
    "hunk": {
      "sourceChanges": [
        {
          "line": "StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data))",
          "type": "DELETE",
          "lineNo": 215
        },
        {
          "line": ".expectError(HttpStatusCodeException.class).verify();",
          "type": "DELETE",
          "lineNo": 216
        }
      ],
      "targetChanges": [
        {
          "line": "StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data)).expectComplete().verify();",
          "type": "ADD",
          "lineNo": 214
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "verify()"
        },
        {
          "type": "CtInvocation",
          "value": "expectError(java.lang.Class)"
        },
        {
          "type": "CtInvocation",
          "value": "create()"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.test.StepVerifier"
        },
        {
          "type": "CtExecutableReference",
          "value": "create()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin.doExecute(ServerWebExchange,ShenyuPluginChain,SelectorData,RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin sentinelPlugin"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin.doExecute(ServerWebExchange,ShenyuPluginChain,SelectorData,RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.api.ShenyuPluginChain chain"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.dto.SelectorData selectorData"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.RuleData data"
        },
        {
          "type": "CtExecutableReference",
          "value": "expectError(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "verify()"
        },
        {
          "type": "CtInvocation",
          "value": "expectComplete()"
        },
        {
          "type": "CtInvocation",
          "value": "create()"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.test.StepVerifier"
        },
        {
          "type": "CtExecutableReference",
          "value": "create()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin.doExecute(ServerWebExchange,ShenyuPluginChain,SelectorData,RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin sentinelPlugin"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.sentinel.SentinelPlugin.doExecute(ServerWebExchange,ShenyuPluginChain,SelectorData,RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.api.ShenyuPluginChain chain"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.dto.SelectorData selectorData"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.RuleData data"
        },
        {
          "type": "CtExecutableReference",
          "value": "expectComplete()"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "expectError",
          "childCount": 2
        },
        "dstNode": {
          "label": "expectComplete",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        215
      ]
    },
    "aCommitTime": 1663433298,
    "ID": "apache/shenyu:4",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.base.utils.CacheKeyUtilsTest.getKey()",
    "bSource": {
      "startLine": 34,
      "code": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).name(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }"
    },
    "aSource": {
      "startLine": 34,
      "code": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).id(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java",
    "bCommit": "fb6fd3327",
    "aCommit": "ccd8d6c57",
    "hunk": {
      "sourceChanges": [
        {
          "line": "RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).name(MOCK_NAME).build();",
          "type": "DELETE",
          "lineNo": 36
        }
      ],
      "targetChanges": [
        {
          "line": "RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).id(MOCK_NAME).build();",
          "type": "ADD",
          "lineNo": 36
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.RuleData ruleData"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.RuleData"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.name(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.selectorId(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData.builder()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.common.dto.RuleData"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData.builder()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.selectorId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String MOCK_SELECTOR_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.name(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String MOCK_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.build()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.RuleData ruleData"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.RuleData"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.build()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.id(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.selectorId(String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.RuleData.builder()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.common.dto.RuleData"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData.builder()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.selectorId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String MOCK_SELECTOR_ID"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.id(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String MOCK_NAME"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.RuleData$Builder.build()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "name",
          "childCount": 2
        },
        "dstNode": {
          "label": "id",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        37
      ]
    },
    "aCommitTime": 1663224532,
    "ID": "apache/shenyu:8",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.config.MapperConfigTest.oracleSqlUpdateInterceptorTest()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(mapperConfig.oracleSqlUpdateInterceptor());\n    }"
    },
    "aSource": {
      "startLine": 56,
      "code": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(oracleSQLConfig.oracleSqlUpdateInterceptor());\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/MapperConfigTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/MapperConfigTest.java",
    "bCommit": "83e9958f4",
    "aCommit": "6fee634e6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertNotNull(mapperConfig.oracleSqlUpdateInterceptor());",
          "type": "DELETE",
          "lineNo": 55
        }
      ],
      "targetChanges": [
        {
          "line": "assertNotNull(oracleSQLConfig.oracleSqlUpdateInterceptor());",
          "type": "ADD",
          "lineNo": 58
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertNotNull(org.apache.shenyu.admin.mybatis.pg.interceptor.PostgreSqlUpdateInterceptor)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNotNull(org.apache.shenyu.admin.mybatis.pg.interceptor.PostgreSqlUpdateInterceptor)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.MapperConfig.oracleSqlUpdateInterceptor()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.config.MapperConfig mapperConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.MapperConfig.oracleSqlUpdateInterceptor()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertNotNull(org.apache.shenyu.admin.mybatis.oracle.OracleSQLUpdateInterceptor)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNotNull(org.apache.shenyu.admin.mybatis.oracle.OracleSQLUpdateInterceptor)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.MapperConfig$OracleSQLConfig.oracleSqlUpdateInterceptor()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.config.MapperConfig$OracleSQLConfig oracleSQLConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.MapperConfig$OracleSQLConfig.oracleSqlUpdateInterceptor()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mapperConfig",
          "childCount": 1
        },
        "dstNode": {
          "label": "oracleSQLConfig",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        58
      ]
    },
    "aCommitTime": 1662431929,
    "ID": "apache/shenyu:6",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.ratelimiter.RateLimiterPluginTest.doExecuteAllowedTest()",
    "bSource": {
      "startLine": 81,
      "code": "/**\n     * rateLimiterPlugin doExecute , limiter allowed case.\n     */\n    @Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "/**\n     * rateLimiterPlugin doExecute , limiter allowed case.\n     */\n    @Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1, null)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java",
    "bCommit": "aa5e6d8b1",
    "aCommit": "fe4bfaf01",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Mono.just(new RateLimiterResponse(true, 1)));",
          "type": "DELETE",
          "lineNo": 88
        }
      ],
      "targetChanges": [
        {
          "line": "Mono.just(new RateLimiterResponse(true, 1, null)));",
          "type": "ADD",
          "lineNo": 88
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "just(org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse)"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtExecutableReference",
          "value": "just(org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse.RateLimiterResponse(boolean,long)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "just(org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse)"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtExecutableReference",
          "value": "just(org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse)"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse.RateLimiterResponse(boolean,long,List)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse(boolean,int)",
          "childCount": 2
        },
        "dstNode": {
          "label": "org.apache.shenyu.plugin.ratelimiter.response.RateLimiterResponse(boolean,int,<unknown>)",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        88
      ]
    },
    "aCommitTime": 1662097893,
    "ID": "apache/shenyu:15",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.utils.ShaUtilsTest.testShaEncryption()",
    "bSource": {
      "startLine": 31,
      "code": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }"
    },
    "aSource": {
      "startLine": 31,
      "code": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/ShaUtilsTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/ShaUtilsTest.java",
    "bCommit": "59331e687",
    "aCommit": "a651e6925",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));",
          "type": "DELETE",
          "lineNo": 33
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));",
          "type": "ADD",
          "lineNo": 33
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.utils.ShaUtils.shaEncryption(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.admin.utils.ShaUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.utils.ShaUtils.shaEncryption(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '123456'"
        },
        {
          "type": "CtInvocation",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.utils.ShaUtils.shaEncryption(String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.admin.utils.ShaUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.utils.ShaUtils.shaEncryption(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '123456'"
        },
        {
          "type": "CtInvocation",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        33
      ]
    },
    "aCommitTime": 1646390822,
    "ID": "apache/shenyu:12",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.general.context.GeneralContextPluginTest.testDoExecute()",
    "bSource": {
      "startLine": 89,
      "code": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n    }"
    },
    "aSource": {
      "startLine": 90,
      "code": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n        shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.SOFA.getName());\n        assertNull(shenyuGeneralContext);\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/GeneralContextPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/GeneralContextPluginTest.java",
    "bCommit": "541bffb60",
    "aCommit": "88f203b6a",
    "hunk": {
      "targetChanges": [
        {
          "line": "shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.SOFA.getName());",
          "type": "ADD",
          "lineNo": 107
        },
        {
          "line": "assertNull(shenyuGeneralContext);",
          "type": "ADD",
          "lineNo": 108
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtVariableWrite",
          "value": "java.util.Map shenyuGeneralContext"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getAttributes()"
        },
        {
          "type": "CtInvocation",
          "value": "getValue()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.ArgumentCaptor newExchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "getValue()"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAttributes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String GENERAL_CONTEXT"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.common.constant.Constants"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String GENERAL_CONTEXT"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.enums.PluginEnum.getName()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.enums.PluginEnum SOFA"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.common.enums.PluginEnum"
        },
        {
          "type": "CtFieldReference",
          "value": "org.apache.shenyu.common.enums.PluginEnum SOFA"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.enums.PluginEnum.getName()"
        },
        {
          "type": "CtInvocation",
          "value": "assertNull(java.util.Map)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertNull(java.util.Map)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Map shenyuGeneralContext"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Assignment",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "=",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "assertNull",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1639917394,
    "ID": "apache/shenyu:5",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.context.path.ContextPathPluginTest.executeTest()",
    "bSource": {
      "startLine": 79,
      "code": "/**\n     * The execute test.\n     */\n    @Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(shenyuContext.getRealUrl(), \"/order/findById\");\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "/**\n     * The execute test.\n     */\n    @Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(\"/order/findById\", shenyuContext.getRealUrl());\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java",
    "bCommit": "82ddd2757",
    "aCommit": "4441f48ad",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Assert.assertEquals(shenyuContext.getRealUrl(), \"/order/findById\");",
          "type": "DELETE",
          "lineNo": 90
        }
      ],
      "targetChanges": [
        {
          "line": "Assert.assertEquals(\"/order/findById\", shenyuContext.getRealUrl());",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.junit.Assert"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getRealUrl()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext shenyuContext"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getRealUrl()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/order/findById'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.junit.Assert"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertEquals(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '/order/findById'"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getRealUrl()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext shenyuContext"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.api.context.ShenyuContext.getRealUrl()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"/order/findById\"",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"/order/findById\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1639538049,
    "ID": "apache/shenyu:1",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.service.UpstreamCheckServiceTest.testFetchUpstreamData()",
    "bSource": {
      "startLine": 211,
      "code": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginId(anyString())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }"
    },
    "aSource": {
      "startLine": 211,
      "code": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginIds(anyList())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java",
    "bCommit": "832f0bae9",
    "aCommit": "b017c784b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(selectorMapper.findByPluginId(anyString())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));",
          "type": "DELETE",
          "lineNo": 230
        }
      ],
      "targetChanges": [
        {
          "line": "when(selectorMapper.findByPluginIds(anyList())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));",
          "type": "ADD",
          "lineNo": 230
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.ArrayList)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper.findByPluginId(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper selectorMapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper.findByPluginId(String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.ArrayList)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.model.entity.SelectorDO selectorDOWithUrlError"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.model.entity.SelectorDO selectorDOWithUrlReachable"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.ArrayList)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper.findByPluginIds(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper selectorMapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.mapper.SelectorMapper.findByPluginIds(List)"
        },
        {
          "type": "CtInvocation",
          "value": "anyList()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyList()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.ArrayList)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.Lists"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.Lists.newArrayList(Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.model.entity.SelectorDO selectorDOWithUrlError"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.model.entity.SelectorDO selectorDOWithUrlReachable"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "findByPluginId",
          "childCount": 2
        },
        "dstNode": {
          "label": "findByPluginIds",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "anyString",
          "childCount": 0
        },
        "dstNode": {
          "label": "anyList",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        232
      ]
    },
    "aCommitTime": 1639373012,
    "ID": "apache/shenyu:20",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.resilience4j.executor.RateLimiterExecutorTest.normalTest()",
    "bSource": {
      "startLine": 45,
      "code": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }"
    },
    "aSource": {
      "startLine": 45,
      "code": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono<String> mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutorTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutorTest.java",
    "bCommit": "40ce7cb25",
    "aCommit": "dc31e2ae1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "Mono mono = Mono.just(\"ERROR\");",
          "type": "DELETE",
          "lineNo": 50
        }
      ],
      "targetChanges": [
        {
          "line": "Mono<String> mono = Mono.just(\"ERROR\");",
          "type": "ADD",
          "lineNo": 50
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "reactor.core.publisher.Mono mono"
        },
        {
          "type": "CtTypeReference",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtInvocation",
          "value": "just(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtExecutableReference",
          "value": "just(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ERROR'"
        },
        {
          "type": "CtTypeReference",
          "value": "reactor.core.publisher.Mono"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "reactor.core.publisher.Mono mono"
        },
        {
          "type": "CtTypeReference",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "just(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtExecutableReference",
          "value": "just(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'ERROR'"
        },
        {
          "type": "CtTypeReference",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1637302248,
    "ID": "apache/shenyu:9",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.cryptor.response.CryptorResponsePluginTest.multiJsonDecryptTest()",
    "bSource": {
      "startLine": 171,
      "code": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(ResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 171,
      "code": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(CryptorResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePluginTest.java",
    "bCommit": "7f472d7cb",
    "aCommit": "45da0168d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(builder.response(any(ResponseDecorator.class))).thenReturn(builder);",
          "type": "DELETE",
          "lineNo": 193
        }
      ],
      "targetChanges": [
        {
          "line": "when(builder.response(any(CryptorResponseDecorator.class))).thenReturn(builder);",
          "type": "ADD",
          "lineNo": 193
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(ServerWebExchange.Builder)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "response()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.springframework.web.server.ServerWebExchange$Builder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "response()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(ServerWebExchange.Builder)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.springframework.web.server.ServerWebExchange$Builder builder"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(ServerWebExchange.Builder)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "response()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.springframework.web.server.ServerWebExchange$Builder builder"
        },
        {
          "type": "CtExecutableReference",
          "value": "response()"
        },
        {
          "type": "CtInvocation",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "any(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(ServerWebExchange.Builder)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.springframework.web.server.ServerWebExchange$Builder builder"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "FieldRead",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.apache.shenyu.plugin.cryptor.decorator.ResponseDecorator",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.apache.shenyu.plugin.cryptor.decorator.CryptorResponseDecorator",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        193
      ]
    },
    "aCommitTime": 1636355767,
    "ID": "apache/shenyu:2",
    "trivial": [
      "RENAME_CLASS"
    ]
  },
  {
    "name": "org.apache.shenyu.plugin.alibaba.dubbo.AlibabaDubboPluginTest.testAlibabaDubboPlugin()",
    "bSource": {
      "startLine": 103,
      "code": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 105,
      "code": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
    "bCommit": "61cacddea",
    "aCommit": "ef4357d56",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());",
          "type": "DELETE",
          "lineNo": 105
        }
      ],
      "targetChanges": [
        {
          "line": "final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());",
          "type": "ADD",
          "lineNo": 107
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtTypeReference",
          "value": "org.springframework.web.server.ServerWebExchange"
        },
        {
          "type": "CtInvocation",
          "value": "from()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.web.server.MockServerWebExchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "from()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.http.server.reactive.MockServerHttpRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'localhost'"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtTypeReference",
          "value": "org.springframework.web.server.ServerWebExchange"
        },
        {
          "type": "CtInvocation",
          "value": "from()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.web.server.MockServerWebExchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "from()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "remoteAddress(java.net.InetSocketAddress)"
        },
        {
          "type": "CtInvocation",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.http.server.reactive.MockServerHttpRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'localhost'"
        },
        {
          "type": "CtExecutableReference",
          "value": "remoteAddress(java.net.InetSocketAddress)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.InetSocketAddress.InetSocketAddress(String,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.InetSocketAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '127.0.0.1'"
        },
        {
          "type": "CtLiteral",
          "value": "int '20880'"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        },
        "dstNode": {
          "label": "build",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "build",
          "childCount": 1
        },
        "dstNode": {
          "label": "remoteAddress",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.springframework.mock.web.server.MockServerWebExchange",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.springframework.mock.web.server.MockServerWebExchange",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        },
        "dstNode": {
          "label": "build",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        117
      ]
    },
    "aCommitTime": 1634125147,
    "ID": "apache/shenyu:37",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.alibaba.dubbo.AlibabaDubboPluginTest.testAlibabaDubboPluginMetaDataNull()",
    "bSource": {
      "startLine": 120,
      "code": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }"
    },
    "aSource": {
      "startLine": 122,
      "code": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
    "bCommit": "61cacddea",
    "aCommit": "ef4357d56",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());",
          "type": "DELETE",
          "lineNo": 122
        }
      ],
      "targetChanges": [
        {
          "line": "final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());",
          "type": "ADD",
          "lineNo": 124
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtTypeReference",
          "value": "org.springframework.web.server.ServerWebExchange"
        },
        {
          "type": "CtInvocation",
          "value": "from()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.web.server.MockServerWebExchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "from()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.http.server.reactive.MockServerHttpRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'localhost'"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtTypeReference",
          "value": "org.springframework.web.server.ServerWebExchange"
        },
        {
          "type": "CtInvocation",
          "value": "from()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.web.server.MockServerWebExchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "from()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "remoteAddress(java.net.InetSocketAddress)"
        },
        {
          "type": "CtInvocation",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.springframework.mock.http.server.reactive.MockServerHttpRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "get(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'localhost'"
        },
        {
          "type": "CtExecutableReference",
          "value": "remoteAddress(java.net.InetSocketAddress)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.net.InetSocketAddress.InetSocketAddress(String,int)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.net.InetSocketAddress"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '127.0.0.1'"
        },
        {
          "type": "CtLiteral",
          "value": "int '20880'"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        },
        "dstNode": {
          "label": "build",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "build",
          "childCount": 1
        },
        "dstNode": {
          "label": "remoteAddress",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "org.springframework.mock.web.server.MockServerWebExchange",
          "childCount": 0
        },
        "dstNode": {
          "label": "org.springframework.mock.web.server.MockServerWebExchange",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "from",
          "childCount": 2
        },
        "dstNode": {
          "label": "build",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1634125147,
    "ID": "apache/shenyu:38",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.apache.dubbo.ApacheDubboPluginTest.doExecute()",
    "bSource": {
      "startLine": 74,
      "code": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 73,
      "code": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "bCommit": "a5a6a0901",
    "aCommit": "5bae6f7d0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(chain.execute(exchange)).thenReturn(Mono.empty());",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.api.ShenyuPluginChain.execute(ServerWebExchange)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.plugin.api.ShenyuPluginChain chain"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.api.ShenyuPluginChain.execute(ServerWebExchange)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "empty()"
        },
        {
          "type": "CtTypeAccess",
          "value": "reactor.core.publisher.Mono"
        },
        {
          "type": "CtExecutableReference",
          "value": "empty()"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        79
      ]
    },
    "aCommitTime": 1632394097,
    "ID": "apache/shenyu:21",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandleTest.testCreateDefault()",
    "bSource": {
      "startLine": 36,
      "code": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }"
    },
    "aSource": {
      "startLine": 36,
      "code": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }"
    },
    "bPath": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandleTest.java",
    "aPath": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandleTest.java",
    "bCommit": "a5a6a0901",
    "aCommit": "5bae6f7d0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH);",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH, \"\");",
          "type": "ADD",
          "lineNo": 39
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle aDefault"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle.createDefault(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle modifyResponseRuleHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle.createDefault(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle aDefault"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle.createDefault(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle modifyResponseRuleHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ModifyResponseRuleHandle.createDefault(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        39
      ]
    },
    "aCommitTime": 1632394097,
    "ID": "apache/shenyu:22",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandleTest.testCreateDefault()",
    "bSource": {
      "startLine": 35,
      "code": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }"
    },
    "aSource": {
      "startLine": 35,
      "code": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }"
    },
    "bPath": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandleTest.java",
    "aPath": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandleTest.java",
    "bCommit": "a5a6a0901",
    "aCommit": "5bae6f7d0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "RuleHandle aDefault = contextMappingHandle.createDefault(PATH);",
          "type": "DELETE",
          "lineNo": 38
        }
      ],
      "targetChanges": [
        {
          "line": "RuleHandle aDefault = contextMappingHandle.createDefault(PATH, \"\");",
          "type": "ADD",
          "lineNo": 38
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle aDefault"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle.createDefault(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle contextMappingHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle.createDefault(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle aDefault"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.RuleHandle"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle.createDefault(String,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle contextMappingHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.common.dto.convert.rule.impl.ContextMappingHandle.createDefault(String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        38
      ]
    },
    "aCommitTime": 1632394097,
    "ID": "apache/shenyu:23",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.config.DataBaseConfigurationTest.testDataBaseProperties()",
    "bSource": {
      "startLine": 32,
      "code": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, \"\");\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }"
    },
    "aSource": {
      "startLine": 32,
      "code": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true);\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java",
    "bCommit": "792dd3e5f",
    "aCommit": "1fb1d2898",
    "hunk": {
      "sourceChanges": [
        {
          "line": "DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, \"\");",
          "type": "DELETE",
          "lineNo": 37
        }
      ],
      "targetChanges": [
        {
          "line": "DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true);",
          "type": "ADD",
          "lineNo": 37
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.admin.config.properties.DataBaseProperties dataBaseProperties"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.admin.config.properties.DataBaseProperties"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration.dataBaseProperties(String,String,Boolean,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration dataBaseConfiguration"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration.dataBaseProperties(String,String,Boolean,String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dialect"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String initScript"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.admin.config.properties.DataBaseProperties dataBaseProperties"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.admin.config.properties.DataBaseProperties"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration.dataBaseProperties(String,String,Boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration dataBaseConfiguration"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.config.DataBaseConfiguration.dataBaseProperties(String,String,Boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String dialect"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String initScript"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        37
      ]
    },
    "aCommitTime": 1630897853,
    "ID": "apache/shenyu:3",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.register.client.http.RegisterUtilsTest.testDoRegisterWhenError()",
    "bSource": {
      "startLine": 85,
      "code": "@SneakyThrows\n    @Test\n    public void testDoRegisterWhenError() {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }"
    },
    "aSource": {
      "startLine": 83,
      "code": "@Test\n    public void testDoRegisterWhenError() throws IOException {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }"
    },
    "bPath": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/RegisterUtilsTest.java",
    "aPath": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/RegisterUtilsTest.java",
    "bCommit": "a3afd786d",
    "aCommit": "f86a01fe1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "@SneakyThrows",
          "type": "DELETE",
          "lineNo": 85
        },
        {
          "line": "@Test",
          "type": "DELETE",
          "lineNo": 86
        },
        {
          "line": "public void testDoRegisterWhenError() {",
          "type": "DELETE",
          "lineNo": 87
        }
      ],
      "targetChanges": [
        {
          "line": "@Test",
          "type": "ADD",
          "lineNo": 83
        },
        {
          "line": "public void testDoRegisterWhenError() throws IOException {",
          "type": "ADD",
          "lineNo": 84
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "org.apache.shenyu.register.client.http.RegisterUtilsTest.testDoRegisterWhenError()"
        },
        {
          "type": "CtAnnotation",
          "value": "lombok.SneakyThrows"
        },
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "org.apache.shenyu.register.client.http.RegisterUtilsTest.testDoRegisterWhenError()"
        },
        {
          "type": "CtAnnotation",
          "value": "org.junit.Test"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "java.io.IOException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Annotation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "lombok.SneakyThrows",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "REMOVE_METHOD_ANNOTATION",
      "ADD_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        83
      ]
    },
    "aCommitTime": 1628585195,
    "ID": "apache/shenyu:10",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.admin.utils.AesUtilsTest.testAesDecryption()",
    "bSource": {
      "startLine": 48,
      "code": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"jHcpKkiDbbQh7W7hh8yQSA==\", AES_KEY), is(\"123456\"));\n    }"
    },
    "aSource": {
      "startLine": 45,
      "code": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"bbiB8zbUo3z3oA0VqEB/IA==\", AES_KEY, IV), is(\"123456\"));\n    }"
    },
    "bPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/AesUtilsTest.java",
    "aPath": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/AesUtilsTest.java",
    "bCommit": "4cae85c2e",
    "aCommit": "733bfae7d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "assertThat(AesUtils.aesDecryption(\"jHcpKkiDbbQh7W7hh8yQSA==\", AES_KEY), is(\"123456\"));",
          "type": "DELETE",
          "lineNo": 50
        }
      ],
      "targetChanges": [
        {
          "line": "assertThat(AesUtils.aesDecryption(\"bbiB8zbUo3z3oA0VqEB/IA==\", AES_KEY, IV), is(\"123456\"));",
          "type": "ADD",
          "lineNo": 47
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.utils.AesUtils.aesDecryption(String,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.admin.utils.AesUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.utils.AesUtils.aesDecryption(String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'jHcpKkiDbbQh7W7hh8yQSA=='"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String AES_KEY"
        },
        {
          "type": "CtInvocation",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '123456'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String,<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.admin.utils.AesUtils.aesDecryption(String,String,String)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.admin.utils.AesUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.admin.utils.AesUtils.aesDecryption(String,String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'bbiB8zbUo3z3oA0VqEB/IA=='"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String AES_KEY"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String IV"
        },
        {
          "type": "CtInvocation",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "is(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '123456'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "\"jHcpKkiDbbQh7W7hh8yQSA==\"",
          "childCount": 0
        },
        "dstNode": {
          "label": "\"bbiB8zbUo3z3oA0VqEB/IA==\"",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "IV",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        47
      ]
    },
    "aCommitTime": 1625987507,
    "ID": "apache/shenyu:36",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.grpc.GrpcPluginTest.testDoExecute()",
    "bSource": {
      "startLine": 79,
      "code": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.setResult(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 79,
      "code": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.getResults().add(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java",
    "bCommit": "d537afcbf",
    "aCommit": "78d85a6b2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "response.setResult(\"success\");",
          "type": "DELETE",
          "lineNo": 92
        },
        {
          "line": "when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any()))",
          "type": "DELETE",
          "lineNo": 93
        }
      ],
      "targetChanges": [
        {
          "line": "response.getResults().add(\"success\");",
          "type": "ADD",
          "lineNo": 92
        },
        {
          "line": "when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))",
          "type": "ADD",
          "lineNo": 93
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setResult(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.grpc.proto.ShenyuGrpcResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "setResult(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'success'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "call(org.apache.shenyu.common.dto.MetaData,org.apache.shenyu.plugin.grpc.client.CallOptions,java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.grpc.client.ShenyuGrpcClient mockClient"
        },
        {
          "type": "CtExecutableReference",
          "value": "call(org.apache.shenyu.common.dto.MetaData,org.apache.shenyu.plugin.grpc.client.CallOptions,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "add(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getResults()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.grpc.proto.ShenyuGrpcResponse response"
        },
        {
          "type": "CtExecutableReference",
          "value": "getResults()"
        },
        {
          "type": "CtExecutableReference",
          "value": "add(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'success'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "call(org.apache.shenyu.common.dto.MetaData,org.apache.shenyu.plugin.grpc.client.CallOptions,java.lang.String,MethodDescriptor.MethodType)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.grpc.client.ShenyuGrpcClient mockClient"
        },
        {
          "type": "CtExecutableReference",
          "value": "call(org.apache.shenyu.common.dto.MetaData,org.apache.shenyu.plugin.grpc.client.CallOptions,java.lang.String,MethodDescriptor.MethodType)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.mockito.Mockito"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setResult",
          "childCount": 2
        },
        "dstNode": {
          "label": "add",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "response",
          "childCount": 0
        },
        "dstNode": {
          "label": "response",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        92,
        93
      ]
    },
    "aCommitTime": 1623835980,
    "ID": "apache/shenyu:17",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootServiceTest.testRegistered()",
    "bSource": {
      "startLine": 50,
      "code": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig);\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }"
    },
    "aSource": {
      "startLine": 51,
      "code": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig, new PrometheusMetricsRegister());\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }"
    },
    "bPath": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootServiceTest.java",
    "aPath": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootServiceTest.java",
    "bCommit": "60ddbe4c0",
    "aCommit": "ecb8b8554",
    "hunk": {
      "sourceChanges": [
        {
          "line": "prometheusBootService.start(metricsConfig);",
          "type": "DELETE",
          "lineNo": 57
        }
      ],
      "targetChanges": [
        {
          "line": "prometheusBootService.start(metricsConfig, new PrometheusMetricsRegister());",
          "type": "ADD",
          "lineNo": 58
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService.start(MetricsConfig)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService prometheusBootService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService.start(MetricsConfig)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.metrics.config.MetricsConfig metricsConfig"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService.start(MetricsConfig,MetricsRegister)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService prometheusBootService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.metrics.prometheus.service.PrometheusBootService.start(MetricsConfig,MetricsRegister)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.metrics.config.MetricsConfig metricsConfig"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister.PrometheusMetricsRegister()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister()",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        58
      ]
    },
    "aCommitTime": 1622609738,
    "ID": "apache/shenyu:34",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegisterTest.assertCounter()",
    "bSource": {
      "startLine": 33,
      "code": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }"
    },
    "aSource": {
      "startLine": 34,
      "code": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 1);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }"
    },
    "bPath": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegisterTest.java",
    "aPath": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegisterTest.java",
    "bCommit": "60ddbe4c0",
    "aCommit": "ecb8b8554",
    "hunk": {
      "sourceChanges": [
        {
          "line": "prometheusMetricsRegister.counterIncrement(requestTotal, labelNames);",
          "type": "DELETE",
          "lineNo": 39
        }
      ],
      "targetChanges": [
        {
          "line": "prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 1);",
          "type": "ADD",
          "lineNo": 40
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister.counterIncrement(String,String[])"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister prometheusMetricsRegister"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister.counterIncrement(String,String[])"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String requestTotal"
        },
        {
          "type": "CtVariableRead",
          "value": "String[] labelNames"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister.counterIncrement(String,String[],long)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister prometheusMetricsRegister"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.metrics.prometheus.register.PrometheusMetricsRegister.counterIncrement(String,String[],long)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String requestTotal"
        },
        {
          "type": "CtVariableRead",
          "value": "String[] labelNames"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "1",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        40
      ]
    },
    "aCommitTime": 1622609738,
    "ID": "apache/shenyu:35",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyServiceTest.genericInvokerTest()",
    "bSource": {
      "startLine": 87,
      "code": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        final ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        try (MockedStatic<DubboProviderVersionCache> dubboProviderVersionCacheMockedStatic = mockStatic(DubboProviderVersionCache.class)) {\n            DubboProviderVersionCache dubboProviderVersionCache = mock(DubboProviderVersionCache.class);\n            dubboProviderVersionCacheMockedStatic.when(() -> DubboProviderVersionCache.getInstance()).thenReturn(dubboProviderVersionCache);\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.3\");\n\n            GenericService genericService = mock(GenericService.class);\n            when(referenceConfig.get()).thenReturn(genericService);\n            when(referenceConfig.getInterface()).thenReturn(PATH);\n            CompletableFuture<Object> future = new CompletableFuture<>();\n            when(genericService.$invokeAsync(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n            when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(new Object());\n            ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n            Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n            field.setAccessible(true);\n            ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n            ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            future.complete(\"success\");\n            verify(genericService, times(1)).$invokeAsync(METHOD_NAME, LEFT, RIGHT);\n\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.2\");\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            verify(genericService, times(1)).$invoke(METHOD_NAME, LEFT, RIGHT);\n        }\n    }"
    },
    "aSource": {
      "startLine": 78,
      "code": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(referenceConfig.get()).thenReturn(genericService);\n        when(referenceConfig.getInterface()).thenReturn(PATH);\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n        ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n        apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n        future.complete(\"success\");\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java",
    "bCommit": "55ecf11aa",
    "aCommit": "eb9af33fc",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final ReferenceConfig referenceConfig = mock(ReferenceConfig.class);",
          "type": "DELETE",
          "lineNo": 89
        },
        {
          "line": "try (MockedStatic<DubboProviderVersionCache> dubboProviderVersionCacheMockedStatic = mockStatic(DubboProviderVersionCache.class)) {",
          "type": "DELETE",
          "lineNo": 90
        },
        {
          "line": "DubboProviderVersionCache dubboProviderVersionCache = mock(DubboProviderVersionCache.class);",
          "type": "DELETE",
          "lineNo": 91
        },
        {
          "line": "dubboProviderVersionCacheMockedStatic.when(() -> DubboProviderVersionCache.getInstance()).thenReturn(dubboProviderVersionCache);",
          "type": "DELETE",
          "lineNo": 92
        },
        {
          "line": "when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.3\");",
          "type": "DELETE",
          "lineNo": 93
        },
        {
          "line": "GenericService genericService = mock(GenericService.class);",
          "type": "DELETE",
          "lineNo": 95
        },
        {
          "line": "when(referenceConfig.get()).thenReturn(genericService);",
          "type": "DELETE",
          "lineNo": 96
        },
        {
          "line": "when(referenceConfig.getInterface()).thenReturn(PATH);",
          "type": "DELETE",
          "lineNo": 97
        },
        {
          "line": "CompletableFuture<Object> future = new CompletableFuture<>();",
          "type": "DELETE",
          "lineNo": 98
        },
        {
          "line": "when(genericService.$invokeAsync(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);",
          "type": "DELETE",
          "lineNo": 99
        },
        {
          "line": "when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(new Object());",
          "type": "DELETE",
          "lineNo": 100
        },
        {
          "line": "ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();",
          "type": "DELETE",
          "lineNo": 101
        },
        {
          "line": "Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");",
          "type": "DELETE",
          "lineNo": 102
        },
        {
          "line": "field.setAccessible(true);",
          "type": "DELETE",
          "lineNo": 103
        },
        {
          "line": "((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);",
          "type": "DELETE",
          "lineNo": 104
        },
        {
          "line": "ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());",
          "type": "DELETE",
          "lineNo": 105
        },
        {
          "line": "apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);",
          "type": "DELETE",
          "lineNo": 106
        },
        {
          "line": "future.complete(\"success\");",
          "type": "DELETE",
          "lineNo": 107
        },
        {
          "line": "verify(genericService, times(1)).$invokeAsync(METHOD_NAME, LEFT, RIGHT);",
          "type": "DELETE",
          "lineNo": 108
        },
        {
          "line": "when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.2\");",
          "type": "DELETE",
          "lineNo": 110
        },
        {
          "line": "apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);",
          "type": "DELETE",
          "lineNo": 111
        },
        {
          "line": "verify(genericService, times(1)).$invoke(METHOD_NAME, LEFT, RIGHT);",
          "type": "DELETE",
          "lineNo": 112
        },
        {
          "line": "}",
          "type": "DELETE",
          "lineNo": 113
        }
      ],
      "targetChanges": [
        {
          "line": "ReferenceConfig referenceConfig = mock(ReferenceConfig.class);",
          "type": "ADD",
          "lineNo": 80
        },
        {
          "line": "GenericService genericService = mock(GenericService.class);",
          "type": "ADD",
          "lineNo": 81
        },
        {
          "line": "when(referenceConfig.get()).thenReturn(genericService);",
          "type": "ADD",
          "lineNo": 82
        },
        {
          "line": "when(referenceConfig.getInterface()).thenReturn(PATH);",
          "type": "ADD",
          "lineNo": 83
        },
        {
          "line": "CompletableFuture<Object> future = new CompletableFuture<>();",
          "type": "ADD",
          "lineNo": 84
        },
        {
          "line": "when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);",
          "type": "ADD",
          "lineNo": 85
        },
        {
          "line": "ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();",
          "type": "ADD",
          "lineNo": 86
        },
        {
          "line": "Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");",
          "type": "ADD",
          "lineNo": 87
        },
        {
          "line": "field.setAccessible(true);",
          "type": "ADD",
          "lineNo": 88
        },
        {
          "line": "((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);",
          "type": "ADD",
          "lineNo": 89
        },
        {
          "line": "ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());",
          "type": "ADD",
          "lineNo": 90
        },
        {
          "line": "apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);",
          "type": "ADD",
          "lineNo": 91
        },
        {
          "line": "future.complete(\"success\");",
          "type": "ADD",
          "lineNo": 92
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.dubbo.config.ReferenceConfig"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.mockito.MockedStatic dubboProviderVersionCacheMockedStatic"
        },
        {
          "type": "CtTypeReference",
          "value": "org.mockito.MockedStatic"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache"
        },
        {
          "type": "CtInvocation",
          "value": "mockStatic(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mockStatic(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache dubboProviderVersionCache"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache)"
        },
        {
          "type": "CtInvocation",
          "value": "when()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.mockito.MockedStatic dubboProviderVersionCacheMockedStatic"
        },
        {
          "type": "CtExecutableReference",
          "value": "when()"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.getInstance()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache dubboProviderVersionCache"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.get(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache dubboProviderVersionCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.get(String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2.7.3'"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.dubbo.rpc.service.GenericService"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.dubbo.rpc.service.GenericService)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "get()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.apache.dubbo.rpc.service.GenericService)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getInterface()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "getInterface()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.concurrent.CompletableFuture"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.concurrent.CompletableFuture.CompletableFuture()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.concurrent.CompletableFuture"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "$invokeAsync(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invokeAsync(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.Object)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.Object)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.lang.Object.Object()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache applicationConfigCache"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.reflect.Field"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Class.getDeclaredField(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Class.getDeclaredField(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'cache'"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Field.setAccessible(boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Field.setAccessible(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.cache.Cache.put(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Field.get(Object)"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.cache.LoadingCache"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Field.get(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache applicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.cache.Cache.put(Object,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService apacheDubboProxyService"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.ApacheDubboProxyService(BodyParamResolveService)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyServiceTest$BodyParamResolveServiceImpl.BodyParamResolveServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyServiceTest$BodyParamResolveServiceImpl"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService apacheDubboProxyService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.dto.MetaData metaData"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.concurrent.CompletableFuture.complete(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.concurrent.CompletableFuture.complete(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'success'"
        },
        {
          "type": "CtInvocation",
          "value": "$invokeAsync(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invokeAsync(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.get(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache dubboProviderVersionCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.DubboProviderVersionCache.get(String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '2.7.2'"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService apacheDubboProxyService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.dto.MetaData metaData"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtInvocation",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtInvocation",
          "value": "verify(<unknown>,<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "verify(<unknown>,<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtInvocation",
          "value": "times(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "times(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.dubbo.config.ReferenceConfig"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.dubbo.rpc.service.GenericService"
        },
        {
          "type": "CtInvocation",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtExecutableReference",
          "value": "mock(java.lang.Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(org.apache.dubbo.rpc.service.GenericService)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "get()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "get()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(org.apache.dubbo.rpc.service.GenericService)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getInterface()"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtExecutableReference",
          "value": "getInterface()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.concurrent.CompletableFuture"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.Object"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.util.concurrent.CompletableFuture.CompletableFuture()"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.concurrent.CompletableFuture"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.rpc.service.GenericService genericService"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.concurrent.CompletableFuture)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache applicationConfigCache"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.reflect.Field"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.Class.getDeclaredField(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.Class.getDeclaredField(String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'cache'"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Field.setAccessible(boolean)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Field.setAccessible(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.cache.Cache.put(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "java.lang.reflect.Field.get(Object)"
        },
        {
          "type": "CtTypeReference",
          "value": "com.google.common.cache.LoadingCache"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.reflect.Field field"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.lang.reflect.Field.get(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.cache.ApplicationConfigCache applicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.cache.Cache.put(Object,Object)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PATH"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.dubbo.config.ReferenceConfig referenceConfig"
        },
        {
          "type": "CtLocalVariable",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService apacheDubboProxyService"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.ApacheDubboProxyService(BodyParamResolveService)"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService"
        },
        {
          "type": "CtConstructorCall",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyServiceTest$BodyParamResolveServiceImpl.BodyParamResolveServiceImpl()"
        },
        {
          "type": "CtTypeReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyServiceTest$BodyParamResolveServiceImpl"
        },
        {
          "type": "CtInvocation",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService apacheDubboProxyService"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.apache.shenyu.plugin.apache.dubbo.proxy.ApacheDubboProxyService.genericInvoker(String,MetaData,ServerWebExchange)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtFieldRead",
          "value": "org.apache.shenyu.common.dto.MetaData metaData"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.concurrent.CompletableFuture.complete(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.concurrent.CompletableFuture future"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.concurrent.CompletableFuture.complete(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'success'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "ConstructorCall",
        "parents": [
          "Invocation",
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Object()",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TryWithResource",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "",
          "childCount": 21
        }
      },
      {
        "type": "Move",
        "nodeType": "LocalVariable",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "genericService",
          "childCount": 2
        },
        "dstNode": {
          "label": "genericService",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "LocalVariable",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "future",
          "childCount": 2
        },
        "dstNode": {
          "label": "future",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        },
        "dstNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "LocalVariable",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "applicationConfigCache",
          "childCount": 2
        },
        "dstNode": {
          "label": "applicationConfigCache",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "LocalVariable",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "field",
          "childCount": 2
        },
        "dstNode": {
          "label": "field",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setAccessible",
          "childCount": 2
        },
        "dstNode": {
          "label": "setAccessible",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "put",
          "childCount": 3
        },
        "dstNode": {
          "label": "put",
          "childCount": 3
        }
      },
      {
        "type": "Move",
        "nodeType": "LocalVariable",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "apacheDubboProxyService",
          "childCount": 2
        },
        "dstNode": {
          "label": "apacheDubboProxyService",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "genericInvoker",
          "childCount": 4
        },
        "dstNode": {
          "label": "genericInvoker",
          "childCount": 4
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "TryWithResource",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "complete",
          "childCount": 2
        },
        "dstNode": {
          "label": "complete",
          "childCount": 2
        }
      }
    ],
    "refactorings": [
      "REMOVE_VARIABLE_MODIFIER"
    ],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        81,
        82,
        83,
        84,
        99,
        101,
        103
      ]
    },
    "aCommitTime": 1621609414,
    "ID": "apache/shenyu:33",
    "trivial": null
  },
  {
    "name": "org.apache.shenyu.plugin.sentinel.handler.SentinelRuleHandleTest.removeRule()",
    "bSource": {
      "startLine": 53,
      "code": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }"
    },
    "aSource": {
      "startLine": 53,
      "code": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }"
    },
    "bPath": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java",
    "aPath": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java",
    "bCommit": "e8e70d041",
    "aCommit": "f382faf69",
    "hunk": {
      "targetChanges": [
        {
          "line": "sentinelHandle.setDegradeRuleMinRequestAmount(5);",
          "type": "ADD",
          "lineNo": 65
        },
        {
          "line": "sentinelHandle.setDegradeRuleStatIntervals(10);",
          "type": "ADD",
          "lineNo": 66
        },
        {
          "line": "sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);",
          "type": "ADD",
          "lineNo": 67
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setDegradeRuleMinRequestAmount(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.SentinelHandle sentinelHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "setDegradeRuleMinRequestAmount(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '5'"
        },
        {
          "type": "CtInvocation",
          "value": "setDegradeRuleStatIntervals(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.SentinelHandle sentinelHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "setDegradeRuleStatIntervals(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '10'"
        },
        {
          "type": "CtInvocation",
          "value": "setDegradeRuleSlowRatioThreshold(double)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.apache.shenyu.common.dto.convert.SentinelHandle sentinelHandle"
        },
        {
          "type": "CtExecutableReference",
          "value": "setDegradeRuleSlowRatioThreshold(double)"
        },
        {
          "type": "CtLiteral",
          "value": "double '0.5'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setDegradeRuleMinRequestAmount",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setDegradeRuleStatIntervals",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setDegradeRuleSlowRatioThreshold",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1620999372,
    "ID": "apache/shenyu:29",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.plugin.contextpath.ContextPathMappingPluginTest.executeRealPathTest()",
    "bSource": {
      "startLine": 92,
      "code": "/**\n     * The execute real path test.\n     */\n    @Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }"
    },
    "aSource": {
      "startLine": 95,
      "code": "/**\n     * The execute real path test.\n     */\n    @Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }"
    },
    "bPath": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
    "aPath": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
    "bCommit": "a0c3e0cca",
    "aCommit": "149360d94",
    "hunk": {
      "targetChanges": [
        {
          "line": "ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);",
          "type": "ADD",
          "lineNo": 104
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.base.cache.BaseHandleCache.cachedHandle(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.base.cache.BaseHandleCache.cachedHandle(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler.getCacheKeyName(RuleData)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler.getCacheKeyName(RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.dromara.soul.common.dto.RuleData ruleData"
        },
        {
          "type": "CtVariableRead",
          "value": "org.dromara.soul.common.dto.convert.rule.impl.ContextMappingHandle contextMappingHandle"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "cachedHandle",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        106
      ]
    },
    "aCommitTime": 1618739650,
    "ID": "apache/shenyu:30",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.plugin.contextpath.ContextPathMappingPluginTest.executeTest()",
    "bSource": {
      "startLine": 79,
      "code": "/**\n     * The execute test.\n     */\n    @Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }"
    },
    "aSource": {
      "startLine": 81,
      "code": "/**\n     * The execute test.\n     */\n    @Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }"
    },
    "bPath": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
    "aPath": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
    "bCommit": "a0c3e0cca",
    "aCommit": "149360d94",
    "hunk": {
      "targetChanges": [
        {
          "line": "ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);",
          "type": "ADD",
          "lineNo": 89
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.base.cache.BaseHandleCache.cachedHandle(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.contextpath.cache.ApplicationConfigCache.getInstance()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.base.cache.BaseHandleCache.cachedHandle(Object,Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler.getCacheKeyName(RuleData)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.plugin.contextpath.handler.ContextPathMappingPluginDataHandler.getCacheKeyName(RuleData)"
        },
        {
          "type": "CtFieldRead",
          "value": "org.dromara.soul.common.dto.RuleData ruleData"
        },
        {
          "type": "CtVariableRead",
          "value": "org.dromara.soul.common.dto.convert.rule.impl.ContextMappingHandle contextMappingHandle"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "cachedHandle",
          "childCount": 3
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        91
      ]
    },
    "aCommitTime": 1618739650,
    "ID": "apache/shenyu:31",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.plugin.apache.dubbo.ApacheDubboPluginTest.testMethodIsNullExecute()",
    "bSource": {
      "startLine": 99,
      "code": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 99,
      "code": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "aPath": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "bCommit": "5ab507eac",
    "aCommit": "12527b4f2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");",
          "type": "DELETE",
          "lineNo": 103
        }
      ],
      "targetChanges": [
        {
          "line": "exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");",
          "type": "ADD",
          "lineNo": 103
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getAttributes()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAttributes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUBBO_PARAMS"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.constant.Constants"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String DUBBO_PARAMS"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '{key:value}'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getAttributes()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAttributes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PARAM_TRANSFORM"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.constant.Constants"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String PARAM_TRANSFORM"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '{key:value}'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Constants.DUBBO_PARAMS",
          "childCount": 0
        },
        "dstNode": {
          "label": "Constants.PARAM_TRANSFORM",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        103
      ]
    },
    "aCommitTime": 1616504516,
    "ID": "apache/shenyu:25",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.plugin.apache.dubbo.ApacheDubboPluginTest.doExecute()",
    "bSource": {
      "startLine": 76,
      "code": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "aSource": {
      "startLine": 76,
      "code": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
    },
    "bPath": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "aPath": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
    "bCommit": "5ab507eac",
    "aCommit": "12527b4f2",
    "hunk": {
      "sourceChanges": [
        {
          "line": "exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");",
          "type": "DELETE",
          "lineNo": 80
        }
      ],
      "targetChanges": [
        {
          "line": "exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");",
          "type": "ADD",
          "lineNo": 80
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getAttributes()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAttributes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String DUBBO_PARAMS"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.constant.Constants"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String DUBBO_PARAMS"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '{key:value}'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "getAttributes()"
        },
        {
          "type": "CtFieldRead",
          "value": "org.springframework.web.server.ServerWebExchange exchange"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAttributes()"
        },
        {
          "type": "CtExecutableReference",
          "value": "put(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String PARAM_TRANSFORM"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.constant.Constants"
        },
        {
          "type": "CtFieldReference",
          "value": "java.lang.String PARAM_TRANSFORM"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '{key:value}'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "Constants.DUBBO_PARAMS",
          "childCount": 0
        },
        "dstNode": {
          "label": "Constants.PARAM_TRANSFORM",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        80
      ]
    },
    "aCommitTime": 1616504516,
    "ID": "apache/shenyu:26",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.admin.listener.nacos.NacosDataChangedListenerTest.testOnRuleChanged()",
    "bSource": {
      "startLine": 195,
      "code": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));\n    }"
    },
    "aSource": {
      "startLine": 195,
      "code": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));\n    }"
    },
    "bPath": "soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java",
    "aPath": "soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java",
    "bCommit": "8f001e0fe",
    "aCommit": "751c2ce73",
    "hunk": {
      "sourceChanges": [
        {
          "line": "GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));",
          "type": "DELETE",
          "lineNo": 225
        }
      ],
      "targetChanges": [
        {
          "line": "GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));",
          "type": "ADD",
          "lineNo": 225
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.common.utils.GsonUtils.toJson(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.common.utils.GsonUtils.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.utils.GsonUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.common.utils.GsonUtils.getInstance()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.common.utils.GsonUtils.toJson(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableMap.of(Object,Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.ImmutableMap"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableMap.of(Object,Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selectorId1"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableList.of()"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.ImmutableList"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableList.of()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.common.utils.GsonUtils.toJson(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.common.utils.GsonUtils.getInstance()"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.common.utils.GsonUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.common.utils.GsonUtils.getInstance()"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.common.utils.GsonUtils.toJson(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableMap.of(Object,Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.ImmutableMap"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableMap.of(Object,Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String selectorId1"
        },
        {
          "type": "CtInvocation",
          "value": "com.google.common.collect.ImmutableList.of(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "com.google.common.collect.ImmutableList"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.google.common.collect.ImmutableList.of(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.dromara.soul.common.dto.RuleData ruleData1"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Object",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "com.google.common.collect.ImmutableList",
          "childCount": 1
        }
      },
      {
        "type": "Insert",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "ruleData1",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.Object",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Object",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "failure",
      "error_lines": [
        223
      ]
    },
    "aCommitTime": 1611563795,
    "ID": "apache/shenyu:18",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.plugin.sofa.proxy.SofaProxyServiceTest.test()",
    "bSource": {
      "startLine": 80,
      "code": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }"
    },
    "aSource": {
      "startLine": 80,
      "code": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$genericInvoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }"
    },
    "bPath": "soul-plugin/soul-plugin-sofa/src/test/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyServiceTest.java",
    "aPath": "soul-plugin/soul-plugin-sofa/src/test/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyServiceTest.java",
    "bCommit": "d6caa0a5c",
    "aCommit": "bae0e5a68",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);",
          "type": "DELETE",
          "lineNo": 86
        }
      ],
      "targetChanges": [
        {
          "line": "when(genericService.$genericInvoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);",
          "type": "ADD",
          "lineNo": 86
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "com.alipay.sofa.rpc.api.GenericService genericService"
        },
        {
          "type": "CtExecutableReference",
          "value": "$invoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "$genericInvoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtVariableRead",
          "value": "com.alipay.sofa.rpc.api.GenericService genericService"
        },
        {
          "type": "CtExecutableReference",
          "value": "$genericInvoke(java.lang.String,java.lang.String[],java.lang.Object[])"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String METHOD_NAME"
        },
        {
          "type": "CtFieldRead",
          "value": "String[] LEFT"
        },
        {
          "type": "CtFieldRead",
          "value": "Object[] RIGHT"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(<unknown>)"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "$invoke",
          "childCount": 4
        },
        "dstNode": {
          "label": "$genericInvoke",
          "childCount": 4
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "success",
      "error_lines": null
    },
    "aCommitTime": 1611409578,
    "ID": "apache/shenyu:28",
    "trivial": null
  },
  {
    "name": "org.dromara.soul.admin.page.PageResultUtilsTest.testEmptyResult()",
    "bSource": {
      "startLine": 33,
      "code": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }"
    },
    "aSource": {
      "startLine": 33,
      "code": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }"
    },
    "bPath": "soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java",
    "aPath": "soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java",
    "bCommit": "3225333c1",
    "aCommit": "a5a6831f0",
    "hunk": {
      "sourceChanges": [
        {
          "line": "final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);",
          "type": "DELETE",
          "lineNo": 36
        }
      ],
      "targetChanges": [
        {
          "line": "final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);",
          "type": "ADD",
          "lineNo": 36
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.dromara.soul.admin.page.CommonPager result"
        },
        {
          "type": "CtTypeReference",
          "value": "org.dromara.soul.admin.page.CommonPager"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.admin.page.PageResultUtils.result(PageParameter,Integer,Supplier)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.admin.page.PageResultUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.admin.page.PageResultUtils.result(PageParameter,Integer,Supplier)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.dromara.soul.admin.page.PageParameter pageParameter"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReferenceExpression",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.ArrayList"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "org.dromara.soul.admin.page.CommonPager result"
        },
        {
          "type": "CtTypeReference",
          "value": "org.dromara.soul.admin.page.CommonPager"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "org.dromara.soul.admin.page.PageResultUtils.result(PageParameter,Supplier,Supplier)"
        },
        {
          "type": "CtTypeAccess",
          "value": "org.dromara.soul.admin.page.PageResultUtils"
        },
        {
          "type": "CtExecutableReference",
          "value": "org.dromara.soul.admin.page.PageResultUtils.result(PageParameter,Supplier,Supplier)"
        },
        {
          "type": "CtVariableRead",
          "value": "org.dromara.soul.admin.page.PageParameter pageParameter"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReferenceExpression",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.ArrayList.ArrayList()"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.ArrayList"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Lambda",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "0",
          "childCount": 0
        },
        "dstNode": {
          "label": "0",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "compile_error",
      "error_lines": [
        36
      ]
    },
    "aCommitTime": 1611248851,
    "ID": "apache/shenyu:24",
    "trivial": null
  }
]