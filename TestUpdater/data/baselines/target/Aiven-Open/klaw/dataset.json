[
  {
    "name": "io.aiven.klaw.controller.UiConfigControllerTest.showActivityLog()",
    "bSource": {
      "startLine": 391,
      "code": "@Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "aSource": {
      "startLine": 391,
      "code": "@Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), any(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/controller/UiConfigControllerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/controller/UiConfigControllerTest.java",
    "bCommit": "d2aeacb7",
    "aCommit": "32e27eec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(uiConfigControllerService.showActivityLog(anyString(), anyString(), anyString()))",
          "type": "DELETE",
          "lineNo": 395
        }
      ],
      "targetChanges": [
        {
          "line": "when(uiConfigControllerService.showActivityLog(anyString(), anyString(), any(), anyString()))",
          "type": "ADD",
          "lineNo": 395
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.UiConfigControllerService.showActivityLog(String,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.UiConfigControllerService uiConfigControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.UiConfigControllerService.showActivityLog(String,String,String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.UiConfigControllerService.showActivityLog(String,String,OrderBy,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.UiConfigControllerService uiConfigControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.UiConfigControllerService.showActivityLog(String,String,OrderBy,String)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "any",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1709718215,
    "ID": "Aiven-Open/klaw:22",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbcTest.selectActivityLog2()",
    "bSource": {
      "startLine": 280,
      "code": "@Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs = selectData.selectActivityLog(username, env, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }"
    },
    "aSource": {
      "startLine": 282,
      "code": "@Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs =\n        selectData.selectActivityLog(username, env, OrderBy.DESC, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbcTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbcTest.java",
    "bCommit": "d2aeacb7",
    "aCommit": "32e27eec",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<ActivityLog> activityLogs = selectData.selectActivityLog(username, env, true, 1);",
          "type": "DELETE",
          "lineNo": 291
        }
      ],
      "targetChanges": [
        {
          "line": "List<ActivityLog> activityLogs =",
          "type": "ADD",
          "lineNo": 293
        },
        {
          "line": "selectData.selectActivityLog(username, env, OrderBy.DESC, true, 1);",
          "type": "ADD",
          "lineNo": 294
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List activityLogs"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.ActivityLog"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc.selectActivityLog(String,String,boolean,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc selectData"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc.selectActivityLog(String,String,boolean,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String username"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String env"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List activityLogs"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.ActivityLog"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc.selectActivityLog(String,String,OrderBy,boolean,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc selectData"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.SelectDataJdbc.selectActivityLog(String,String,OrderBy,boolean,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String username"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String env"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.OrderBy DESC"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.OrderBy"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.OrderBy DESC"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "OrderBy.DESC",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1709718215,
    "ID": "Aiven-Open/klaw:23",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.controller.TopicControllerTest.getTopics()",
    "bSource": {
      "startLine": 236,
      "code": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .param(\"topicType\", \"\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "aSource": {
      "startLine": 236,
      "code": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "bCommit": "14b0a047",
    "aCommit": "1ee87037",
    "hunk": {
      "sourceChanges": [
        {
          "line": ".param(\"topicType\", \"\")",
          "type": "DELETE",
          "lineNo": 251
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtExecutableReference",
          "value": "param(java.lang.String,java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'topicType'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "perform",
          "childCount": 2
        },
        "dstNode": {
          "label": "andExpect",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "accept",
          "childCount": 2
        },
        "dstNode": {
          "label": "perform",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "contentType",
          "childCount": 2
        },
        "dstNode": {
          "label": "accept",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "param",
          "childCount": 3
        },
        "dstNode": {
          "label": "contentType",
          "childCount": 2
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "andExpect",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "andExpect",
          "childCount": 2
        },
        "dstNode": {
          "label": "andExpect",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isOk",
          "childCount": 1
        },
        "dstNode": {
          "label": "isOk",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "mvc",
          "childCount": 1
        },
        "dstNode": {
          "label": "mvc",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "MediaType.APPLICATION_JSON",
          "childCount": 0
        },
        "dstNode": {
          "label": "MediaType.APPLICATION_JSON",
          "childCount": 0
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "MediaType.APPLICATION_JSON",
          "childCount": 0
        },
        "dstNode": {
          "label": "MediaType.APPLICATION_JSON",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1705676479,
    "ID": "Aiven-Open/klaw:2",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ClusterApiServiceTest.getAllTopicsFailure()",
    "bSource": {
      "startLine": 196,
      "code": "@Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () -> clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1))\n        .isInstanceOf(KlawException.class);\n  }"
    },
    "aSource": {
      "startLine": 201,
      "code": "@Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () ->\n                clusterApiService.getAllTopics(\n                    \"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1, false))\n        .isInstanceOf(KlawException.class);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "bCommit": "2f7da4fc",
    "aCommit": "bb1afdab",
    "hunk": {
      "sourceChanges": [
        {
          "line": "() -> clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1))",
          "type": "DELETE",
          "lineNo": 205
        }
      ],
      "targetChanges": [
        {
          "line": "() ->",
          "type": "ADD",
          "lineNo": 210
        },
        {
          "line": "clusterApiService.getAllTopics(",
          "type": "ADD",
          "lineNo": 211
        },
        {
          "line": "\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1, false))",
          "type": "ADD",
          "lineNo": 212
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "getAllTopics()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ClusterApiService clusterApiService"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.service.ClusterApiService clusterApiService"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAllTopics()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> KafkaSupportedProtocol.PLAINTEXT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "getAllTopics()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ClusterApiService clusterApiService"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.service.ClusterApiService clusterApiService"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAllTopics()"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtVariableRead",
          "value": "<unknown> KafkaSupportedProtocol.PLAINTEXT"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Lambda",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1698405847,
    "ID": "Aiven-Open/klaw:13",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.auth.KwAuthenticationSuccessHandlerTest.getRedirectPageReturnFullPathRequestUriQueryTest()",
    "bSource": {
      "startLine": 67,
      "code": "@Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }"
    },
    "aSource": {
      "startLine": 70,
      "code": "@Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
    "bCommit": "5c8e9b56",
    "aCommit": "ffd4da7b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);",
          "type": "DELETE",
          "lineNo": 73
        }
      ],
      "targetChanges": [
        {
          "line": "String redirectedPage =",
          "type": "ADD",
          "lineNo": 76
        },
        {
          "line": "kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);",
          "type": "ADD",
          "lineNo": 77
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String redirectedPage"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler.getRedirectPage(HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler kwAuthenticationSuccessHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler.getRedirectPage(HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "jakarta.servlet.http.HttpServletRequest httpServletRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String redirectedPage"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRedirectPage(jakarta.servlet.http.HttpServletRequest,io.aiven.klaw.auth.Authentication)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler kwAuthenticationSuccessHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRedirectPage(jakarta.servlet.http.HttpServletRequest,io.aiven.klaw.auth.Authentication)"
        },
        {
          "type": "CtFieldRead",
          "value": "jakarta.servlet.http.HttpServletRequest httpServletRequest"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1693832441,
    "ID": "Aiven-Open/klaw:24",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.auth.KwAuthenticationSuccessHandlerTest.getRedirectPageReturnRootForServletPathCheckTest()",
    "bSource": {
      "startLine": 58,
      "code": "@Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }"
    },
    "aSource": {
      "startLine": 60,
      "code": "@Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
    "bCommit": "5c8e9b56",
    "aCommit": "ffd4da7b",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);",
          "type": "DELETE",
          "lineNo": 63
        }
      ],
      "targetChanges": [
        {
          "line": "String redirectedPage =",
          "type": "ADD",
          "lineNo": 65
        },
        {
          "line": "kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);",
          "type": "ADD",
          "lineNo": 66
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String redirectedPage"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler.getRedirectPage(HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler kwAuthenticationSuccessHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler.getRedirectPage(HttpServletRequest)"
        },
        {
          "type": "CtFieldRead",
          "value": "jakarta.servlet.http.HttpServletRequest httpServletRequest"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String redirectedPage"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "getRedirectPage(jakarta.servlet.http.HttpServletRequest,io.aiven.klaw.auth.Authentication)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.auth.KwAuthenticationSuccessHandler kwAuthenticationSuccessHandler"
        },
        {
          "type": "CtExecutableReference",
          "value": "getRedirectPage(jakarta.servlet.http.HttpServletRequest,io.aiven.klaw.auth.Authentication)"
        },
        {
          "type": "CtFieldRead",
          "value": "jakarta.servlet.http.HttpServletRequest httpServletRequest"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1693832441,
    "ID": "Aiven-Open/klaw:25",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.UsersTeamsControllerServiceTest.deleteTeamFailure()",
    "bSource": {
      "startLine": 261,
      "code": "@Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllUsersInfoForTeam(teamId, tenantId))\n        .thenReturn(Collections.singletonList(new UserInfo()));\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }"
    },
    "aSource": {
      "startLine": 257,
      "code": "@Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.existsUsersInfoForTeam(teamId, tenantId)).thenReturn(true);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "bCommit": "3cfe392a",
    "aCommit": "604d4797",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.getAllUsersInfoForTeam(teamId, tenantId))",
          "type": "DELETE",
          "lineNo": 271
        },
        {
          "line": ".thenReturn(Collections.singletonList(new UserInfo()));",
          "type": "DELETE",
          "lineNo": 272
        }
      ],
      "targetChanges": [
        {
          "line": "when(handleDbRequests.existsUsersInfoForTeam(teamId, tenantId)).thenReturn(true);",
          "type": "ADD",
          "lineNo": 267
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getAllUsersInfoForTeam(Integer,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getAllUsersInfoForTeam(Integer,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "int teamId"
        },
        {
          "type": "CtVariableRead",
          "value": "int tenantId"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Collections"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Collections.singletonList(Object)"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.UserInfo.UserInfo()"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.UserInfo"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "when(boolean)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(boolean)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.existsUsersInfoForTeam(Integer,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.existsUsersInfoForTeam(Integer,int)"
        },
        {
          "type": "CtVariableRead",
          "value": "int teamId"
        },
        {
          "type": "CtVariableRead",
          "value": "int tenantId"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'true'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getAllUsersInfoForTeam",
          "childCount": 3
        },
        "dstNode": {
          "label": "existsUsersInfoForTeam",
          "childCount": 3
        }
      },
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "singletonList",
          "childCount": 3
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "true",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1693244338,
    "ID": "Aiven-Open/klaw:5",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicSyncControllerServiceTest.updateSyncTopicsSuccess()",
    "bSource": {
      "startLine": 191,
      "code": "@Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any())).thenReturn(ApiResultStatus.SUCCESS.value);\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "aSource": {
      "startLine": 192,
      "code": "@Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any()))\n        .thenReturn(\n            CRUDResponse.<Topic>builder().resultStatus(ApiResultStatus.SUCCESS.value).build());\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicSyncControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicSyncControllerServiceTest.java",
    "bCommit": "8e673305",
    "aCommit": "ddef9de1",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.addToSynctopics(any())).thenReturn(ApiResultStatus.SUCCESS.value);",
          "type": "DELETE",
          "lineNo": 201
        }
      ],
      "targetChanges": [
        {
          "line": "when(handleDbRequests.addToSynctopics(any()))",
          "type": "ADD",
          "lineNo": 202
        },
        {
          "line": ".thenReturn(",
          "type": "ADD",
          "lineNo": 203
        },
        {
          "line": "CRUDResponse.<Topic>builder().resultStatus(ApiResultStatus.SUCCESS.value).build());",
          "type": "ADD",
          "lineNo": 204
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.addToSynctopics(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.addToSynctopics(List)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.addToSynctopics(List)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.addToSynctopics(List)"
        },
        {
          "type": "CtInvocation",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "any()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn()"
        },
        {
          "type": "CtInvocation",
          "value": "build()"
        },
        {
          "type": "CtInvocation",
          "value": "resultStatus(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "builder()"
        },
        {
          "type": "CtExecutableReference",
          "value": "builder()"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.Topic"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.dao.CRUDResponse"
        },
        {
          "type": "CtExecutableReference",
          "value": "resultStatus(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        },
        {
          "type": "CtExecutableReference",
          "value": "build()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "build",
          "childCount": 1
        }
      },
      {
        "type": "Move",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "ApiResultStatus.SUCCESS.value",
          "childCount": 0
        },
        "dstNode": {
          "label": "ApiResultStatus.SUCCESS.value",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1691671718,
    "ID": "Aiven-Open/klaw:10",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.UsersTeamsControllerServiceTest.deleteUserFailureisAdmin()",
    "bSource": {
      "startLine": 293,
      "code": "@Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllComponentsCountForUser(\"testuser\", 101)).thenReturn(1);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }"
    },
    "aSource": {
      "startLine": 293,
      "code": "@Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "bCommit": "61b67d42",
    "aCommit": "da379ca6",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.getAllComponentsCountForUser(\"testuser\", 101)).thenReturn(1);",
          "type": "DELETE",
          "lineNo": 302
        }
      ],
      "type": "DELETE",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(int)"
        },
        {
          "type": "CtInvocation",
          "value": "when(int)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(int)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getAllComponentsCountForUser(String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getAllComponentsCountForUser(String,int)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testuser'"
        },
        {
          "type": "CtLiteral",
          "value": "int '101'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": []
    },
    "astActions": [
      {
        "type": "Delete",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1691142779,
    "ID": "Aiven-Open/klaw:8",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ServerConfigServiceTest.getAllProps()",
    "bSource": {
      "startLine": 85,
      "code": "@Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    List<ServerConfigProperties> list = serverConfigService.getAllProps();\n    assertThat(list).isEmpty(); // filtering for spring. and klaw.\n  }"
    },
    "aSource": {
      "startLine": 86,
      "code": "@Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    Collection<ServerConfigProperties> collection = serverConfigService.getAllProps();\n    assertThat(collection).isEmpty(); // filtering for spring. and klaw.\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "bCommit": "c4ce9e01",
    "aCommit": "61b67d42",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<ServerConfigProperties> list = serverConfigService.getAllProps();",
          "type": "DELETE",
          "lineNo": 90
        },
        {
          "line": "assertThat(list).isEmpty(); // filtering for spring. and klaw.",
          "type": "DELETE",
          "lineNo": 91
        }
      ],
      "targetChanges": [
        {
          "line": "Collection<ServerConfigProperties> collection = serverConfigService.getAllProps();",
          "type": "ADD",
          "lineNo": 91
        },
        {
          "line": "assertThat(collection).isEmpty(); // filtering for spring. and klaw.",
          "type": "ADD",
          "lineNo": 92
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List list"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.ServerConfigProperties"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllProps()"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.util.List)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List list"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.Collection collection"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Collection"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.ServerConfigProperties"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllProps()"
        },
        {
          "type": "CtInvocation",
          "value": "isEmpty()"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(<unknown>)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.Collection collection"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEmpty()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "list",
          "childCount": 2
        },
        "dstNode": {
          "label": "collection",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "VARIABLE_TYPE",
        "parents": [
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.List",
          "childCount": 1
        },
        "dstNode": {
          "label": "java.util.Collection",
          "childCount": 1
        }
      },
      {
        "type": "Update",
        "nodeType": "VariableRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "list",
          "childCount": 0
        },
        "dstNode": {
          "label": "collection",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE",
      "RENAME_VARIABLE"
    ],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1691141213,
    "ID": "Aiven-Open/klaw:9",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.UsersTeamsControllerServiceTest.resetPassword_noUser()",
    "bSource": {
      "startLine": 175,
      "code": "@Test\n  public void resetPassword_noUser() throws KlawException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }"
    },
    "aSource": {
      "startLine": 176,
      "code": "@Test\n  public void resetPassword_noUser() throws KlawNotAuthorizedException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
    "bCommit": "9fc3fe03",
    "aCommit": "2136704d",
    "hunk": {
      "sourceChanges": [
        {
          "line": "public void resetPassword_noUser() throws KlawException {",
          "type": "DELETE",
          "lineNo": 176
        }
      ],
      "targetChanges": [
        {
          "line": "public void resetPassword_noUser() throws KlawNotAuthorizedException {",
          "type": "ADD",
          "lineNo": 177
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtMethod",
          "value": "io.aiven.klaw.service.UsersTeamsControllerServiceTest.resetPassword_noUser()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.error.KlawException"
        }
      ],
      "targetElements": [
        {
          "type": "CtMethod",
          "value": "io.aiven.klaw.service.UsersTeamsControllerServiceTest.resetPassword_noUser()"
        },
        {
          "type": "CtTypeReference",
          "value": "void"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "THROWN",
        "parents": [
          "THROWN_TYPES",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "io.aiven.klaw.error.KlawException",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.error.KlawNotAuthorizedException",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_THROWN_EXCEPTION_TYPE"
    ],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1687863725,
    "ID": "Aiven-Open/klaw:3",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicOverviewServiceTest.givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion()",
    "bSource": {
      "startLine": 172,
      "code": "@Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }"
    },
    "aSource": {
      "startLine": 178,
      "code": "@Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC, AclGroupBy.NONE);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "bCommit": "ddd80773",
    "aCommit": "aaf7a268",
    "hunk": {
      "sourceChanges": [
        {
          "line": "TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC);",
          "type": "DELETE",
          "lineNo": 183
        }
      ],
      "targetChanges": [
        {
          "line": "TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC, AclGroupBy.NONE);",
          "type": "ADD",
          "lineNo": 189
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.response.TopicOverview returnedValue"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.response.TopicOverview"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicOverviewService topicOverviewService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TESTTOPIC"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.response.TopicOverview returnedValue"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.response.TopicOverview"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String,AclGroupBy)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicOverviewService topicOverviewService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String,AclGroupBy)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String TESTTOPIC"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.AclGroupBy NONE"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.AclGroupBy"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.AclGroupBy NONE"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "AclGroupBy.NONE",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681736370,
    "ID": "Aiven-Open/klaw:20",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicOverviewServiceTest.getAclsSyncFalse2()",
    "bSource": {
      "startLine": 134,
      "code": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "aSource": {
      "startLine": 139,
      "code": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList =\n        topicOverviewService.getTopicOverview(topicNameSearch, AclGroupBy.NONE).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "bCommit": "ddd80773",
    "aCommit": "aaf7a268",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();",
          "type": "DELETE",
          "lineNo": 163
        }
      ],
      "targetChanges": [
        {
          "line": "List<AclInfo> aclList =",
          "type": "ADD",
          "lineNo": 168
        },
        {
          "line": "topicOverviewService.getTopicOverview(topicNameSearch, AclGroupBy.NONE).getAclInfoList();",
          "type": "ADD",
          "lineNo": 169
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List aclList"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.AclInfo"
        },
        {
          "type": "CtInvocation",
          "value": "getAclInfoList()"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicOverviewService topicOverviewService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String topicNameSearch"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAclInfoList()"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List aclList"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.AclInfo"
        },
        {
          "type": "CtInvocation",
          "value": "getAclInfoList()"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String,AclGroupBy)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicOverviewService topicOverviewService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicOverviewService.getTopicOverview(String,AclGroupBy)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String topicNameSearch"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.AclGroupBy NONE"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.AclGroupBy"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.AclGroupBy NONE"
        },
        {
          "type": "CtExecutableReference",
          "value": "getAclInfoList()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "TypeAccess",
        "parents": [
          "Invocation",
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "AclGroupBy.NONE",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681736370,
    "ID": "Aiven-Open/klaw:21",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicOverviewServiceTest.getAclsSyncFalse1()",
    "bSource": {
      "startLine": 97,
      "code": "@Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "aSource": {
      "startLine": 97,
      "code": "@Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "bCommit": "55b72c5c",
    "aCommit": "4f3e3ef8",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.getTopicTeam(anyString(), anyInt()))",
          "type": "DELETE",
          "lineNo": 113
        }
      ],
      "targetChanges": [
        {
          "line": "when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))",
          "type": "ADD",
          "lineNo": 113
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getTopicTeam(String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getTopicTeam(String,int)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getTopicsForTopicName()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.CommonUtilsService commonUtilsService"
        },
        {
          "type": "CtExecutableReference",
          "value": "getTopicsForTopicName()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getTopicTeam",
          "childCount": 3
        },
        "dstNode": {
          "label": "getTopicsForTopicName",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "handleDbRequests",
          "childCount": 1
        },
        "dstNode": {
          "label": "commonUtilsService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681467999,
    "ID": "Aiven-Open/klaw:14",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicOverviewServiceTest.getAclsSyncFalse2()",
    "bSource": {
      "startLine": 134,
      "code": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "aSource": {
      "startLine": 134,
      "code": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
    "bCommit": "55b72c5c",
    "aCommit": "4f3e3ef8",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.getTopicTeam(anyString(), anyInt()))",
          "type": "DELETE",
          "lineNo": 150
        }
      ],
      "targetChanges": [
        {
          "line": "when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))",
          "type": "ADD",
          "lineNo": 150
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getTopicTeam(String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.getTopicTeam(String,int)"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "getTopicsForTopicName()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.CommonUtilsService commonUtilsService"
        },
        {
          "type": "CtExecutableReference",
          "value": "getTopicsForTopicName()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "getTopicTeam",
          "childCount": 3
        },
        "dstNode": {
          "label": "getTopicsForTopicName",
          "childCount": 3
        }
      },
      {
        "type": "Update",
        "nodeType": "FieldRead",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "handleDbRequests",
          "childCount": 1
        },
        "dstNode": {
          "label": "commonUtilsService",
          "childCount": 1
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681467999,
    "ID": "Aiven-Open/klaw:15",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ClusterApiServiceTest.getAllTopicsSuccess()",
    "bSource": {
      "startLine": 170,
      "code": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<Map<String, String>> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }"
    },
    "aSource": {
      "startLine": 171,
      "code": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<TopicConfig> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "bCommit": "5167873e",
    "aCommit": "55b72c5c",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<Map<String, String>> result =",
          "type": "DELETE",
          "lineNo": 183
        }
      ],
      "targetChanges": [
        {
          "line": "List<TopicConfig> result =",
          "type": "ADD",
          "lineNo": 184
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.response.TopicConfig"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.TopicConfig",
          "childCount": 0
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.Map",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.TopicConfig",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681383280,
    "ID": "Aiven-Open/klaw:1",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ServerConfigServiceTest.givenRequestForConfigWithNoneSet_returnCorrectConfig()",
    "bSource": {
      "startLine": 333,
      "code": "@Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }"
    },
    "aSource": {
      "startLine": 333,
      "code": "@Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "bCommit": "3b60ce7b",
    "aCommit": "a85b55d3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<Map<String, String>> response = serverConfigService.getAllEditableProps();",
          "type": "DELETE",
          "lineNo": 352
        },
        {
          "line": "TenantConfig tenantConfig =",
          "type": "DELETE",
          "lineNo": 353
        },
        {
          "line": "mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);",
          "type": "DELETE",
          "lineNo": 354
        }
      ],
      "targetChanges": [
        {
          "line": "List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();",
          "type": "ADD",
          "lineNo": 352
        },
        {
          "line": "TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);",
          "type": "ADD",
          "lineNo": 353
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List response"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.TenantConfig tenantConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.TenantConfig"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(String,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.fasterxml.jackson.databind.ObjectMapper mapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(String,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List response"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'kwvalue'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List response"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.response.KwPropertiesResponse"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.TenantConfig tenantConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.TenantConfig"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.fasterxml.jackson.databind.ObjectMapper mapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "getKwvalue()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List response"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getKwvalue()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.KwPropertiesResponse",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "io.aiven.klaw.model.TenantConfig",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Object",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "get",
          "childCount": 2
        },
        "dstNode": {
          "label": "getKwvalue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.Map",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.KwPropertiesResponse",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681291967,
    "ID": "Aiven-Open/klaw:18",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ServerConfigServiceTest.givenRequestForConfig_returnCorrectConfig()",
    "bSource": {
      "startLine": 296,
      "code": "@Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }"
    },
    "aSource": {
      "startLine": 297,
      "code": "@Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
    "bCommit": "3b60ce7b",
    "aCommit": "a85b55d3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "List<Map<String, String>> response = serverConfigService.getAllEditableProps();",
          "type": "DELETE",
          "lineNo": 305
        },
        {
          "line": "TenantConfig tenantConfig =",
          "type": "DELETE",
          "lineNo": 306
        },
        {
          "line": "mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);",
          "type": "DELETE",
          "lineNo": 307
        }
      ],
      "targetChanges": [
        {
          "line": "List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();",
          "type": "ADD",
          "lineNo": 306
        },
        {
          "line": "TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);",
          "type": "ADD",
          "lineNo": 307
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List response"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.Map"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.TenantConfig tenantConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.TenantConfig"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(String,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.fasterxml.jackson.databind.ObjectMapper mapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(String,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List response"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Map.get(Object)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'kwvalue'"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.util.List response"
        },
        {
          "type": "CtTypeReference",
          "value": "java.util.List"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.response.KwPropertiesResponse"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.ServerConfigService serverConfigService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.ServerConfigService.getAllEditableProps()"
        },
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.model.TenantConfig tenantConfig"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.model.TenantConfig"
        },
        {
          "type": "CtInvocation",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser,Class)"
        },
        {
          "type": "CtFieldRead",
          "value": "com.fasterxml.jackson.databind.ObjectMapper mapper"
        },
        {
          "type": "CtExecutableReference",
          "value": "com.fasterxml.jackson.databind.ObjectMapper.readValue(JsonParser,Class)"
        },
        {
          "type": "CtInvocation",
          "value": "getKwvalue()"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List response"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.List.get(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '0'"
        },
        {
          "type": "CtExecutableReference",
          "value": "getKwvalue()"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.Class class"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.KwPropertiesResponse",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "io.aiven.klaw.model.TenantConfig",
          "childCount": 0
        },
        "dstNode": {
          "label": "java.lang.Object",
          "childCount": 0
        }
      },
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "get",
          "childCount": 2
        },
        "dstNode": {
          "label": "getKwvalue",
          "childCount": 1
        }
      },
      {
        "type": "Delete",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.util.Map",
          "childCount": 2
        }
      },
      {
        "type": "Move",
        "nodeType": "TYPE_ARGUMENT",
        "parents": [
          "TYPE_ARGUMENT",
          "VARIABLE_TYPE",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "java.lang.String",
          "childCount": 0
        },
        "dstNode": {
          "label": "io.aiven.klaw.model.response.KwPropertiesResponse",
          "childCount": 0
        }
      }
    ],
    "refactorings": [
      "CHANGE_VARIABLE_TYPE"
    ],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1681291967,
    "ID": "Aiven-Open/klaw:19",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.ClusterApiServiceTest.approveTopicRequestsSuccess()",
    "bSource": {
      "startLine": 201,
      "code": "@Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "aSource": {
      "startLine": 201,
      "code": "@Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1, false);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
    "bCommit": "20db73dc",
    "aCommit": "2d15ef08",
    "hunk": {
      "sourceChanges": [
        {
          "line": "topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1);",
          "type": "DELETE",
          "lineNo": 227
        }
      ],
      "targetChanges": [
        {
          "line": "topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1, false);",
          "type": "ADD",
          "lineNo": 227
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtVariableRead",
          "value": "java.lang.String topicName"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.RequestOperationType CREATE"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.RequestOperationType"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.RequestOperationType CREATE"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtVariableRead",
          "value": "java.lang.String topicName"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.RequestOperationType CREATE"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.RequestOperationType"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.RequestOperationType CREATE"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1678697956,
    "ID": "Aiven-Open/klaw:0",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicControllerServiceTest.declineTopicRequestsFailureRequestDoesNotExist()",
    "bSource": {
      "startLine": 945,
      "code": "@Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setTopicstatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }"
    },
    "aSource": {
      "startLine": 945,
      "code": "@Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setRequestStatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "bCommit": "b9b176b4",
    "aCommit": "91ba7c18",
    "hunk": {
      "sourceChanges": [
        {
          "line": "topicRequest.setTopicstatus(RequestStatus.APPROVED.value);",
          "type": "DELETE",
          "lineNo": 951
        }
      ],
      "targetChanges": [
        {
          "line": "topicRequest.setRequestStatus(RequestStatus.APPROVED.value);",
          "type": "ADD",
          "lineNo": 951
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "setTopicstatus(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.TopicRequest topicRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "setTopicstatus(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.RequestStatus APPROVED"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.RequestStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.RequestStatus APPROVED"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "setRequestStatus(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.TopicRequest topicRequest"
        },
        {
          "type": "CtExecutableReference",
          "value": "setRequestStatus(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.RequestStatus APPROVED"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.RequestStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.RequestStatus APPROVED"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "setTopicstatus",
          "childCount": 2
        },
        "dstNode": {
          "label": "setRequestStatus",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676883112,
    "ID": "Aiven-Open/klaw:7",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbcTest.deleteSchemaRequest()",
    "bSource": {
      "startLine": 82,
      "code": "@Test\n  public void deleteSchemaRequest() {\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "aSource": {
      "startLine": 84,
      "code": "@Test\n  public void deleteSchemaRequest() {\n    SchemaRequest req = new SchemaRequest();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(schemaRequestRepo.findById(new SchemaRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "bCommit": "f84af3e6",
    "aCommit": "dcf22786",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String result = deleteDataJdbc.deleteSchemaRequest(1001, 1);",
          "type": "DELETE",
          "lineNo": 84
        }
      ],
      "targetChanges": [
        {
          "line": "SchemaRequest req = new SchemaRequest();",
          "type": "ADD",
          "lineNo": 86
        },
        {
          "line": "req.setUsername(\"uiuser1\");",
          "type": "ADD",
          "lineNo": 87
        },
        {
          "line": "req.setReq_no(1001);",
          "type": "ADD",
          "lineNo": 88
        },
        {
          "line": "when(schemaRequestRepo.findById(new SchemaRequestID(1001, 1))).thenReturn(Optional.of(req));",
          "type": "ADD",
          "lineNo": 89
        },
        {
          "line": "String result = deleteDataJdbc.deleteSchemaRequest(1001, \"uiuser1\", 1);",
          "type": "ADD",
          "lineNo": 90
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteSchemaRequest(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteSchemaRequest(int,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.dao.SchemaRequest req"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.SchemaRequest"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.SchemaRequest.SchemaRequest()"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.SchemaRequest"
        },
        {
          "type": "CtInvocation",
          "value": "setUsername(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.SchemaRequest req"
        },
        {
          "type": "CtExecutableReference",
          "value": "setUsername(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtInvocation",
          "value": "setReq_no(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.SchemaRequest req"
        },
        {
          "type": "CtExecutableReference",
          "value": "setReq_no(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.Optional)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.repository.SchemaRequestRepo.findById(SchemaRequestID)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.repository.SchemaRequestRepo schemaRequestRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.repository.SchemaRequestRepo.findById(SchemaRequestID)"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.SchemaRequestID.SchemaRequestID(Integer,Integer)"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.SchemaRequestID"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Optional"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.SchemaRequest req"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteSchemaRequest(int,String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteSchemaRequest(int,String,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "req",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setUsername",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setReq_no",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"uiuser1\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676391816,
    "ID": "Aiven-Open/klaw:4",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbcTest.deleteTopicRequest()",
    "bSource": {
      "startLine": 55,
      "code": "@Test\n  public void deleteTopicRequest() {\n    String result = deleteDataJdbc.deleteTopicRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "aSource": {
      "startLine": 65,
      "code": "@Test\n  public void deleteTopicRequest() {\n    TopicRequestID id = new TopicRequestID(1010, 1);\n    when(topicRequestsRepo.findById(eq(id)))\n        .thenReturn(createTopicRequest(\"uiuser1\", RequestStatus.CREATED));\n    String result = deleteDataJdbc.deleteTopicRequest(1010, \"uiuser1\", 1);\n    assertThat(result).contains(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "bCommit": "4f5187e3",
    "aCommit": "0f5599f4",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String result = deleteDataJdbc.deleteTopicRequest(1001, 1);",
          "type": "DELETE",
          "lineNo": 57
        },
        {
          "line": "assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);",
          "type": "DELETE",
          "lineNo": 58
        }
      ],
      "targetChanges": [
        {
          "line": "TopicRequestID id = new TopicRequestID(1010, 1);",
          "type": "ADD",
          "lineNo": 67
        },
        {
          "line": "when(topicRequestsRepo.findById(eq(id)))",
          "type": "ADD",
          "lineNo": 68
        },
        {
          "line": ".thenReturn(createTopicRequest(\"uiuser1\", RequestStatus.CREATED));",
          "type": "ADD",
          "lineNo": 69
        },
        {
          "line": "String result = deleteDataJdbc.deleteTopicRequest(1010, \"uiuser1\", 1);",
          "type": "ADD",
          "lineNo": 70
        },
        {
          "line": "assertThat(result).contains(ApiResultStatus.SUCCESS.value);",
          "type": "ADD",
          "lineNo": 71
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteTopicRequest(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteTopicRequest(int,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String result"
        },
        {
          "type": "CtExecutableReference",
          "value": "isEqualTo(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.dao.TopicRequestID id"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.TopicRequestID"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.TopicRequestID.TopicRequestID(Integer,Integer)"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.TopicRequestID"
        },
        {
          "type": "CtLiteral",
          "value": "int '1010'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.repository.TopicRequestsRepo.findById(TopicRequestID)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.repository.TopicRequestsRepo topicRequestsRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.repository.TopicRequestsRepo.findById(TopicRequestID)"
        },
        {
          "type": "CtInvocation",
          "value": "eq(io.aiven.klaw.dao.TopicRequestID)"
        },
        {
          "type": "CtExecutableReference",
          "value": "eq(io.aiven.klaw.dao.TopicRequestID)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.TopicRequestID id"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbcTest.createTopicRequest(String,RequestStatus)"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbcTest.createTopicRequest(String,RequestStatus)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.RequestStatus CREATED"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.RequestStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.RequestStatus CREATED"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteTopicRequest(int,String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteTopicRequest(int,String,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1010'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtInvocation",
          "value": "contains(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "assertThat(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.lang.String result"
        },
        {
          "type": "CtExecutableReference",
          "value": "contains(java.lang.String)"
        },
        {
          "type": "CtFieldRead",
          "value": "java.lang.String value"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        },
        {
          "type": "CtTypeAccess",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus"
        },
        {
          "type": "CtFieldReference",
          "value": "io.aiven.klaw.model.enums.ApiResultStatus SUCCESS"
        }
      ]
    },
    "astActions": [
      {
        "type": "Update",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "isEqualTo",
          "childCount": 2
        },
        "dstNode": {
          "label": "contains",
          "childCount": 2
        }
      },
      {
        "type": "Update",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root"
        ],
        "srcNode": {
          "label": "1001",
          "childCount": 0
        },
        "dstNode": {
          "label": "1010",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "id",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"uiuser1\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676373218,
    "ID": "Aiven-Open/klaw:11",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.controller.TopicControllerTest.getTopicRequests()",
    "bSource": {
      "startLine": 113,
      "code": "@Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\")).thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "aSource": {
      "startLine": 113,
      "code": "@Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false))\n        .thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "bCommit": "4f5187e3",
    "aCommit": "0f5599f4",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\")).thenReturn(topicRequests);",
          "type": "DELETE",
          "lineNo": 118
        }
      ],
      "targetChanges": [
        {
          "line": "when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false))",
          "type": "ADD",
          "lineNo": 118
        },
        {
          "line": ".thenReturn(topicRequests);",
          "type": "ADD",
          "lineNo": 119
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequests(String,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicControllerService topicControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequests(String,String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'all'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List topicRequests"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequests(String,String,String,String,boolean)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicControllerService topicControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequests(String,String,String,String,boolean)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'all'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "boolean 'false'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtVariableRead",
          "value": "java.util.List topicRequests"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "false",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676373218,
    "ID": "Aiven-Open/klaw:12",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbcTest.deleteAclRequest()",
    "bSource": {
      "startLine": 64,
      "code": "@Test\n  public void deleteAclRequest() {\n    String result = deleteDataJdbc.deleteAclRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "aSource": {
      "startLine": 67,
      "code": "@Test\n  public void deleteAclRequest() {\n    AclRequests req = new AclRequests();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(aclRequestsRepo.findById(new AclRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteAclRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
    "bCommit": "a1ae0659",
    "aCommit": "4f5187e3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "String result = deleteDataJdbc.deleteAclRequest(1001, 1);",
          "type": "DELETE",
          "lineNo": 66
        }
      ],
      "targetChanges": [
        {
          "line": "AclRequests req = new AclRequests();",
          "type": "ADD",
          "lineNo": 69
        },
        {
          "line": "req.setUsername(\"uiuser1\");",
          "type": "ADD",
          "lineNo": 70
        },
        {
          "line": "req.setReq_no(1001);",
          "type": "ADD",
          "lineNo": 71
        },
        {
          "line": "when(aclRequestsRepo.findById(new AclRequestID(1001, 1))).thenReturn(Optional.of(req));",
          "type": "ADD",
          "lineNo": 72
        },
        {
          "line": "String result = deleteDataJdbc.deleteAclRequest(1001, \"uiuser1\", 1);",
          "type": "ADD",
          "lineNo": 73
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteAclRequest(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteAclRequest(int,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ],
      "targetElements": [
        {
          "type": "CtLocalVariable",
          "value": "io.aiven.klaw.dao.AclRequests req"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.AclRequests"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.AclRequests.AclRequests()"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.AclRequests"
        },
        {
          "type": "CtInvocation",
          "value": "setUsername(java.lang.String)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.AclRequests req"
        },
        {
          "type": "CtExecutableReference",
          "value": "setUsername(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtInvocation",
          "value": "setReq_no(int)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.AclRequests req"
        },
        {
          "type": "CtExecutableReference",
          "value": "setReq_no(int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.Optional)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.repository.AclRequestsRepo.findById(AclRequestID)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.repository.AclRequestsRepo aclRequestsRepo"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.repository.AclRequestsRepo.findById(AclRequestID)"
        },
        {
          "type": "CtConstructorCall",
          "value": "io.aiven.klaw.dao.AclRequestID.AclRequestID(Integer,Integer)"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.dao.AclRequestID"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.util.Optional)"
        },
        {
          "type": "CtInvocation",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtTypeAccess",
          "value": "java.util.Optional"
        },
        {
          "type": "CtExecutableReference",
          "value": "java.util.Optional.of(Object)"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.dao.AclRequests req"
        },
        {
          "type": "CtLocalVariable",
          "value": "java.lang.String result"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.String"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteAclRequest(int,String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc deleteDataJdbc"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.DeleteDataJdbc.deleteAclRequest(int,String,int)"
        },
        {
          "type": "CtLiteral",
          "value": "int '1001'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'uiuser1'"
        },
        {
          "type": "CtLiteral",
          "value": "int '1'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "LocalVariable",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "req",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setUsername",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "setReq_no",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "LocalVariable",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "\"uiuser1\"",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676305052,
    "ID": "Aiven-Open/klaw:16",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.AclControllerServiceTest.deleteAclRequestsFailure()",
    "bSource": {
      "startLine": 365,
      "code": "@Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }"
    },
    "aSource": {
      "startLine": 386,
      "code": "@Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(mailService.getCurrentUserName()).thenReturn(\"testuser\");\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyString(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
    "bCommit": "a1ae0659",
    "aCommit": "4f5187e3",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(handleDbRequests.deleteAclRequest(anyInt(), anyInt()))",
          "type": "DELETE",
          "lineNo": 369
        }
      ],
      "targetChanges": [
        {
          "line": "when(mailService.getCurrentUserName()).thenReturn(\"testuser\");",
          "type": "ADD",
          "lineNo": 390
        },
        {
          "line": "when(handleDbRequests.deleteAclRequest(anyInt(), anyString(), anyInt()))",
          "type": "ADD",
          "lineNo": 391
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenThrow(java.lang.RuntimeException)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.deleteAclRequest(int,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.deleteAclRequest(int,int)"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.lang.String)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.MailUtils.getCurrentUserName()"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.MailUtils mailService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.MailUtils.getCurrentUserName()"
        },
        {
          "type": "CtExecutableReference",
          "value": "thenReturn(java.lang.String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'testuser'"
        },
        {
          "type": "CtInvocation",
          "value": "thenThrow(java.lang.RuntimeException)"
        },
        {
          "type": "CtInvocation",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(<unknown>)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.deleteAclRequest(int,String,int)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc handleDbRequests"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.helpers.db.rdbms.HandleDbRequestsJdbc.deleteAclRequest(int,String,int)"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        },
        {
          "type": "CtInvocation",
          "value": "anyString()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyString()"
        },
        {
          "type": "CtInvocation",
          "value": "anyInt()"
        },
        {
          "type": "CtExecutableReference",
          "value": "anyInt()"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "thenReturn",
          "childCount": 2
        }
      },
      {
        "type": "Insert",
        "nodeType": "Invocation",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "anyString",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1676305052,
    "ID": "Aiven-Open/klaw:17",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.controller.TopicControllerTest.getCreatedTopicRequests()",
    "bSource": {
      "startLine": 153,
      "code": "@Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\"))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "aSource": {
      "startLine": 153,
      "code": "@Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\", null, null, null))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
    "bCommit": "9115ab58",
    "aCommit": "df96ad15",
    "hunk": {
      "sourceChanges": [
        {
          "line": "when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\"))",
          "type": "DELETE",
          "lineNo": 157
        }
      ],
      "targetChanges": [
        {
          "line": "when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\", null, null, null))",
          "type": "ADD",
          "lineNo": 157
        }
      ],
      "type": "MODIFY",
      "sourceElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequestsForApprover(String,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicControllerService topicControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequestsForApprover(String,String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'created'"
        }
      ],
      "targetElements": [
        {
          "type": "CtInvocation",
          "value": "thenReturn(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtExecutableReference",
          "value": "when(java.util.List)"
        },
        {
          "type": "CtInvocation",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequestsForApprover(String,String,String,Integer,String,String)"
        },
        {
          "type": "CtFieldRead",
          "value": "io.aiven.klaw.service.TopicControllerService topicControllerService"
        },
        {
          "type": "CtExecutableReference",
          "value": "io.aiven.klaw.service.TopicControllerService.getTopicRequestsForApprover(String,String,String,Integer,String,String)"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String '1'"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String ''"
        },
        {
          "type": "CtLiteral",
          "value": "java.lang.String 'created'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        },
        {
          "type": "CtLiteral",
          "value": "<nulltype> 'null'"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      },
      {
        "type": "Insert",
        "nodeType": "Literal",
        "parents": [
          "Invocation",
          "Invocation",
          "Invocation",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "null",
          "childCount": 0
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1675930682,
    "ID": "Aiven-Open/klaw:6",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicControllerServiceTest.createTopicDeleteRequestSuccessDefaultValues()",
    "bSource": {
      "startLine": 305,
      "code": "@Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "aSource": {
      "startLine": 318,
      "code": "@Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "bCommit": "04c249b5",
    "aCommit": "1edf492f",
    "hunk": {
      "targetChanges": [
        {
          "line": "} catch (KlawNotAuthorizedException e) {",
          "type": "ADD",
          "lineNo": 343
        },
        {
          "line": "throw new RuntimeException(e);",
          "type": "ADD",
          "lineNo": 344
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtCatchVariable",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException"
        },
        {
          "type": "CtThrow",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.RuntimeException"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Catch",
        "parents": [
          "Try",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1675264648,
    "ID": "Aiven-Open/klaw:26",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicControllerServiceTest.createTopicDeleteRequestFailureTopicWithSubscriptions()",
    "bSource": {
      "startLine": 254,
      "code": "@Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "aSource": {
      "startLine": 263,
      "code": "@Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "bCommit": "04c249b5",
    "aCommit": "1edf492f",
    "hunk": {
      "targetChanges": [
        {
          "line": "} catch (KlawNotAuthorizedException e) {",
          "type": "ADD",
          "lineNo": 287
        },
        {
          "line": "throw new RuntimeException(e);",
          "type": "ADD",
          "lineNo": 288
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtCatchVariable",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException"
        },
        {
          "type": "CtThrow",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.RuntimeException"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Catch",
        "parents": [
          "Try",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1675264648,
    "ID": "Aiven-Open/klaw:27",
    "trivial": null
  },
  {
    "name": "io.aiven.klaw.service.TopicControllerServiceTest.createTopicDeleteRequestFailureTopicAlreadyExists()",
    "bSource": {
      "startLine": 212,
      "code": "@Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "aSource": {
      "startLine": 217,
      "code": "@Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
    },
    "bPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "aPath": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
    "bCommit": "04c249b5",
    "aCommit": "1edf492f",
    "hunk": {
      "targetChanges": [
        {
          "line": "} catch (KlawNotAuthorizedException e) {",
          "type": "ADD",
          "lineNo": 232
        },
        {
          "line": "throw new RuntimeException(e);",
          "type": "ADD",
          "lineNo": 233
        }
      ],
      "type": "ADD",
      "sourceElements": [],
      "targetElements": [
        {
          "type": "CtCatchVariable",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        },
        {
          "type": "CtTypeReference",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException"
        },
        {
          "type": "CtThrow",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtConstructorCall",
          "value": "java.lang.RuntimeException.RuntimeException(Throwable)"
        },
        {
          "type": "CtTypeReference",
          "value": "java.lang.RuntimeException"
        },
        {
          "type": "CtVariableRead",
          "value": "io.aiven.klaw.error.KlawNotAuthorizedException e"
        }
      ]
    },
    "astActions": [
      {
        "type": "Insert",
        "nodeType": "Catch",
        "parents": [
          "Try",
          "Method",
          "root",
          ""
        ],
        "srcNode": {
          "label": "",
          "childCount": 2
        }
      }
    ],
    "refactorings": [],
    "verdict": {
      "status": "unknown",
      "error_lines": null
    },
    "aCommitTime": 1675264648,
    "ID": "Aiven-Open/klaw:28",
    "trivial": null
  }
]