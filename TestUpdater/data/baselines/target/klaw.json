[
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2024-03-06 09:43:35+00:00",
    "commit_src": "d2aeacb725c500139eebf5eb5feea68b9b0d1441",
    "commit_tgt": "32e27eecaa264b3f5463d994870d850631d418f5",
    "changed_test": "core/src/test/java/io/aiven/klaw/controller/UiConfigControllerTest.java#showActivityLog",
    "changed_prod": "core/src/main/java/io/aiven/klaw/controller/UiConfigController.java#showActivityLog",
    "test_code_src": "  @Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "test_code_tgt": "  @Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), any(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "prod_code_src": "  public ResponseEntity<List<ActivityLogModel>> showActivityLog(\n      @RequestParam(value = \"env\", defaultValue = \"\") String env,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage) {\n    return new ResponseEntity<>(\n        uiConfigControllerService.showActivityLog(env, pageNo, currentPage), HttpStatus.OK);\n  }",
    "prod_code_tgt": "  public ResponseEntity<List<ActivityLogModel>> showActivityLog(\n      @RequestParam(value = \"env\", defaultValue = \"\") String env,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"ordering\", defaultValue = \"DESC\") OrderBy orderBy,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage) {\n    return new ResponseEntity<>(\n        uiConfigControllerService.showActivityLog(env, pageNo, orderBy, currentPage),\n        HttpStatus.OK);\n  }",
    "test_id": 0,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2024-03-06 09:43:35+00:00",
    "commit_src": "d2aeacb725c500139eebf5eb5feea68b9b0d1441",
    "commit_tgt": "32e27eecaa264b3f5463d994870d850631d418f5",
    "changed_test": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbcTest.java#selectActivityLog2",
    "changed_prod": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbc.java#selectActivityLog",
    "test_code_src": "  @Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs = selectData.selectActivityLog(username, env, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }",
    "test_code_tgt": "  @Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs =\n        selectData.selectActivityLog(username, env, OrderBy.DESC, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }",
    "prod_code_src": "  public List<ActivityLog> selectActivityLog(\n      String username, String env, boolean allReqs, int tenantId) {\n    log.debug(\"selectActivityLog {}\", username);\n    List<ActivityLog> activityList;\n\n    if (allReqs) {\n      if (env == null || env.isBlank()) {\n        activityList = Lists.newArrayList(activityLogRepo.findAllByTenantId(tenantId));\n      } else {\n        activityList = activityLogRepo.findAllByEnvAndTenantId(env, tenantId);\n      }\n    } else {\n      final UserInfo userInfo = selectUserInfo(username);\n      if (env == null || env.isBlank()) {\n        activityList = activityLogRepo.findAllByTeamIdAndTenantId(userInfo.getTeamId(), tenantId);\n      } else {\n        activityList =\n            activityLogRepo.findAllByEnvAndTeamIdAndTenantId(env, userInfo.getTeamId(), tenantId);\n      }\n    }\n\n    for (ActivityLog row : activityList) {\n      row.setActivityTimeString(\n          DATE_TIME_DDMMMYYYY_HHMMSS_FORMATTER.format(row.getActivityTime().toLocalDateTime()));\n    }\n\n    return activityList;\n  }",
    "prod_code_tgt": "  public List<ActivityLog> selectActivityLog(\n      String username, String env, OrderBy orderBy, boolean allReqs, int tenantId) {\n    log.debug(\"selectActivityLog {}\", username);\n    List<ActivityLog> activityList;\n\n    if (allReqs) {\n      if (env == null || env.isBlank()) {\n        activityList = Lists.newArrayList(activityLogRepo.findAllByTenantId(tenantId));\n      } else {\n        activityList = activityLogRepo.findAllByEnvAndTenantId(env, tenantId);\n      }\n    } else {\n      final UserInfo userInfo = selectUserInfo(username);\n      if (env == null || env.isBlank()) {\n        if (orderBy.equals(OrderBy.DESC)) {\n          activityList =\n              activityLogRepo.findAllByTeamIdAndTenantIdOrderByActivityTimeDesc(\n                  userInfo.getTeamId(), tenantId);\n        } else {\n          activityList =\n              activityLogRepo.findAllByTeamIdAndTenantIdOrderByActivityTimeAsc(\n                  userInfo.getTeamId(), tenantId);\n        }\n      } else {\n        if (orderBy.equals(OrderBy.DESC)) {\n          activityList =\n              activityLogRepo.findAllByEnvAndTeamIdAndTenantIdOrderByActivityTimeDesc(\n                  env, userInfo.getTeamId(), tenantId);\n        } else {\n          activityList =\n              activityLogRepo.findAllByEnvAndTeamIdAndTenantIdOrderByActivityTimeAsc(\n                  env, userInfo.getTeamId(), tenantId);\n        }\n      }\n    }\n\n    for (ActivityLog row : activityList) {\n      row.setActivityTimeString(\n          DATE_TIME_DDMMMYYYY_HHMMSS_FORMATTER.format(row.getActivityTime().toLocalDateTime()));\n    }\n\n    return activityList;\n  }",
    "test_id": 1,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2024-01-19 15:01:19+00:00",
    "commit_src": "14b0a047f98bbc7d2f598c13876b5bfceade5297",
    "commit_tgt": "1ee87037349a0796bd67c12665221b212427147f",
    "changed_test": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java#getTopics",
    "changed_prod": "core/src/main/java/io/aiven/klaw/controller/TopicController.java#getTopics",
    "test_code_src": "  @Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .param(\"topicType\", \"\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "test_code_tgt": "  @Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "prod_code_src": "  public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"topicType\", required = false) String topicType) {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId, pageNo, currentPage, topicNameSearch, teamId, topicType),\n        HttpStatus.OK);\n  }",
    "prod_code_tgt": "  public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"topicType\", required = false) AclType topicType)\n      throws KlawNotAuthorizedException {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId,\n            pageNo,\n            currentPage,\n            topicNameSearch,\n            teamId,\n            topicType != null ? topicType.value : null),\n        HttpStatus.OK);\n  }",
    "test_id": 4,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-10-27 13:24:07+02:00",
    "commit_src": "2f7da4fc822e12d7669462610ebdeb2e95e12ffb",
    "commit_tgt": "bb1afdab0f1a4dd1665f273e0bf2c09c56bf5d58",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java#getAllTopicsFailure",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java#getAllTopics",
    "test_code_src": "  @Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () -> clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1))\n        .isInstanceOf(KlawException.class);\n  }",
    "test_code_tgt": "  @Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () ->\n                clusterApiService.getAllTopics(\n                    \"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1, false))\n        .isInstanceOf(KlawException.class);\n  }",
    "prod_code_src": "  public List<TopicConfig> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<TopicConfig> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<TopicConfig>> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
    "prod_code_tgt": "  public LoadTopicsResponse getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId,\n      boolean resetTopicsCache)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n\n    LoadTopicsResponse loadTopicsResponse;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  TOPICS_NATIVE_TYPE,\n                  aclsNativeType,\n                  RESET_CACHE,\n                  String.valueOf(resetTopicsCache));\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<LoadTopicsResponse> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      loadTopicsResponse = Objects.requireNonNull(s.getBody());\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return loadTopicsResponse;\n  }",
    "test_id": 6,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-09-04 15:00:41+02:00",
    "commit_src": "5c8e9b5607367f33d527b60bf189602cc12a4e7a",
    "commit_tgt": "ffd4da7b8f97db57a77b9bc54502aa4589396e7d",
    "changed_test": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java#getRedirectPageReturnRootForServletPathCheckTest",
    "changed_prod": "core/src/main/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandler.java#getRedirectPage",
    "test_code_src": "  @Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }",
    "test_code_tgt": "  @Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }",
    "prod_code_src": "  public String getRedirectPage(HttpServletRequest request) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
    "prod_code_tgt": "  public String getRedirectPage(HttpServletRequest request, Authentication authentication) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n    String coralTopicsUri = \"/coral/topics\";\n\n    if (quickStartEnabled\n        && handleDbRequests\n            .getUsersInfo(\n                UtilMethods.getUserName(authentication.getPrincipal(), preferredUsernameAttribute))\n            .getRole()\n            .equals(KwConstants.USER_ROLE)) {\n      return coralTopicsUri;\n    }\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
    "test_id": 7,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-09-04 15:00:41+02:00",
    "commit_src": "5c8e9b5607367f33d527b60bf189602cc12a4e7a",
    "commit_tgt": "ffd4da7b8f97db57a77b9bc54502aa4589396e7d",
    "changed_test": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java#getRedirectPageReturnFullPathRequestUriQueryTest",
    "changed_prod": "core/src/main/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandler.java#getRedirectPage",
    "test_code_src": "  @Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }",
    "test_code_tgt": "  @Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }",
    "prod_code_src": "  public String getRedirectPage(HttpServletRequest request) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
    "prod_code_tgt": "  public String getRedirectPage(HttpServletRequest request, Authentication authentication) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n    String coralTopicsUri = \"/coral/topics\";\n\n    if (quickStartEnabled\n        && handleDbRequests\n            .getUsersInfo(\n                UtilMethods.getUserName(authentication.getPrincipal(), preferredUsernameAttribute))\n            .getRole()\n            .equals(KwConstants.USER_ROLE)) {\n      return coralTopicsUri;\n    }\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
    "test_id": 8,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-08-28 19:38:58+02:00",
    "commit_src": "3cfe392add43400c37fd5018fe610d998c53cc86",
    "commit_tgt": "604d479714843994cfa244442fee2cbfc1096f35",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java#deleteTeamFailure",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java#deleteTeam",
    "test_code_src": "  @Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllUsersInfoForTeam(teamId, tenantId))\n        .thenReturn(Collections.singletonList(new UserInfo()));\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }",
    "test_code_tgt": "  @Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.existsUsersInfoForTeam(teamId, tenantId)).thenReturn(true);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }",
    "prod_code_src": "  public ApiResponse deleteTeam(Integer teamId) throws KlawException {\n    log.info(\"deleteTeam {}\", teamId);\n    String userName = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_TEAMS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    if (manageDatabase.getHandleDbRequests().getAllUsersInfoForTeam(teamId, tenantId).size() > 0) {\n      return ApiResponse.notOk(TEAMS_ERR_103);\n    }\n\n    if (manageDatabase.getHandleDbRequests().existsComponentsCountForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_104);\n    }\n\n    // own team cannot be deleted\n    if (Objects.equals(commonUtilsService.getTeamId(userName), teamId)) {\n      return ApiResponse.notOk(TEAMS_ERR_105);\n    }\n\n    try {\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTeamRequest(teamId, commonUtilsService.getTenantId(getUserName()));\n\n      if (ApiResultStatus.SUCCESS.value.equals(result)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.TEAM, MetadataOperationType.DELETE, null);\n      }\n\n      return ApiResultStatus.SUCCESS.value.equals(result)\n          ? ApiResponse.ok(result)\n          : ApiResponse.notOk(result);\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse deleteTeam(Integer teamId) throws KlawException {\n    log.info(\"deleteTeam {}\", teamId);\n    String userName = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_TEAMS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    if (manageDatabase.getHandleDbRequests().existsUsersInfoForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_103);\n    }\n\n    if (manageDatabase.getHandleDbRequests().existsComponentsCountForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_104);\n    }\n\n    // own team cannot be deleted\n    if (Objects.equals(commonUtilsService.getTeamId(userName), teamId)) {\n      return ApiResponse.notOk(TEAMS_ERR_105);\n    }\n\n    try {\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTeamRequest(teamId, commonUtilsService.getTenantId(getUserName()));\n\n      if (ApiResultStatus.SUCCESS.value.equals(result)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.TEAM, MetadataOperationType.DELETE, null);\n      }\n\n      return ApiResultStatus.SUCCESS.value.equals(result)\n          ? ApiResponse.ok(result)\n          : ApiResponse.notOk(result);\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "test_id": 9,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-08-10 13:48:38+01:00",
    "commit_src": "8e6733051f2356fddd68368dd4ce2af7ea548b59",
    "commit_tgt": "ddef9de123e04490d1504509ed4ded7971b971e2",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicSyncControllerServiceTest.java#updateSyncTopicsSuccess",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicSyncControllerService.java#updateSyncTopics",
    "test_code_src": "  @Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any())).thenReturn(ApiResultStatus.SUCCESS.value);\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "test_code_tgt": "  @Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any()))\n        .thenReturn(\n            CRUDResponse.<Topic>builder().resultStatus(ApiResultStatus.SUCCESS.value).build());\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "prod_code_src": "  public ApiResponse updateSyncTopics(List<SyncTopicUpdates> updatedSyncTopics)\n      throws KlawException {\n    log.info(\"updateSyncTopics {}\", updatedSyncTopics);\n    String userDetails = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.SYNC_TOPICS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    // tenant filtering\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    String syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    String orderOfEnvs = commonUtilsService.getEnvProperty(tenantId, ORDER_OF_TOPIC_ENVS);\n\n    List<Topic> existingTopics;\n    List<Topic> listTopics = new ArrayList<>();\n    Topic t;\n\n    StringBuilder erroredTopics = new StringBuilder();\n    boolean topicsWithDiffTeams = false;\n\n    StringBuilder erroredTopicsExist = new StringBuilder();\n    boolean topicsDontExistInMainCluster = false;\n    int topicId = manageDatabase.getHandleDbRequests().getNextTopicRequestId(\"TOPIC_ID\", tenantId);\n\n    // remove duplicates\n    updatedSyncTopics =\n        updatedSyncTopics.stream()\n            .filter(\n                topicUpdate ->\n                    topicUpdate.getTeamSelected() != null\n                        && !topicUpdate.getTeamSelected().equals(\"\"))\n            .collect(Collectors.toList());\n\n    List<Integer> updatedSyncTopicsDelete = new ArrayList<>();\n    updatedSyncTopics = handleTopicDeletes(updatedSyncTopics, updatedSyncTopicsDelete, tenantId);\n\n    if (updatedSyncTopics.size() > 0) {\n      for (SyncTopicUpdates topicUpdate : updatedSyncTopics) {\n        // tenant filtering\n        if (!commonUtilsService\n            .getEnvsFromUserId(userDetails)\n            .contains(topicUpdate.getEnvSelected())) {\n          return ApiResponse.NOT_AUTHORIZED;\n        }\n        existingTopics = getTopicFromName(topicUpdate.getTopicName(), tenantId);\n\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (existingTopic.getEnvironment().equals(syncCluster)) {\n              if (!manageDatabase\n                      .getTeamNameFromTeamId(tenantId, existingTopic.getTeamId())\n                      .equals(topicUpdate.getTeamSelected())\n                  && !topicUpdate.getEnvSelected().equals(syncCluster)) {\n                erroredTopics.append(topicUpdate.getTopicName()).append(\" \");\n                topicsWithDiffTeams = true;\n              }\n              break;\n            }\n          }\n        } else if (!Objects.equals(syncCluster, topicUpdate.getEnvSelected())) {\n          erroredTopicsExist.append(topicUpdate.getTopicName()).append(\" \");\n          if (checkInPromotionOrder(topicUpdate.getEnvSelected(), orderOfEnvs)) {\n            topicsDontExistInMainCluster = true;\n          }\n        }\n\n        boolean topicAdded = false;\n        if (existingTopics == null) {\n          t = new Topic();\n\n          topicId = topicId + 1;\n          t.setTopicid(topicId);\n          t.setTopicname(topicUpdate.getTopicName());\n          t.setNoOfPartitions(topicUpdate.getPartitions());\n          t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n          t.setEnvironment(topicUpdate.getEnvSelected());\n          t.setTeamId(\n              manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n          t.setDescription(\"Topic description\");\n          t.setExistingTopic(false);\n          t.setTenantId(tenantId);\n\n          listTopics.add(t);\n        } else {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            } else if (!Objects.equals(\n                manageDatabase.getTeamNameFromTeamId(tenantId, existingTopic.getTeamId()),\n                topicUpdate.getTeamSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            }\n          }\n        }\n\n        boolean envFound = false;\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              envFound = true;\n              break;\n            }\n          }\n          if (!envFound && !topicAdded) {\n            t = new Topic();\n            topicId = topicId + 1;\n            t.setTopicid(topicId);\n            t.setTopicname(topicUpdate.getTopicName());\n            t.setNoOfPartitions(topicUpdate.getPartitions());\n            t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n            t.setEnvironment(topicUpdate.getEnvSelected());\n            t.setTeamId(\n                manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n            t.setDescription(\"Topic description\");\n            t.setExistingTopic(false);\n            t.setTenantId(tenantId);\n\n            listTopics.add(t);\n          }\n        }\n      }\n    }\n\n    if (updatedSyncTopics.size() == 0 && updatedSyncTopicsDelete.size() > 0) {\n      manageDatabase.loadTopicsForOneTenant(tenantId);\n      return ApiResponse.SUCCESS;\n    }\n\n    if (topicsDontExistInMainCluster) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_103 + syncCluster + \". \\n Topics : \" + erroredTopicsExist);\n    }\n\n    if (topicsWithDiffTeams) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_104 + syncCluster + \". \\n Topics : \" + erroredTopics);\n    }\n\n    if (listTopics.size() > 0) {\n      try {\n        String statusSync = manageDatabase.getHandleDbRequests().addToSynctopics(listTopics);\n        manageDatabase.loadTopicsForOneTenant(tenantId);\n        return ApiResponse.ok(statusSync);\n      } catch (Exception e) {\n        log.error(e.getMessage());\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      return ApiResponse.notOk(SYNC_ERR_101);\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse updateSyncTopics(List<SyncTopicUpdates> updatedSyncTopics)\n      throws KlawException {\n    log.info(\"updateSyncTopics {}\", updatedSyncTopics);\n    String userDetails = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.SYNC_TOPICS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    // tenant filtering\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    String syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    String orderOfEnvs = commonUtilsService.getEnvProperty(tenantId, ORDER_OF_TOPIC_ENVS);\n\n    List<Topic> existingTopics;\n    List<Topic> listTopics = new ArrayList<>();\n    Topic t;\n\n    StringBuilder erroredTopics = new StringBuilder();\n    boolean topicsWithDiffTeams = false;\n\n    StringBuilder erroredTopicsExist = new StringBuilder();\n    boolean topicsDontExistInMainCluster = false;\n    int topicId = manageDatabase.getHandleDbRequests().getNextTopicRequestId(\"TOPIC_ID\", tenantId);\n\n    // remove duplicates\n    updatedSyncTopics =\n        updatedSyncTopics.stream()\n            .filter(\n                topicUpdate ->\n                    topicUpdate.getTeamSelected() != null\n                        && !topicUpdate.getTeamSelected().equals(\"\"))\n            .collect(Collectors.toList());\n\n    List<Integer> updatedSyncTopicsDelete = new ArrayList<>();\n    updatedSyncTopics = handleTopicDeletes(updatedSyncTopics, updatedSyncTopicsDelete, tenantId);\n\n    if (updatedSyncTopics.size() > 0) {\n      for (SyncTopicUpdates topicUpdate : updatedSyncTopics) {\n        // tenant filtering\n        if (!commonUtilsService\n            .getEnvsFromUserId(userDetails)\n            .contains(topicUpdate.getEnvSelected())) {\n          return ApiResponse.NOT_AUTHORIZED;\n        }\n        existingTopics = getTopicFromName(topicUpdate.getTopicName(), tenantId);\n\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (existingTopic.getEnvironment().equals(syncCluster)) {\n              if (!manageDatabase\n                      .getTeamNameFromTeamId(tenantId, existingTopic.getTeamId())\n                      .equals(topicUpdate.getTeamSelected())\n                  && !topicUpdate.getEnvSelected().equals(syncCluster)) {\n                erroredTopics.append(topicUpdate.getTopicName()).append(\" \");\n                topicsWithDiffTeams = true;\n              }\n              break;\n            }\n          }\n        } else if (!Objects.equals(syncCluster, topicUpdate.getEnvSelected())) {\n          erroredTopicsExist.append(topicUpdate.getTopicName()).append(\" \");\n          if (checkInPromotionOrder(topicUpdate.getEnvSelected(), orderOfEnvs)) {\n            topicsDontExistInMainCluster = true;\n          }\n        }\n\n        boolean topicAdded = false;\n        if (existingTopics == null) {\n          t = new Topic();\n\n          topicId = topicId + 1;\n          t.setTopicid(topicId);\n          t.setTopicname(topicUpdate.getTopicName());\n          t.setNoOfPartitions(topicUpdate.getPartitions());\n          t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n          t.setEnvironment(topicUpdate.getEnvSelected());\n          t.setTeamId(\n              manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n          t.setDescription(\"Topic description\");\n          t.setExistingTopic(false);\n          t.setTenantId(tenantId);\n\n          listTopics.add(t);\n        } else {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            } else if (!Objects.equals(\n                manageDatabase.getTeamNameFromTeamId(tenantId, existingTopic.getTeamId()),\n                topicUpdate.getTeamSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            }\n          }\n        }\n\n        boolean envFound = false;\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              envFound = true;\n              break;\n            }\n          }\n          if (!envFound && !topicAdded) {\n            t = new Topic();\n            topicId = topicId + 1;\n            t.setTopicid(topicId);\n            t.setTopicname(topicUpdate.getTopicName());\n            t.setNoOfPartitions(topicUpdate.getPartitions());\n            t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n            t.setEnvironment(topicUpdate.getEnvSelected());\n            t.setTeamId(\n                manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n            t.setDescription(\"Topic description\");\n            t.setExistingTopic(false);\n            t.setTenantId(tenantId);\n\n            listTopics.add(t);\n          }\n        }\n      }\n    }\n\n    if (updatedSyncTopics.size() == 0 && updatedSyncTopicsDelete.size() > 0) {\n      manageDatabase.loadTopicsForOneTenant(tenantId);\n      return ApiResponse.SUCCESS;\n    }\n\n    if (topicsDontExistInMainCluster) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_103 + syncCluster + \". \\n Topics : \" + erroredTopicsExist);\n    }\n\n    if (topicsWithDiffTeams) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_104 + syncCluster + \". \\n Topics : \" + erroredTopics);\n    }\n\n    if (listTopics.size() > 0) {\n      try {\n        CRUDResponse<Topic> statusSync =\n            manageDatabase.getHandleDbRequests().addToSynctopics(listTopics);\n        manageDatabase.loadTopicsForOneTenant(tenantId);\n\n        return ApiResponse.ok(statusSync.getResultStatus());\n      } catch (Exception e) {\n        log.error(e.getMessage());\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      return ApiResponse.notOk(SYNC_ERR_101);\n    }\n  }",
    "test_id": 10,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-08-04 11:52:59+02:00",
    "commit_src": "61b67d42faf6edfb01a61fb8620f809411824d1a",
    "commit_tgt": "da379ca6fbb593dfbdcedd33c6368ad6b086697b",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java#deleteUserFailureisAdmin",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java#deleteUser",
    "test_code_src": "  @Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllComponentsCountForUser(\"testuser\", 101)).thenReturn(1);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }",
    "test_code_tgt": "  @Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }",
    "prod_code_src": "  public ApiResponse deleteUser(String userIdToDelete, boolean isExternal) throws KlawException {\n    log.info(\"deleteUser {}\", userIdToDelete);\n    String userName = getUserName();\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_USERS)) {\n      return ApiResponse.builder()\n          .success(false)\n          .message(ApiResultStatus.NOT_AUTHORIZED.value)\n          .build();\n    }\n\n    UserInfo existingUserInfo = manageDatabase.getHandleDbRequests().getUsersInfo(userIdToDelete);\n    List<String> permissions =\n        manageDatabase\n            .getRolesPermissionsPerTenant(commonUtilsService.getTenantId(getUserName()))\n            .get(existingUserInfo.getRole());\n    if (permissions != null\n        && permissions.contains(PermissionType.FULL_ACCESS_USERS_TEAMS_ROLES.name())) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_106).build();\n    }\n\n    if (manageDatabase.getHandleDbRequests().getAllComponentsCountForUser(userIdToDelete, tenantId)\n        > 0) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_107).build();\n    }\n\n    if (Objects.equals(userName, userIdToDelete) && isExternal) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_108).build();\n    }\n\n    try {\n      inMemoryUserDetailsManager.deleteUser(userIdToDelete);\n      String result = manageDatabase.getHandleDbRequests().deleteUserRequest(userIdToDelete);\n      if (result.equals(ApiResultStatus.SUCCESS.value)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.USERS, MetadataOperationType.DELETE, userIdToDelete);\n      }\n      return ApiResponse.builder()\n          .success(result.equals(ApiResultStatus.SUCCESS.value))\n          .message(result)\n          .build();\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse deleteUser(String userIdToDelete, boolean isExternal) throws KlawException {\n    log.info(\"deleteUser {}\", userIdToDelete);\n    String userName = getUserName();\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_USERS)) {\n      return ApiResponse.builder()\n          .success(false)\n          .message(ApiResultStatus.NOT_AUTHORIZED.value)\n          .build();\n    }\n\n    UserInfo existingUserInfo = manageDatabase.getHandleDbRequests().getUsersInfo(userIdToDelete);\n    List<String> permissions =\n        manageDatabase\n            .getRolesPermissionsPerTenant(commonUtilsService.getTenantId(getUserName()))\n            .get(existingUserInfo.getRole());\n    if (permissions != null\n        && permissions.contains(PermissionType.FULL_ACCESS_USERS_TEAMS_ROLES.name())) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_106).build();\n    }\n\n    if (manageDatabase\n        .getHandleDbRequests()\n        .existsComponentsCountForUser(userIdToDelete, tenantId)) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_107).build();\n    }\n\n    if (Objects.equals(userName, userIdToDelete) && isExternal) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_108).build();\n    }\n\n    try {\n      inMemoryUserDetailsManager.deleteUser(userIdToDelete);\n      String result = manageDatabase.getHandleDbRequests().deleteUserRequest(userIdToDelete);\n      if (result.equals(ApiResultStatus.SUCCESS.value)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.USERS, MetadataOperationType.DELETE, userIdToDelete);\n      }\n      return ApiResponse.builder()\n          .success(result.equals(ApiResultStatus.SUCCESS.value))\n          .message(result)\n          .build();\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "test_id": 11,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-08-04 11:26:53+02:00",
    "commit_src": "c4ce9e0117df181fb657abb035e8b4cda7dbeead",
    "commit_tgt": "61b67d42faf6edfb01a61fb8620f809411824d1a",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java#getAllProps",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java#getAllProps",
    "test_code_src": "  @Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    List<ServerConfigProperties> list = serverConfigService.getAllProps();\n    assertThat(list).isEmpty(); // filtering for spring. and klaw.\n  }",
    "test_code_tgt": "  @Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    Collection<ServerConfigProperties> collection = serverConfigService.getAllProps();\n    assertThat(collection).isEmpty(); // filtering for spring. and klaw.\n  }",
    "prod_code_src": "  public List<ServerConfigProperties> getAllProps() {\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      return new ArrayList<>();\n    }\n    return listProps;\n  }",
    "prod_code_tgt": "  public Collection<ServerConfigProperties> getAllProps() {\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      return new ArrayList<>();\n    }\n    return key2Props.values();\n  }",
    "test_id": 12,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-06-27 12:02:05+01:00",
    "commit_src": "9fc3fe033068a65a99639d799171835ecab65b40",
    "commit_tgt": "2136704d67f8940e708c2a4b090a4f9a510a2d93",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java#resetPassword_noUser",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java#resetPassword",
    "test_code_src": "  @Test\n  public void resetPassword_noUser() throws KlawException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }",
    "test_code_tgt": "  @Test\n  public void resetPassword_noUser() throws KlawNotAuthorizedException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }",
    "prod_code_src": "  public ResetPasswordInfo resetPassword(String username, String password, String resetToken) {\n    log.info(\"resetPassword {}\", username);\n    ResetPasswordInfo resetPasswordInfo = new ResetPasswordInfo();\n    UserInfoModelResponse userInfoModel = getUserInfoDetails(username);\n    resetPasswordInfo.setTokenSent(false);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    if (userInfoModel == null) {\n      resetPasswordInfo.setUserFound(false);\n    } else {\n      resetPasswordInfo.setUserFound(true);\n      PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n\n      String pwdUpdated = dbHandle.resetPassword(username, resetToken, encodePwd(password));\n\n      if (ApiResultStatus.SUCCESS.value.equals(pwdUpdated)) {\n        UserDetails updatePwdUserDetails = inMemoryUserDetailsManager.loadUserByUsername(username);\n        inMemoryUserDetailsManager.updatePassword(updatePwdUserDetails, encoder.encode(password));\n        resetPasswordInfo.setTokenSent(true);\n        mailService.sendMailPwdChanged(\n            username, dbHandle, userInfoModel.getTenantId(), commonUtilsService.getLoginUrl());\n      }\n    }\n    return resetPasswordInfo;\n  }",
    "prod_code_tgt": "  public ResetPasswordInfo resetPassword(String username, String password, String resetToken)\n      throws KlawNotAuthorizedException {\n    log.info(\"resetPassword {}\", username);\n    ResetPasswordInfo resetPasswordInfo = new ResetPasswordInfo();\n    UserInfoModelResponse userInfoModel = getUserInfoDetails(username);\n    resetPasswordInfo.setTokenSent(false);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    if (userInfoModel == null) {\n      resetPasswordInfo.setUserFound(false);\n    } else {\n      resetPasswordInfo.setUserFound(true);\n      PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n\n      String pwdUpdated = dbHandle.resetPassword(username, resetToken, encodePwd(password));\n\n      if (ApiResultStatus.SUCCESS.value.equals(pwdUpdated)) {\n        UserDetails updatePwdUserDetails = inMemoryUserDetailsManager.loadUserByUsername(username);\n        inMemoryUserDetailsManager.updatePassword(updatePwdUserDetails, encoder.encode(password));\n        resetPasswordInfo.setTokenSent(true);\n        mailService.sendMailPwdChanged(\n            username, dbHandle, userInfoModel.getTenantId(), commonUtilsService.getLoginUrl());\n      }\n    }\n    return resetPasswordInfo;\n  }",
    "test_id": 13,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-17 13:59:30+01:00",
    "commit_src": "ddd80773b44956682fb180b49c129b4ea7511f65",
    "commit_tgt": "aaf7a2689b005d9a47e0dc7b01e21d50d80517c2",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java#givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java#getTopicOverview",
    "test_code_src": "  @Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC, AclGroupBy.NONE);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }",
    "prod_code_src": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "prod_code_tgt": "  public TopicOverview getTopicOverview(String topicNameSearch, AclGroupBy groupBy) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo =\n        getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo, groupBy);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "test_id": 14,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-17 13:59:30+01:00",
    "commit_src": "ddd80773b44956682fb180b49c129b4ea7511f65",
    "commit_tgt": "aaf7a2689b005d9a47e0dc7b01e21d50d80517c2",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java#getAclsSyncFalse2",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java#getTopicOverview",
    "test_code_src": "  @Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList =\n        topicOverviewService.getTopicOverview(topicNameSearch, AclGroupBy.NONE).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "prod_code_src": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "prod_code_tgt": "  public TopicOverview getTopicOverview(String topicNameSearch, AclGroupBy groupBy) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo =\n        getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo, groupBy);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "test_id": 15,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-14 12:26:39+02:00",
    "commit_src": "55b72c5c35004038ca242c240ead4234e050c0eb",
    "commit_tgt": "4f3e3ef8000e1f6f9b116ddd0d3f031b0b938ed3",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java#getAclsSyncFalse1",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java#getTopicOverview",
    "test_code_src": "  @Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "prod_code_src": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        manageDatabase.getHandleDbRequests().getTopicTeam(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "prod_code_tgt": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "test_id": 17,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-14 12:26:39+02:00",
    "commit_src": "55b72c5c35004038ca242c240ead4234e050c0eb",
    "commit_tgt": "4f3e3ef8000e1f6f9b116ddd0d3f031b0b938ed3",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java#getAclsSyncFalse2",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java#getTopicOverview",
    "test_code_src": "  @Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
    "prod_code_src": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        manageDatabase.getHandleDbRequests().getTopicTeam(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "prod_code_tgt": "  public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
    "test_id": 18,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-13 12:54:40+02:00",
    "commit_src": "5167873eeb67fcd9719a3d8e1d32ec19c9005e5d",
    "commit_tgt": "55b72c5c35004038ca242c240ead4234e050c0eb",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java#getAllTopicsSuccess",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java#getAllTopics",
    "test_code_src": "  @Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<Map<String, String>> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }",
    "test_code_tgt": "  @Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<TopicConfig> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }",
    "prod_code_src": "  public List<Map<String, String>> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<Map<String, String>> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<Map<String, String>>> s =\n          getRestTemplate()\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
    "prod_code_tgt": "  public List<TopicConfig> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<TopicConfig> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<TopicConfig>> s =\n          getRestTemplate()\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
    "test_id": 19,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-12 11:32:47+02:00",
    "commit_src": "3b60ce7be6ac5dd22262b642a6f6db30a9953788",
    "commit_tgt": "a85b55d302480ca65fe5566710b5dc1ca652e751",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java#givenRequestForConfigWithNoneSet_returnCorrectConfig",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java#getAllEditableProps",
    "test_code_src": "  @Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }",
    "test_code_tgt": "  @Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }",
    "prod_code_src": "  public List<Map<String, String>> getAllEditableProps() {\n    List<Map<String, String>> listMap = new ArrayList<>();\n    Map<String, String> resultMap = new HashMap<>();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      resultMap.put(\"result\", ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(resultMap);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      resultMap = new HashMap<>();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      resultMap.put(\"kwkey\", kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(resultMap);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        resultMap.put(\"kwvalue\", kwVal);\n        resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(resultMap);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.get(\"kwkey\")))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
    "prod_code_tgt": "  public List<KwPropertiesResponse> getAllEditableProps() {\n    List<KwPropertiesResponse> listMap = new ArrayList<>();\n    KwPropertiesResponse propertiesResponse = new KwPropertiesResponse();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      propertiesResponse.setResult(ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(propertiesResponse);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      KwPropertiesResponse kwPropertiesResponse = new KwPropertiesResponse();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      kwPropertiesResponse.setKwkey(kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(kwPropertiesResponse);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        kwPropertiesResponse.setKwvalue(kwVal);\n        kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(kwPropertiesResponse);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.getKwkey()))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
    "test_id": 20,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-04-12 11:32:47+02:00",
    "commit_src": "3b60ce7be6ac5dd22262b642a6f6db30a9953788",
    "commit_tgt": "a85b55d302480ca65fe5566710b5dc1ca652e751",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java#givenRequestForConfig_returnCorrectConfig",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java#getAllEditableProps",
    "test_code_src": "  @Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }",
    "prod_code_src": "  public List<Map<String, String>> getAllEditableProps() {\n    List<Map<String, String>> listMap = new ArrayList<>();\n    Map<String, String> resultMap = new HashMap<>();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      resultMap.put(\"result\", ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(resultMap);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      resultMap = new HashMap<>();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      resultMap.put(\"kwkey\", kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(resultMap);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        resultMap.put(\"kwvalue\", kwVal);\n        resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(resultMap);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.get(\"kwkey\")))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
    "prod_code_tgt": "  public List<KwPropertiesResponse> getAllEditableProps() {\n    List<KwPropertiesResponse> listMap = new ArrayList<>();\n    KwPropertiesResponse propertiesResponse = new KwPropertiesResponse();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      propertiesResponse.setResult(ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(propertiesResponse);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      KwPropertiesResponse kwPropertiesResponse = new KwPropertiesResponse();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      kwPropertiesResponse.setKwkey(kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(kwPropertiesResponse);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        kwPropertiesResponse.setKwvalue(kwVal);\n        kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(kwPropertiesResponse);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.getKwkey()))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
    "test_id": 21,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-03-13 09:59:16+01:00",
    "commit_src": "20db73dc996274bbdd6455f51c32e448035998d0",
    "commit_tgt": "2d15ef0846892a6b104112a75d24a8574fc42a6b",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java#approveTopicRequestsSuccess",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java#approveTopicRequests",
    "test_code_src": "  @Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "test_code_tgt": "  @Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1, false);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "prod_code_src": "  public ResponseEntity<ApiResponse> approveTopicRequests(\n      String topicName,\n      String topicRequestType,\n      int topicPartitions,\n      String replicationFactor,\n      String topicEnvId,\n      Map<String, String> advancedTopicConfiguration,\n      int tenantId)\n      throws KlawException {\n    log.info(\"approveTopicRequests {} {}\", topicName, topicEnvId);\n    getClusterApiProperties(tenantId);\n    ResponseEntity<ApiResponse> response;\n    ClusterTopicRequest clusterTopicRequest;\n    try {\n      Env envSelected = manageDatabase.getHandleDbRequests().selectEnvDetails(topicEnvId, tenantId);\n      KwClusters kwClusters =\n          manageDatabase\n              .getClusters(KafkaClustersType.KAFKA, tenantId)\n              .get(envSelected.getClusterId());\n      clusterTopicRequest =\n          ClusterTopicRequest.builder()\n              .env(kwClusters.getBootstrapServers())\n              .protocol(kwClusters.getProtocol())\n              .clusterName(kwClusters.getClusterName() + kwClusters.getClusterId())\n              .topicName(topicName)\n              .aclsNativeType(\n                  (Objects.equals(kwClusters.getKafkaFlavor(), KafkaFlavors.CONFLUENT_CLOUD.value))\n                      ? AclsNativeType.CONFLUENT_CLOUD\n                      : AclsNativeType.NATIVE)\n              .build();\n\n      String uri;\n      if (RequestOperationType.CREATE.value.equals(topicRequestType)\n          || RequestOperationType.PROMOTE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_CREATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .advancedTopicConfiguration(advancedTopicConfiguration)\n                .build();\n      } else if (RequestOperationType.UPDATE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_UPDATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .build();\n      } else {\n        uri = clusterConnUrl + URI_DELETE_TOPICS;\n      }\n\n      HttpHeaders headers = createHeaders(clusterApiUser);\n      headers.setContentType(MediaType.APPLICATION_JSON);\n      HttpEntity<ClusterTopicRequest> request = new HttpEntity<>(clusterTopicRequest, headers);\n      response = getRestTemplate().postForEntity(uri, request, ApiResponse.class);\n    } catch (Exception e) {\n      log.error(\"approveTopicRequests {}\", topicName, e);\n      throw new KlawException(\"Could not approve topic request. Please contact Administrator.\");\n    }\n    return response;\n  }",
    "prod_code_tgt": "  public ResponseEntity<ApiResponse> approveTopicRequests(\n      String topicName,\n      String topicRequestType,\n      int topicPartitions,\n      String replicationFactor,\n      String topicEnvId,\n      Map<String, String> advancedTopicConfiguration,\n      int tenantId,\n      Boolean deleteAssociatedSchema)\n      throws KlawException {\n    log.info(\"approveTopicRequests {} {}\", topicName, topicEnvId);\n    getClusterApiProperties(tenantId);\n    ResponseEntity<ApiResponse> response;\n    ClusterTopicRequest clusterTopicRequest;\n    try {\n      Env envSelected = manageDatabase.getHandleDbRequests().selectEnvDetails(topicEnvId, tenantId);\n      KwClusters kwClusters =\n          manageDatabase\n              .getClusters(KafkaClustersType.KAFKA, tenantId)\n              .get(envSelected.getClusterId());\n      clusterTopicRequest =\n          ClusterTopicRequest.builder()\n              .env(kwClusters.getBootstrapServers())\n              .protocol(kwClusters.getProtocol())\n              .clusterName(kwClusters.getClusterName() + kwClusters.getClusterId())\n              .topicName(topicName)\n              .aclsNativeType(\n                  (Objects.equals(kwClusters.getKafkaFlavor(), KafkaFlavors.CONFLUENT_CLOUD.value))\n                      ? AclsNativeType.CONFLUENT_CLOUD\n                      : AclsNativeType.NATIVE)\n              .build();\n\n      String uri;\n      if (RequestOperationType.CREATE.value.equals(topicRequestType)\n          || RequestOperationType.PROMOTE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_CREATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .advancedTopicConfiguration(advancedTopicConfiguration)\n                .build();\n      } else if (RequestOperationType.UPDATE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_UPDATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .build();\n      } else {\n        uri = clusterConnUrl + URI_DELETE_TOPICS;\n        if (deleteAssociatedSchema) {\n          // get associated schema env\n          Env schemaEnvSelected =\n              manageDatabase\n                  .getHandleDbRequests()\n                  .selectEnvDetails(envSelected.getAssociatedEnv().getId(), tenantId);\n          KwClusters kwClustersSchemaEnv =\n              manageDatabase\n                  .getClusters(KafkaClustersType.SCHEMA_REGISTRY, tenantId)\n                  .get(schemaEnvSelected.getClusterId());\n          clusterTopicRequest =\n              clusterTopicRequest.toBuilder()\n                  .deleteAssociatedSchema(true)\n                  .schemaClusterIdentification(\n                      kwClustersSchemaEnv.getClusterName() + kwClustersSchemaEnv.getClusterId())\n                  .schemaEnv(kwClustersSchemaEnv.getBootstrapServers())\n                  .schemaEnvProtocol(kwClustersSchemaEnv.getProtocol())\n                  .build();\n        }\n      }\n\n      HttpHeaders headers = createHeaders(clusterApiUser);\n      headers.setContentType(MediaType.APPLICATION_JSON);\n      HttpEntity<ClusterTopicRequest> request = new HttpEntity<>(clusterTopicRequest, headers);\n      response = getRestTemplate().postForEntity(uri, request, ApiResponse.class);\n    } catch (Exception e) {\n      log.error(\"approveTopicRequests {}\", topicName, e);\n      throw new KlawException(\"Could not approve topic request. Please contact Administrator.\");\n    }\n    return response;\n  }",
    "test_id": 31,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-20 09:51:52+01:00",
    "commit_src": "b9b176b42909fb8e1f5e00e0fcaac0a438106312",
    "commit_tgt": "91ba7c186812119702a6147074e80edae6e90e03",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java#declineTopicRequestsFailureRequestDoesNotExist",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java#declineTopicRequests",
    "test_code_src": "  @Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setTopicstatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setRequestStatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }",
    "prod_code_src": "  public ApiResponse declineTopicRequests(String topicId, String reasonForDecline)\n      throws KlawException {\n    log.info(\"declineTopicRequests {} {}\", topicId, reasonForDecline);\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.APPROVE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    String userName = getUserName();\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    TopicRequest topicRequest =\n        dbHandle.selectTopicRequestsForTopic(\n            Integer.parseInt(topicId), commonUtilsService.getTenantId(userName));\n\n    if (!RequestStatus.CREATED.value.equals(topicRequest.getTopicstatus())) {\n      return ApiResponse.builder().result(\"This request does not exist anymore.\").build();\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    if (!allowedEnvIdSet.contains(topicRequest.getEnvironment())) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    try {\n      String result = dbHandle.declineTopicRequest(topicRequest, userName);\n      mailService.sendMail(\n          topicRequest.getTopicname(),\n          null,\n          reasonForDecline,\n          topicRequest.getRequestor(),\n          dbHandle,\n          TOPIC_REQUEST_DENIED,\n          commonUtilsService.getLoginUrl());\n\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse declineTopicRequests(String topicId, String reasonForDecline)\n      throws KlawException {\n    log.info(\"declineTopicRequests {} {}\", topicId, reasonForDecline);\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.APPROVE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    String userName = getUserName();\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    TopicRequest topicRequest =\n        dbHandle.selectTopicRequestsForTopic(\n            Integer.parseInt(topicId), commonUtilsService.getTenantId(userName));\n\n    if (!RequestStatus.CREATED.value.equals(topicRequest.getRequestStatus())) {\n      return ApiResponse.builder().result(\"This request does not exist anymore.\").build();\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    if (!allowedEnvIdSet.contains(topicRequest.getEnvironment())) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    try {\n      String result = dbHandle.declineTopicRequest(topicRequest, userName);\n      mailService.sendMail(\n          topicRequest.getTopicname(),\n          null,\n          reasonForDecline,\n          topicRequest.getRequestor(),\n          dbHandle,\n          TOPIC_REQUEST_DENIED,\n          commonUtilsService.getLoginUrl());\n\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "test_id": 32,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-14 16:23:36+00:00",
    "commit_src": "f84af3e6a54995570c10844b002da2fcf7f695e5",
    "commit_tgt": "dcf22786af04641156c0f32913dccf61d379726b",
    "changed_test": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java#deleteSchemaRequest",
    "changed_prod": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java#deleteSchemaRequest",
    "test_code_src": "  @Test\n  public void deleteSchemaRequest() {\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "test_code_tgt": "  @Test\n  public void deleteSchemaRequest() {\n    SchemaRequest req = new SchemaRequest();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(schemaRequestRepo.findById(new SchemaRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "prod_code_src": "  public String deleteSchemaRequest(int avroSchemaId, int tenantId) {\n    log.debug(\"deleteSchemaRequest {}\", avroSchemaId);\n    SchemaRequestID schemaRequestID = new SchemaRequestID(avroSchemaId, tenantId);\n    Optional<SchemaRequest> schemaReq = schemaRequestRepo.findById(schemaRequestID);\n    if (schemaReq.isPresent()) {\n      schemaReq.get().setTopicstatus(\"deleted\");\n      schemaRequestRepo.save(schemaReq.get());\n    }\n    return ApiResultStatus.SUCCESS.value;\n  }",
    "prod_code_tgt": "  public String deleteSchemaRequest(int avroSchemaId, String userName, int tenantId) {\n    log.debug(\"deleteSchemaRequest {}\", avroSchemaId);\n    SchemaRequestID schemaRequestID = new SchemaRequestID(avroSchemaId, tenantId);\n    Optional<SchemaRequest> schemaReq = schemaRequestRepo.findById(schemaRequestID);\n    if (schemaReq.isPresent() && schemaReq.get().getUsername().equals(userName)) {\n      schemaReq.get().setTopicstatus(\"deleted\");\n      schemaRequestRepo.save(schemaReq.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }",
    "test_id": 33,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-14 11:13:38+00:00",
    "commit_src": "4f5187e3796f1c66846582dea09d71fcae407822",
    "commit_tgt": "0f5599f424887afca35ac5ede9715fd55e89514b",
    "changed_test": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java#getTopicRequests",
    "changed_prod": "core/src/main/java/io/aiven/klaw/controller/TopicController.java#getTopicRequests",
    "test_code_src": "  @Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\")).thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "test_code_tgt": "  @Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false))\n        .thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "prod_code_src": "  public ResponseEntity<List<TopicRequestModel>> getTopicRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"all\") String requestsType) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequests(pageNo, currentPage, requestsType), HttpStatus.OK);\n  }",
    "prod_code_tgt": "  /**\n   * @param pageNo Which page would you like returned e.g. 1\n   * @param currentPage Which Page are you currently on e.g. 1\n   * @param requestsType What type of requests are you looking for e.g. 'created' or 'deleted'\n   * @param env The name of the environment you would like returned e.g. '1' or '4'\n   * @param isMyRequest Only return requests created by the user calling the API\n   * @return A List of Topic Requests filtered by the provided parameters.\n   */\n  @RequestMapping(\n      value = \"/getTopicRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"all\") String requestsType,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"isMyRequest\", required = false, defaultValue = \"false\")\n          boolean isMyRequest) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequests(\n            pageNo, currentPage, requestsType, env, isMyRequest),\n        HttpStatus.OK);\n  }",
    "test_id": 35,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-14 11:13:38+00:00",
    "commit_src": "4f5187e3796f1c66846582dea09d71fcae407822",
    "commit_tgt": "0f5599f424887afca35ac5ede9715fd55e89514b",
    "changed_test": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java#deleteTopicRequest",
    "changed_prod": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java#deleteTopicRequest",
    "test_code_src": "  @Test\n  public void deleteTopicRequest() {\n    String result = deleteDataJdbc.deleteTopicRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "test_code_tgt": "  @Test\n  public void deleteTopicRequest() {\n    TopicRequestID id = new TopicRequestID(1010, 1);\n    when(topicRequestsRepo.findById(eq(id)))\n        .thenReturn(createTopicRequest(\"uiuser1\", RequestStatus.CREATED));\n    String result = deleteDataJdbc.deleteTopicRequest(1010, \"uiuser1\", 1);\n    assertThat(result).contains(ApiResultStatus.SUCCESS.value);\n  }",
    "prod_code_src": "  public String deleteTopicRequest(int topicId, int tenantId) {\n    log.debug(\"deleteTopicRequest {}\", topicId);\n\n    TopicRequestID topicRequestID = new TopicRequestID();\n    topicRequestID.setTenantId(tenantId);\n    topicRequestID.setTopicid(topicId);\n\n    Optional<TopicRequest> topicReq = topicRequestsRepo.findById(topicRequestID);\n    if (topicReq.isPresent()) {\n      topicReq.get().setTopicstatus(\"deleted\");\n      topicRequestsRepo.save(topicReq.get());\n    }\n    return ApiResultStatus.SUCCESS.value;\n  }",
    "prod_code_tgt": "  public String deleteTopicRequest(int topicId, String userName, int tenantId) {\n    log.debug(\"deleteTopicRequest {}\", topicId);\n\n    TopicRequestID topicRequestID = new TopicRequestID();\n    topicRequestID.setTenantId(tenantId);\n    topicRequestID.setTopicid(topicId);\n\n    Optional<TopicRequest> topicReq = topicRequestsRepo.findById(topicRequestID);\n    // UserName is transient and is not set in the database but the requestor is. Both are set to\n    // the userName when the request is created.\n    if (topicReq.isPresent() && topicReq.get().getRequestor().equals(userName)) {\n      topicReq.get().setTopicstatus(\"deleted\");\n      topicRequestsRepo.save(topicReq.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }",
    "test_id": 36,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-13 16:17:32+00:00",
    "commit_src": "a1ae06593d10cc36848a864e03310e8661528692",
    "commit_tgt": "4f5187e3796f1c66846582dea09d71fcae407822",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java#deleteAclRequestsFailure",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java#deleteAclRequests",
    "test_code_src": "  @Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }",
    "test_code_tgt": "  @Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(mailService.getCurrentUserName()).thenReturn(\"testuser\");\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyString(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }",
    "prod_code_src": "  public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), commonUtilsService.getTenantId(getCurrentUserName()));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      String userName = getCurrentUserName();\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), userName, commonUtilsService.getTenantId(userName));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
    "test_id": 38,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-13 16:17:32+00:00",
    "commit_src": "a1ae06593d10cc36848a864e03310e8661528692",
    "commit_tgt": "4f5187e3796f1c66846582dea09d71fcae407822",
    "changed_test": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java#deleteAclRequest",
    "changed_prod": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java#deleteAclRequest",
    "test_code_src": "  @Test\n  public void deleteAclRequest() {\n    String result = deleteDataJdbc.deleteAclRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "test_code_tgt": "  @Test\n  public void deleteAclRequest() {\n    AclRequests req = new AclRequests();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(aclRequestsRepo.findById(new AclRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteAclRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
    "prod_code_src": "  public String deleteAclRequest(int aclId, int tenantId) {\n    log.debug(\"deleteAclRequest {}\", aclId);\n    AclRequestID aclRequestID = new AclRequestID();\n    aclRequestID.setReq_no(aclId);\n    aclRequestID.setTenantId(tenantId);\n    Optional<AclRequests> optAclRequests = aclRequestsRepo.findById(aclRequestID);\n    if (optAclRequests.isPresent()) {\n      optAclRequests.get().setAclstatus(\"deleted\");\n      aclRequestsRepo.save(optAclRequests.get());\n    }\n\n    return ApiResultStatus.SUCCESS.value;\n  }",
    "prod_code_tgt": "  public String deleteAclRequest(int aclId, String userName, int tenantId) {\n    log.debug(\"deleteAclRequest {}\", aclId);\n    AclRequestID aclRequestID = new AclRequestID();\n    aclRequestID.setReq_no(aclId);\n    aclRequestID.setTenantId(tenantId);\n    Optional<AclRequests> optAclRequests = aclRequestsRepo.findById(aclRequestID);\n    if (optAclRequests.isPresent() && optAclRequests.get().getUsername().equals(userName)) {\n      optAclRequests.get().setAclstatus(\"deleted\");\n      aclRequestsRepo.save(optAclRequests.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }",
    "test_id": 39,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-09 08:18:02+00:00",
    "commit_src": "9115ab581917d04ec535b96d6d476e98ffc8147a",
    "commit_tgt": "df96ad15bbfe5647082c54622ea9b8efeb96de76",
    "changed_test": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java#getCreatedTopicRequests",
    "changed_prod": "core/src/main/java/io/aiven/klaw/controller/TopicController.java#getTopicRequestsForApprover",
    "test_code_src": "  @Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\"))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "test_code_tgt": "  @Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\", null, null, null))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
    "prod_code_src": "  /*\n     For executing topic requests\n  */\n  @RequestMapping(\n      value = \"/getTopicRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequestsForApprover(pageNo, currentPage, requestsType),\n        HttpStatus.OK);\n  }",
    "prod_code_tgt": "  /**\n   * @param pageNo Which page would you like returned e.g. 1\n   * @param currentPage Which Page are you currently on e.g. 1\n   * @param requestsType What type of requests are you looking for e.g. 'created' or 'deleted'\n   * @param teamId The identifier of the team that created the request that you wish to filter the\n   *     results by, e.g. 1,2,3\n   * @param env The name of the environment you would like returned e.g. '1' or '4'\n   * @param search A wildcard search term that searches topicNames.\n   * @return A List of Topic Requests filtered by the provided parameters.\n   */\n  @RequestMapping(\n      value = \"/getTopicRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"search\", required = false) String search) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequestsForApprover(\n            pageNo, currentPage, requestsType, teamId, env, search),\n        HttpStatus.OK);\n  }",
    "test_id": 42,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-01 15:17:28+00:00",
    "commit_src": "04c249b5e00b70013e0d9fd0e176967f2f9b0e46",
    "commit_tgt": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java#createTopicDeleteRequestFailureTopicAlreadyExists",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java#createTopicDeleteRequest",
    "test_code_src": "  @Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "test_code_tgt": "  @Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "prod_code_src": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "test_id": 47,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-01 15:17:28+00:00",
    "commit_src": "04c249b5e00b70013e0d9fd0e176967f2f9b0e46",
    "commit_tgt": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java#createTopicDeleteRequestFailureTopicWithSubscriptions",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java#createTopicDeleteRequest",
    "test_code_src": "  @Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "test_code_tgt": "  @Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "prod_code_src": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "test_id": 48,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "Aiven-Open/klaw",
    "commit_date": "2023-02-01 15:17:28+00:00",
    "commit_src": "04c249b5e00b70013e0d9fd0e176967f2f9b0e46",
    "commit_tgt": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
    "changed_test": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java#createTopicDeleteRequestSuccessDefaultValues",
    "changed_prod": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java#createTopicDeleteRequest",
    "test_code_src": "  @Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "test_code_tgt": "  @Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }",
    "prod_code_src": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "prod_code_tgt": "  public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
    "test_id": 49,
    "src_java_version": "17",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "17",
    "tgt_maven_version": "3.8.1"
  }
]