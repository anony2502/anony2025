[
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2024-01-02 16:50:52+08:00",
    "commit_src": "e3384f85858bf8fe4f54834690df3eef3e838e18",
    "commit_tgt": "e27a26b8ca3de5c167dc676f22d280f217cd1e5f",
    "changed_test": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java#testDecorator",
    "changed_prod": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecorator.java#decorator",
    "test_code_src": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"divide-springCloud\");\n    }",
    "test_code_tgt": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"springCloud-springCloud\");\n    }",
    "prod_code_src": "@Override\n    public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {\n        String path = shenyuContext.getPath();\n        shenyuContext.setMethod(path);\n        shenyuContext.setRealUrl(path);\n        shenyuContext.setRpcType(RpcTypeEnum.SPRING_CLOUD.getName());\n        shenyuContext.setModule(String.format(\"%s-%s\", PluginEnum.DIVIDE.getName(), shenyuContext.getRpcType()));\n        return shenyuContext;\n    }",
    "prod_code_tgt": "@Override\n    public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {\n        String path = shenyuContext.getPath();\n        shenyuContext.setMethod(path);\n        shenyuContext.setRealUrl(path);\n        shenyuContext.setRpcType(RpcTypeEnum.SPRING_CLOUD.getName());\n        shenyuContext.setModule(Optional.ofNullable(metaData).map(MetaData::getAppName)\n                .orElse(String.format(\"%s-%s\", PluginEnum.SPRING_CLOUD.getName(), shenyuContext.getRpcType())));\n        return shenyuContext;\n    }",
    "test_id": 0,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-08-01 11:58:17+08:00",
    "commit_src": "4800386d91fe3fd24c905437fc85fef6acf580b7",
    "commit_tgt": "fc2bc20aa989317fe34fb6d181b6f890a90f6b6d",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java#testDoSubmit",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java#doSubmit",
    "test_code_src": "@Test\n    public void testDoSubmit() {\n        assertFalse(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }",
    "test_code_tgt": "@Test\n    public void testDoSubmit() {\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }",
    "prod_code_src": "protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {\n        List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);\n        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))\n                .collect(Collectors.toList()).stream().findAny().orElse(false);\n    }",
    "prod_code_tgt": "protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {\n        List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);\n        if (CollectionUtils.isEmpty(upstreamList)) {\n            return true;\n        }\n        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))\n                .collect(Collectors.toList()).stream().findAny().orElse(false);\n    }",
    "test_id": 1,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-07-30 21:44:39+08:00",
    "commit_src": "40e1f22e73cbb826cc5fa7267d977b4fdb17bcf9",
    "commit_tgt": "6f90d1a121dbad7b748a1a14b4669d369b6f7bc6",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java#deleteEtcdPathRecursive",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdClient.java#deleteEtcdPathRecursive",
    "test_code_src": "@Test\n    public void deleteEtcdPathRecursive() {\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }",
    "test_code_tgt": "@Test\n    public void deleteEtcdPathRecursive() {\n        when(client.getKVClient().delete(any(ByteSequence.class), any(DeleteOption.class))).thenReturn(mock(CompletableFuture.class));\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }",
    "prod_code_src": "public void deleteEtcdPathRecursive(final String path) {\n        DeleteOption option = DeleteOption.newBuilder()\n                .withPrefix(ByteSequence.from(path, StandardCharsets.UTF_8))\n                .build();\n        client.getKVClient().delete(ByteSequence.from(path, StandardCharsets.UTF_8), option);\n    }",
    "prod_code_tgt": "public void deleteEtcdPathRecursive(final String path) {\n        DeleteOption option = DeleteOption.newBuilder()\n                .withPrefix(ByteSequence.from(path, StandardCharsets.UTF_8))\n                .build();\n        try {\n            client.getKVClient().delete(ByteSequence.from(path, StandardCharsets.UTF_8), option).get(10, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            LOG.error(\"delete node of recursive error.\", e);\n            throw new ShenyuException(e.getMessage());\n        }\n    }",
    "test_id": 2,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-07-19 16:42:22+08:00",
    "commit_src": "f3385719a75ac6250179d1927d01e611385e09de",
    "commit_tgt": "7667c46dc1955843f8f5cca998a0d93dea96ba32",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataSyncConfigurationTest.java#testConsulClient",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataSyncConfiguration.java#consulClient",
    "test_code_src": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"127.0.0.1\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }",
    "test_code_tgt": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"http://127.0.0.1:8500\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }",
    "prod_code_src": "@Bean\n        public ConsulClient consulClient(final ConsulProperties consulProperties) {\n            return new ConsulClient(consulProperties.getUrl());\n        }",
    "prod_code_tgt": "@Bean\n        public ConsulClient consulClient(final ConsulProperties consulProperties) {\n            String url = consulProperties.getUrl();\n            if (StringUtils.isBlank(url)) {\n                throw new ShenyuException(\"sync.consul.url can not be null.\");\n            }\n            try {\n                URL consulUrl = new URL(url);\n                return consulUrl.getPort() < 0 ? new ConsulClient(consulUrl.getHost()) : new ConsulClient(consulUrl.getHost(), consulUrl.getPort());\n            } catch (MalformedURLException e) {\n                throw new ShenyuException(\"sync.consul.url formatter is not incorrect.\");\n            }\n        }",
    "test_id": 3,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-07-14 11:29:55+08:00",
    "commit_src": "bf61e5e08aa80aa9f4c7ea8ebc37b0913c21ce1c",
    "commit_tgt": "4ea79fa2f6401e401b65412dc63c2978f193ac00",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java#consulClientTest",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ConsulServerConfiguration.java#consulClient",
    "test_code_src": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }",
    "test_code_tgt": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            when(config.getServerLists()).thenReturn(\"127.0.0.1:8500\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }",
    "prod_code_src": "@Bean(name = \"registerConsulClient\")\n    public ConsulClient consulClient(final ShenyuRegisterCenterConfig config) {\n        return new ConsulClient(config.getServerLists());\n    }",
    "prod_code_tgt": "@Bean(name = \"registerConsulClient\")\n    public ConsulClient consulClient(final ShenyuRegisterCenterConfig config) {\n        final String serverList = config.getServerLists();\n        if (StringUtils.isBlank(serverList)) {\n            throw new ShenyuException(\"serverList can not be null.\");\n        }\n        final String[] addresses = serverList.split(\":\");\n        if (addresses.length != 2) {\n            throw new ShenyuException(\"serverList formatter is not incorrect.\");\n        }\n        return new ConsulClient(addresses[0], Integer.parseInt(addresses[1]));\n    }",
    "test_id": 4,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-06-06 14:07:11+08:00",
    "commit_src": "bc16c5fdc36d9df337286f5fb16321464c1f11a0",
    "commit_tgt": "846ec64bd61dacb7c7a89aca4e0c86c4e9226663",
    "changed_test": "shenyu-client/shenyu-client-sofa/src/test/java/org/apache/shenyu/client/sofa/SofaServiceEventListenerTest.java#testBuildURIRegisterDTO",
    "changed_prod": "shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceEventListener.java#buildURIRegisterDTO",
    "test_code_src": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }",
    "test_code_tgt": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .eventType(EventType.REGISTER)\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }",
    "prod_code_src": "@Override\n    protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,\n                                                 final Map<String, ServiceFactoryBean> beans) {\n        return URIRegisterDTO.builder()\n                .contextPath(this.getContextPath())\n                .appName(this.getAppName())\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .host(super.getHost())\n                .port(Integer.parseInt(getPort()))\n                .build();\n    }",
    "prod_code_tgt": "@Override\n    protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,\n                                                 final Map<String, ServiceFactoryBean> beans) {\n        return URIRegisterDTO.builder()\n                .contextPath(this.getContextPath())\n                .appName(this.getAppName())\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .eventType(EventType.REGISTER)\n                .host(super.getHost())\n                .port(Integer.parseInt(getPort()))\n                .build();\n    }",
    "test_id": 7,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-04-02 12:00:43+08:00",
    "commit_src": "be2c3ff1ce7cc721c08e54a0c3cdb1b9b89f6381",
    "commit_tgt": "09b236e16bca76c394696cb049569c57eff94f90",
    "changed_test": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClientTest.java#getChildren",
    "changed_prod": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClient.java#getChildren",
    "test_code_src": "@Test\n    void getChildren() throws Exception {\n        assertThrows(ShenyuException.class, () -> client.getChildren(\"/test\"));\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }",
    "test_code_tgt": "@Test\n    void getChildren() throws Exception {\n        assertTrue(client.getChildren(\"/test\").isEmpty());\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }",
    "prod_code_src": "public List<String> getChildren(final String key) {\n        try {\n            return client.getChildren().forPath(key);\n        } catch (Exception e) {\n            throw new ShenyuException(e);\n        }\n    }",
    "prod_code_tgt": "public List<String> getChildren(final String key) {\n        try {\n            return client.getChildren().forPath(key);\n        } catch (Exception e) {\n            LOGGER.error(\"zookeeper get child error=\", e);\n            return Collections.emptyList();\n        }\n    }",
    "test_id": 9,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2023-03-30 11:10:04+08:00",
    "commit_src": "3d8798be91e4af7648f538ca5fc52e7b65454e6a",
    "commit_tgt": "b5bc26d219a9f4d1353b6e0a9e40acfcbbec5af5",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroRealmTest.java#testSupports",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/config/ShiroRealm.java#supports",
    "test_code_src": "@Test\n    public void testSupports() {\n        StatelessToken token = mock(StatelessToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }",
    "test_code_tgt": "@Test\n    public void testSupports() {\n        BearerToken token = mock(BearerToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }",
    "prod_code_src": "@Override\n    public boolean supports(final AuthenticationToken token) {\n        return token instanceof StatelessToken;\n    }",
    "prod_code_tgt": "@Override\n    public boolean supports(final AuthenticationToken token) {\n        return token instanceof BearerToken;\n    }",
    "test_id": 10,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-10-22 23:10:28+08:00",
    "commit_src": "bcbf1fd40bf9b80c13e6d7ecef2120cd50cfb021",
    "commit_tgt": "d8ece536e290ecc6b0e310711aed0c332ce26acb",
    "changed_test": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java#testPersistInstance",
    "changed_prod": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/main/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepository.java#convertFromInstance",
    "test_code_src": "@Test\n    public void testPersistInstance() {\n        InstanceRegisterDTO data = InstanceRegisterDTO.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }",
    "test_code_tgt": "@Test\n    public void testPersistInstance() {\n        InstanceEntity data = InstanceEntity.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }",
    "prod_code_src": "private InstanceRegisterDTO convertFromInstance(final Instance instance) {\n        InstanceRegisterDTO instanceRegisterDTO = new InstanceRegisterDTO();\n        instanceRegisterDTO.setPort(instance.getPort());\n        instanceRegisterDTO.setHost(instance.getInstanceId());\n        instanceRegisterDTO.setAppName(instance.getServiceName());\n        return instanceRegisterDTO;\n    }",
    "prod_code_tgt": "private InstanceEntity convertFromInstance(final Instance instance) {\n        InstanceEntity instanceEntity = new InstanceEntity();\n        instanceEntity.setPort(instance.getPort());\n        instanceEntity.setHost(instance.getInstanceId());\n        instanceEntity.setAppName(instance.getServiceName());\n        return instanceEntity;\n    }",
    "test_id": 11,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-09-18 00:48:18+08:00",
    "commit_src": "20576a278779773260aa8ccedd10ef26b6d881f8",
    "commit_tgt": "942435610cc40554ceb4bd1a802b2d5d6cd0d9f0",
    "changed_test": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java#testSentinelPluginNotHttpStatusOK",
    "changed_prod": "shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data))\n                .expectError(HttpStatusCodeException.class).verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }",
    "test_code_tgt": "@Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data)).expectComplete().verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        String resourceName = CacheKeyUtils.INST.getKey(rule);\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        return chain.execute(exchange).doOnSuccess(v -> {\n            HttpStatus status = exchange.getResponse().getStatusCode();\n            if (status == null || !status.is2xxSuccessful()) {\n                exchange.getResponse().setStatusCode(null);\n                throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);\n            }\n        }).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->\n                fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        String resourceName = CacheKeyUtils.INST.getKey(rule);\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        exchange.getAttributes().put(Constants.WATCHER_HTTP_STATUS, (Consumer<HttpStatus>) status -> {\n            if (status == null || !status.is2xxSuccessful()) {\n                throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);\n            }\n        });\n        return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->\n                fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));\n    }",
    "test_id": 12,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-09-15 14:48:52+08:00",
    "commit_src": "fb6fd3327b2211bd6c719e19e19517f852a1a2c7",
    "commit_tgt": "ccd8d6c57613737381f82c7be81a6af8999a0314",
    "changed_test": "shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java#getKey",
    "changed_prod": "shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtils.java#getKey",
    "test_code_src": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).name(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }",
    "test_code_tgt": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).id(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }",
    "prod_code_src": "public String getKey(final RuleData ruleData) {\n        return ruleData.getSelectorId() + \"_\" + ruleData.getName();\n    }",
    "prod_code_tgt": "public String getKey(final RuleData ruleData) {\n        return String.join(\"_\", ruleData.getSelectorId(), ruleData.getId());\n    }",
    "test_id": 13,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-09-06 10:38:49+08:00",
    "commit_src": "83e9958f480851825ea1aa8412ff99838fd5b772",
    "commit_tgt": "6fee634e61daab93404665443b68257809f529a2",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/MapperConfigTest.java#oracleSqlUpdateInterceptorTest",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/MapperConfig.java#oracleSqlUpdateInterceptor",
    "test_code_src": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(mapperConfig.oracleSqlUpdateInterceptor());\n    }",
    "test_code_tgt": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(oracleSQLConfig.oracleSqlUpdateInterceptor());\n    }",
    "prod_code_src": "@Bean\n    @ConditionalOnProperty(name = \"shenyu.database.dialect\", havingValue = \"oracle\")\n    public PostgreSqlUpdateInterceptor oracleSqlUpdateInterceptor() {\n        return new PostgreSqlUpdateInterceptor();\n    }",
    "prod_code_tgt": "@Bean\n        @ConditionalOnMissingBean(OracleSQLUpdateInterceptor.class)\n        public OracleSQLUpdateInterceptor oracleSqlUpdateInterceptor() {\n            return new OracleSQLUpdateInterceptor();\n        }",
    "test_id": 14,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-09-02 13:51:33+08:00",
    "commit_src": "aa5e6d8b188f37a6c5965dc8397dae1e513009a7",
    "commit_tgt": "fe4bfaf014f3058d4b0264d3492cd5c2d25c8ef1",
    "changed_test": "shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java#doExecuteAllowedTest",
    "changed_prod": "shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1, null)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        RateLimiterHandle limiterHandle = RateLimiterPluginDataHandler.CACHED_HANDLE.get()\n                .obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        String resolverKey = Optional.ofNullable(limiterHandle.getKeyResolverName())\n                .flatMap(name -> Optional.of(\"-\" + RateLimiterKeyResolverFactory.newInstance(name).resolve(exchange)))\n                .orElse(\"\");\n        return redisRateLimiter.isAllowed(rule.getId() + resolverKey, limiterHandle)\n                .flatMap(response -> {\n                    if (!response.isAllowed()) {\n                        exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);\n                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);\n                        return WebFluxResultUtils.result(exchange, error);\n                    }\n                    return chain.execute(exchange);\n                });\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        RateLimiterHandle limiterHandle = RateLimiterPluginDataHandler.CACHED_HANDLE.get()\n                .obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        String resolverKey = Optional.ofNullable(limiterHandle.getKeyResolverName())\n                .flatMap(name -> Optional.of(\"-\" + RateLimiterKeyResolverFactory.newInstance(name).resolve(exchange)))\n                .orElse(\"\");\n        return redisRateLimiter.isAllowed(rule.getId() + resolverKey, limiterHandle)\n                .flatMap(response -> {\n                    if (!response.isAllowed()) {\n                        exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);\n                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);\n                        return WebFluxResultUtils.result(exchange, error);\n                    }\n                    return chain.execute(exchange).doFinally(signalType -> {\n                        RateLimiterAlgorithm<?> rateLimiterAlgorithm = RateLimiterAlgorithmFactory.newInstance(limiterHandle.getAlgorithmName());\n                        rateLimiterAlgorithm.callback(rateLimiterAlgorithm.getScript(), response.getKeys(), null);\n                    });\n                });\n    }",
    "test_id": 15,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2022-03-04 18:47:02+08:00",
    "commit_src": "59331e687768d03f321c66301e12c644875b04d3",
    "commit_tgt": "a651e69251d5ecd8c1da258f1e5a28276b4494cc",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/ShaUtilsTest.java#testShaEncryption",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShaUtils.java#shaEncryption",
    "test_code_src": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }",
    "test_code_tgt": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }",
    "prod_code_src": "public static String shaEncryption(final String src) {\n        return Optional.ofNullable(src).map(item -> {\n            if (StringUtils.isEmpty(src)) {\n                return null;\n            }\n            try {\n                MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n                messageDigest.update(item.getBytes());\n                byte[] byteBuffer = messageDigest.digest();\n                StringBuffer strHexString = new StringBuffer();\n                for (byte b:byteBuffer) {\n                    String hex = Integer.toHexString(0xff & b);\n                    strHexString.append(hex);\n                }\n                return strHexString.toString();\n            } catch (Exception e) {\n                throw new ShenyuException(e);\n            }\n        }).orElse(null);\n    }",
    "prod_code_tgt": "public static String shaEncryption(final String src) {\n        return Optional.ofNullable(src).map(item -> {\n            if (StringUtils.isEmpty(src)) {\n                return null;\n            }\n            try {\n                MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n                messageDigest.update(item.getBytes());\n                byte[] byteBuffer = messageDigest.digest();\n                StringBuffer strHexString = new StringBuffer();\n                for (byte b:byteBuffer) {\n                    String hex = Integer.toHexString(0xff & b);\n                    if (hex.length() == 1) {\n                        strHexString.append('0');\n                    }\n                    strHexString.append(hex);\n                }\n                return strHexString.toString();\n            } catch (Exception e) {\n                throw new ShenyuException(e);\n            }\n        }).orElse(null);\n    }",
    "test_id": 17,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-12-19 20:36:34+08:00",
    "commit_src": "541bffb60cdf512fdc30c9bf860077befe57c75a",
    "commit_tgt": "88f203b6a12ecf412387b638364159a1719b425f",
    "changed_test": "shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/GeneralContextPluginTest.java#testDoExecute",
    "changed_prod": "shenyu-plugin/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n    }",
    "test_code_tgt": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n        shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.SOFA.getName());\n        assertNull(shenyuGeneralContext);\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        Map<String, List<GeneralContextHandle>> generalContextHandleMap = GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        Map<String, Map<String, String>> generalContextMap = new HashMap<>();\n        HttpHeaders headers = exchange.getRequest().getHeaders();\n        generalContextHandleMap.forEach((k, v) -> {\n            Map<String, String> generalContextMapWithRpcType = new HashMap<>();\n            if (CollectionUtils.isEmpty(v)) {\n                return;\n            }\n            v.forEach(each -> {\n                if (StringUtils.isBlank(each.getGeneralContextType()) || StringUtils.isBlank(each.getGeneralContextKey())) {\n                    return;\n                }\n                switch (each.getGeneralContextType()) {\n                    case Constants.ADD_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(each.getGeneralContextKey(), each.getGeneralContextValue());\n                        break;\n                    case Constants.TRANSMIT_HEADER_TO_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(StringUtils.isBlank(each.getGeneralContextValue()) ? each.getGeneralContextKey() : each.getGeneralContextValue(),\n                                headers.getFirst(each.getGeneralContextKey()));\n                        break;\n                    default:\n                        break;\n                }\n            });\n            generalContextMap.put(k, generalContextMapWithRpcType);\n        });\n        exchange.getAttributes().put(Constants.GENERAL_CONTEXT, generalContextMap);\n        return chain.execute(exchange);\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        Map<String, List<GeneralContextHandle>> generalContextHandleMap = GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        Map<String, Map<String, String>> generalContextMap = new HashMap<>();\n        HttpHeaders headers = exchange.getRequest().getHeaders();\n        generalContextHandleMap.forEach((rpcType, v) -> {\n            if (CollectionUtils.isEmpty(v)) {\n                return;\n            }\n            Map<String, String> generalContextMapWithRpcType = new HashMap<>();\n            v.forEach(each -> {\n                if (StringUtils.isBlank(each.getGeneralContextType()) || StringUtils.isBlank(each.getGeneralContextKey())) {\n                    return;\n                }\n                switch (each.getGeneralContextType()) {\n                    case Constants.ADD_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(each.getGeneralContextKey(), each.getGeneralContextValue());\n                        break;\n                    case Constants.TRANSMIT_HEADER_TO_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(StringUtils.isBlank(each.getGeneralContextValue()) ? each.getGeneralContextKey() : each.getGeneralContextValue(),\n                                headers.getFirst(each.getGeneralContextKey()));\n                        break;\n                    default:\n                        break;\n                }\n            });\n            generalContextMap.put(rpcType, generalContextMapWithRpcType);\n        });\n        exchange.getAttributes().put(Constants.GENERAL_CONTEXT, generalContextMap);\n        return chain.execute(exchange);\n    }",
    "test_id": 18,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-12-15 11:14:09+08:00",
    "commit_src": "82ddd27572dfa2b7dc51f4867bf4e46c2dddb3cb",
    "commit_tgt": "4441f48adccbcf66c853eb42ee343b104f03e332",
    "changed_test": "shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java#executeTest",
    "changed_prod": "shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(shenyuContext.getRealUrl(), \"/order/findById\");\n    }",
    "test_code_tgt": "@Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(\"/order/findById\", shenyuContext.getRealUrl());\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        ContextMappingRuleHandle contextMappingRuleHandle = ContextPathPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(contextMappingRuleHandle)) {\n            LOG.error(\"context path rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        String contextPath = contextMappingRuleHandle.getContextPath();\n        if (StringUtils.isNoneBlank(contextPath)) {\n            if (!shenyuContext.getPath().startsWith(contextPath)) {\n                LOG.error(\"the context path '{}' is invalid.\", contextPath);\n                Object error = ShenyuResultWrap.error(ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),\n                        String.format(\"%s [invalid context path:'%s']\", ShenyuResultEnum.CONTEXT_PATH_ERROR.getMsg(), contextPath), null);\n                return WebFluxResultUtils.result(exchange, error);\n            }\n        }\n        buildContextPath(shenyuContext, contextMappingRuleHandle);\n        return chain.execute(exchange);\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        ContextMappingRuleHandle contextMappingRuleHandle = ContextPathPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(contextMappingRuleHandle)) {\n            LOG.error(\"context path rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        String contextPath = contextMappingRuleHandle.getContextPath();\n        if (StringUtils.isNoneBlank(contextPath) && !shenyuContext.getPath().startsWith(contextPath)) {\n            LOG.error(\"the context path '{}' is invalid.\", contextPath);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),\n                    String.format(\"%s [invalid context path:'%s']\", ShenyuResultEnum.CONTEXT_PATH_ERROR.getMsg(), contextPath), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        buildContextPath(shenyuContext, contextMappingRuleHandle);\n        return chain.execute(exchange);\n    }",
    "test_id": 19,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-12-13 13:23:32+08:00",
    "commit_src": "832f0bae9a4e50eecaee9c1308d2492128f5175a",
    "commit_tgt": "b017c784bc37ad048c0c7df76c7aa3dbba27f8cd",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java#testFetchUpstreamData",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java#fetchUpstreamData",
    "test_code_src": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginId(anyString())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }",
    "test_code_tgt": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginIds(anyList())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }",
    "prod_code_src": "public void fetchUpstreamData() {\n        final List<PluginDO> pluginDOList = pluginMapper.selectByNames(PluginEnum.getUpstreamNames());\n        if (CollectionUtils.isEmpty(pluginDOList)) {\n            return;\n        }\n        pluginDOList.stream().filter(Objects::nonNull).forEach(pluginDO -> {\n            final List<SelectorDO> selectorDOList = selectorMapper.findByPluginId(pluginDO.getId());\n            for (SelectorDO selectorDO : selectorDOList) {\n                if (Objects.isNull(selectorDO) || StringUtils.isBlank(selectorDO.getHandle())) {\n                    continue;\n                }\n                List<CommonUpstream> commonUpstreams = converterFactor.newInstance(pluginDO.getName()).convertUpstream(selectorDO.getHandle());\n                if (CollectionUtils.isNotEmpty(commonUpstreams)) {\n                    UPSTREAM_MAP.put(selectorDO.getId(), commonUpstreams);\n                }\n            }\n        });\n    }",
    "prod_code_tgt": "public void fetchUpstreamData() {\n\n        final List<PluginDO> pluginDOList = pluginMapper.selectByNames(PluginEnum.getUpstreamNames());\n        if (CollectionUtils.isEmpty(pluginDOList)) {\n            return;\n        }\n        Map<String, String> pluginMap = pluginDOList.stream().filter(Objects::nonNull)\n                .collect(Collectors.toMap(PluginDO::getId, PluginDO::getName, (value1, value2) -> value1));\n        final List<SelectorDO> selectorDOList = selectorMapper.findByPluginIds(new ArrayList<>(pluginMap.keySet()));\n        Optional.ofNullable(selectorDOList).orElseGet(ArrayList::new).stream()\n                .filter(selectorDO -> Objects.nonNull(selectorDO) && StringUtils.isNotEmpty(selectorDO.getHandle()))\n                .forEach(selectorDO -> {\n                    String name = pluginMap.get(selectorDO.getPluginId());\n                    List<CommonUpstream> commonUpstreams = converterFactor.newInstance(name).convertUpstream(selectorDO.getHandle());\n                    if (CollectionUtils.isNotEmpty(commonUpstreams)) {\n                        UPSTREAM_MAP.put(selectorDO.getId(), commonUpstreams);\n                    }\n                });\n    }",
    "test_id": 20,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-11-19 14:10:48+08:00",
    "commit_src": "40ce7cb256cbdd5f07705aa04f5114603de45371",
    "commit_tgt": "dc31e2ae16d4f687b3e7ff6148eab418f7c614e9",
    "changed_test": "shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutorTest.java#normalTest",
    "changed_prod": "shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutor.java#run",
    "test_code_src": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }",
    "test_code_tgt": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono<String> mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }",
    "prod_code_src": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n        if (Objects.nonNull(fallback)) {\n            return to.onErrorResume(fallback);\n        }\n        return to;\n    }",
    "prod_code_tgt": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n\n        return Optional.ofNullable(fallback)\n                .map(to::onErrorResume)\n                .orElse(to);\n    }",
    "test_id": 21,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-11-08 15:16:07+08:00",
    "commit_src": "7f472d7cbc2e2b4e8aa561219bd996e6f58c177a",
    "commit_tgt": "45da0168d933899595a215a09aa3c79ab88be3ce",
    "changed_test": "shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePluginTest.java#multiJsonDecryptTest",
    "changed_prod": "shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java#doExecute",
    "test_code_src": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(ResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(CryptorResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        CryptorRuleHandle ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(ruleHandle)) {\n            LOG.error(\"Cryptor response rule configuration is null :{}\", rule.getId());\n            return chain.execute(exchange);\n        }\n        if (JsonUtil.checkParam(ruleHandle)) {\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),\n                    ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + \"[\" + JsonUtil.getErrorCollector() + \"]\", null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        return chain.execute(exchange.mutate()\n                .response(new ResponseDecorator(exchange, ruleHandle)).build());\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        CryptorRuleHandle ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(ruleHandle)) {\n            LOG.error(\"Cryptor response rule configuration is null :{}\", rule.getId());\n            return chain.execute(exchange);\n        }\n        if (JsonUtil.checkParam(ruleHandle)) {\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),\n                    ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + \"[\" + JsonUtil.getErrorCollector() + \"]\", null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        return chain.execute(exchange.mutate()\n                .response(new CryptorResponseDecorator(exchange, ruleHandle)).build());\n    }",
    "test_id": 23,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-10-13 19:39:07+08:00",
    "commit_src": "61cacddea126cab760361458e9a40bc3afa8efe5",
    "commit_tgt": "ef4357d560db4138830a9022ff4cb596399f2b36",
    "changed_test": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java#testAlibabaDubboPlugin",
    "changed_prod": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
    "test_id": 25,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-10-13 19:39:07+08:00",
    "commit_src": "61cacddea126cab760361458e9a40bc3afa8efe5",
    "commit_tgt": "ef4357d560db4138830a9022ff4cb596399f2b36",
    "changed_test": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java#testAlibabaDubboPluginMetaDataNull",
    "changed_prod": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }",
    "test_code_tgt": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
    "test_id": 26,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-09-23 18:48:17+08:00",
    "commit_src": "a5a6a0901cbe7305bd602353fe222c3c5a45fd7b",
    "commit_tgt": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
    "changed_test": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandleTest.java#testCreateDefault",
    "changed_prod": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandle.java#createDefault",
    "test_code_src": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }",
    "test_code_tgt": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }",
    "prod_code_src": "@Override\n    public RuleHandle createDefault(final String path) {\n        this.contextPath = path;\n        return this;\n    }",
    "prod_code_tgt": "@Override\n    public RuleHandle createDefault(final String path, final String rpcExt) {\n        this.contextPath = path;\n        return this;\n    }",
    "test_id": 28,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-09-23 18:48:17+08:00",
    "commit_src": "a5a6a0901cbe7305bd602353fe222c3c5a45fd7b",
    "commit_tgt": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
    "changed_test": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandleTest.java#testCreateDefault",
    "changed_prod": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandle.java#createDefault",
    "test_code_src": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }",
    "test_code_tgt": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }",
    "prod_code_src": "@Override\n    public RuleHandle createDefault(final String path) {\n        this.statusCode = HttpStatus.OK.value();\n        return this;\n    }",
    "prod_code_tgt": "@Override\n    public RuleHandle createDefault(final String path, final String rpcExt) {\n        this.statusCode = HttpStatus.OK.value();\n        return this;\n    }",
    "test_id": 29,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-09-23 18:48:17+08:00",
    "commit_src": "a5a6a0901cbe7305bd602353fe222c3c5a45fd7b",
    "commit_tgt": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
    "changed_test": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java#doExecute",
    "changed_prod": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPlugin.java#doExecute",
    "test_code_src": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            LOG.error(\" path is : {}, meta data have error : {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            LOG.error(\" path is : {}, meta data have error : {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "test_id": 30,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-09-06 11:10:53+08:00",
    "commit_src": "792dd3e5f69bbaface9ec55c4c92998d118a0fac",
    "commit_tgt": "1fb1d289807c6c3fc79d8c306d791fc711aba465",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java#testDataBaseProperties",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataBaseConfiguration.java#dataBaseProperties",
    "test_code_src": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, \"\");\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }",
    "test_code_tgt": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true);\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }",
    "prod_code_src": "@Bean\n    @ConditionalOnMissingBean(value = DataBaseProperties.class)\n    public DataBaseProperties dataBaseProperties(@Value(\"${shenyu.database.dialect:h2}\") final String dialect,\n                                                   @Value(\"${shenyu.database.init_script:sql-script/h2/schema.sql}\") final String initScript,\n                                                   @Value(\"${shenyu.database.init_enable:true}\") final Boolean initEnable,\n                                                   @Value(\"${shenyu.database.db_script}\") final String dbScript) {\n        DataBaseProperties dataSourceProperties = new DataBaseProperties();\n        dataSourceProperties.setDialect(dialect);\n        dataSourceProperties.setInitScript(initScript);\n        dataSourceProperties.setInitEnable(initEnable);\n        dataSourceProperties.setDbScript(dbScript);\n        return dataSourceProperties;\n    }",
    "prod_code_tgt": "@Bean\n    @ConditionalOnMissingBean(value = DataBaseProperties.class)\n    public DataBaseProperties dataBaseProperties(@Value(\"${shenyu.database.dialect:h2}\") final String dialect,\n                                                   @Value(\"${shenyu.database.init_script:sql-script/h2/schema.sql}\") final String initScript,\n                                                   @Value(\"${shenyu.database.init_enable:true}\") final Boolean initEnable) {\n        DataBaseProperties dataSourceProperties = new DataBaseProperties();\n        dataSourceProperties.setDialect(dialect);\n        dataSourceProperties.setInitScript(initScript);\n        dataSourceProperties.setInitEnable(initEnable);\n        return dataSourceProperties;\n    }",
    "test_id": 31,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-08-10 16:46:35+08:00",
    "commit_src": "a3afd786dff1e5f7511003f6e5a180af47b407b8",
    "commit_tgt": "f86a01fe18619702624f83813342e0fad05aa5df",
    "changed_test": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/RegisterUtilsTest.java#testDoRegisterWhenError",
    "changed_prod": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/RegisterUtils.java#doRegister",
    "test_code_src": "@SneakyThrows\n    @Test\n    public void testDoRegisterWhenError() {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }",
    "test_code_tgt": "@Test\n    public void testDoRegisterWhenError() throws IOException {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }",
    "prod_code_src": "public static void doRegister(final String json, final String url, final String rpcType) throws IOException {\n        String result = OkHttpTools.getInstance().post(url, json);\n        if (\"success\".equals(result)) {\n            log.info(\"{} client register success: {} \", rpcType, json);\n        } else {\n            log.error(\"{} client register error: {} \", rpcType, json);\n        }\n    }",
    "prod_code_tgt": "public static void doRegister(final String json, final String url, final String rpcType) throws IOException {\n        String result = OkHttpTools.getInstance().post(url, json);\n        if (\"success\".equals(result)) {\n            LOGGER.info(\"{} client register success: {} \", rpcType, json);\n        } else {\n            LOGGER.error(\"{} client register error: {} \", rpcType, json);\n        }\n    }",
    "test_id": 33,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-07-11 15:11:47+08:00",
    "commit_src": "4cae85c2e814908dfbfa1d8d2a0db85822bef3d8",
    "commit_tgt": "733bfae7dd36859bda98d6aee6f223b2a0aace03",
    "changed_test": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/AesUtilsTest.java#testAesDecryption",
    "changed_prod": "shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/AesUtils.java#aesDecryption",
    "test_code_src": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"jHcpKkiDbbQh7W7hh8yQSA==\", AES_KEY), is(\"123456\"));\n    }",
    "test_code_tgt": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"bbiB8zbUo3z3oA0VqEB/IA==\", AES_KEY, IV), is(\"123456\"));\n    }",
    "prod_code_src": "public static String aesDecryption(final String src, final String aesKey) {\n        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {\n            return CipherUtils.decryptStr(src, aesKey);\n        }\n        return null;\n    }",
    "prod_code_tgt": "public static String aesDecryption(final String src, final String aesKey, final String iv) {\n        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {\n            return CipherUtils.decryptStr(src, aesKey, iv);\n        }\n        return null;\n    }",
    "test_id": 35,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-06-16 17:33:00+08:00",
    "commit_src": "d537afcbf633cfd193a34fe8d4a1311b00edccfd",
    "commit_tgt": "78d85a6b283e233495664d41512084c35d295909",
    "changed_test": "shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java#testDoExecute",
    "changed_prod": "shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java#doExecute",
    "test_code_src": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.setResult(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.getResults().add(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());\n        if (Objects.isNull(client)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        GrpcExtInfo extInfo = GsonUtils.getGson().fromJson(metaData.getRpcExt(), GrpcExtInfo.class);\n        CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(extInfo.timeout, TimeUnit.MILLISECONDS);\n        CompletableFuture<ShenyuGrpcResponse> result = client.call(metaData, callOptions, param);\n        return Mono.fromFuture(result.thenApply(ret -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, ret.getResult());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(ShenyuException::new).then(chain.execute(exchange));\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());\n        if (Objects.isNull(client)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        GrpcExtInfo extInfo = GsonUtils.getGson().fromJson(metaData.getRpcExt(), GrpcExtInfo.class);\n        CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(extInfo.timeout, TimeUnit.MILLISECONDS);\n        CompletableFuture<ShenyuGrpcResponse> result = client.call(metaData, callOptions, param, extInfo.methodType);\n        return Mono.fromFuture(result.thenApply(ret -> {\n            exchange.getAttributes().put(Constants.GRPC_RPC_RESULT, ret.getResults());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(ShenyuException::new).then(chain.execute(exchange));\n    }",
    "test_id": 36,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-06-02 12:55:38+08:00",
    "commit_src": "60ddbe4c00efe18a1ec965069e7b3fdde5a05bcf",
    "commit_tgt": "ecb8b8554ef1e4a23d52abd66053c4cbc72afa0c",
    "changed_test": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegisterTest.java#assertCounter",
    "changed_prod": "shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegister.java#counterIncrement",
    "test_code_src": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }",
    "test_code_tgt": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 1);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }",
    "prod_code_src": "@Override\n    public void counterIncrement(final String name, final String[] labelValues) {\n        Counter counter = COUNTER_MAP.get(name);\n        if (null != labelValues) {\n            counter.labels(labelValues).inc();\n        } else {\n            counter.inc();\n        }\n    }",
    "prod_code_tgt": "@Override\n    public void counterIncrement(final String name, final String[] labelValues, final long count) {\n        Counter counter = COUNTER_MAP.get(name);\n        if (null != labelValues) {\n            counter.labels(labelValues).inc(count);\n        } else {\n            counter.inc(count);\n        }\n    }",
    "test_id": 37,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-06-02 12:55:38+08:00",
    "commit_src": "60ddbe4c00efe18a1ec965069e7b3fdde5a05bcf",
    "commit_tgt": "ecb8b8554ef1e4a23d52abd66053c4cbc72afa0c",
    "changed_test": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootServiceTest.java#testRegistered",
    "changed_prod": "shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootService.java#start",
    "test_code_src": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig);\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }",
    "test_code_tgt": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig, new PrometheusMetricsRegister());\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }",
    "prod_code_src": "@Override\n    public void start(final MetricsConfig metricsConfig) {\n        startServer(metricsConfig);\n        MetricsReporter.register(PrometheusMetricsRegister.getInstance());\n    }",
    "prod_code_tgt": "@Override\n    public void start(final MetricsConfig metricsConfig, final MetricsRegister metricsRegister) {\n        startServer(metricsConfig);\n        MetricsReporter.register(metricsRegister);\n    }",
    "test_id": 38,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-05-21 23:03:34+08:00",
    "commit_src": "55ecf11aa0ac3c7551c26431b176f753af103bdc",
    "commit_tgt": "eb9af33fc86ea6f731ab554c60ee53e211252b2a",
    "changed_test": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java#genericInvokerTest",
    "changed_prod": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java#genericInvoker",
    "test_code_src": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        final ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        try (MockedStatic<DubboProviderVersionCache> dubboProviderVersionCacheMockedStatic = mockStatic(DubboProviderVersionCache.class)) {\n            DubboProviderVersionCache dubboProviderVersionCache = mock(DubboProviderVersionCache.class);\n            dubboProviderVersionCacheMockedStatic.when(() -> DubboProviderVersionCache.getInstance()).thenReturn(dubboProviderVersionCache);\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.3\");\n\n            GenericService genericService = mock(GenericService.class);\n            when(referenceConfig.get()).thenReturn(genericService);\n            when(referenceConfig.getInterface()).thenReturn(PATH);\n            CompletableFuture<Object> future = new CompletableFuture<>();\n            when(genericService.$invokeAsync(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n            when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(new Object());\n            ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n            Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n            field.setAccessible(true);\n            ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n            ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            future.complete(\"success\");\n            verify(genericService, times(1)).$invokeAsync(METHOD_NAME, LEFT, RIGHT);\n\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.2\");\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            verify(genericService, times(1)).$invoke(METHOD_NAME, LEFT, RIGHT);\n        }\n    }",
    "test_code_tgt": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(referenceConfig.get()).thenReturn(genericService);\n        when(referenceConfig.getInterface()).thenReturn(PATH);\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n        ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n        apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n        future.complete(\"success\");\n    }",
    "prod_code_src": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {\n        // issue(https://github.com/dromara/shenyu/issues/471), add dubbo tag route\n        String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);\n        if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) {\n            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);\n        }\n        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());\n            DubboProviderVersionCache.getInstance().invalidate(metaData.getPath());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.get();\n        Pair<String[], Object[]> pair;\n        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future;\n        if (isProviderSupportAsync(metaData.getPath())) {\n            future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        } else {\n            Object data = genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n            if (data instanceof CompletableFuture) {\n                future = (CompletableFuture<Object>) data;\n            } else {\n                future = CompletableFuture.completedFuture(data);\n            }\n        }\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));\n    }",
    "prod_code_tgt": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {\n        // issue(https://github.com/dromara/shenyu/issues/471), add dubbo tag route\n        String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);\n        if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) {\n            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);\n        }\n        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.get();\n        Pair<String[], Object[]> pair;\n        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        //Compatible with asynchronous calls of lower Dubbo versions\n        RpcContext.getContext().setAttachment(ASYNC_KEY, Boolean.TRUE.toString());\n        Object data = genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        if (Objects.isNull(data)) {\n            data = RpcContext.getContext().getFuture();\n        }\n        CompletableFuture<Object> future;\n        if (data instanceof CompletableFuture) {\n            future = (CompletableFuture<Object>) data;\n        } else {\n            future = CompletableFuture.completedFuture(data);\n        }\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));\n    }",
    "test_id": 39,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-05-14 21:36:12+08:00",
    "commit_src": "e8e70d041dda05e36eb57e99edf6b7b8e89a2daf",
    "commit_tgt": "f382faf69789befff1687821f22a505c2d88b5bb",
    "changed_test": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java#removeRule",
    "changed_prod": "shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandle.java#handlerRule",
    "test_code_src": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }",
    "test_code_tgt": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }",
    "prod_code_src": "@Override\n    public void handlerRule(final RuleData ruleData) {\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        String key = CacheKeyUtils.INST.getKey(ruleData);\n        List<FlowRule> flowRules = FlowRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) {\n            FlowRule rule = new FlowRule(key);\n            rule.setCount(sentinelHandle.getFlowRuleCount());\n            rule.setGrade(sentinelHandle.getFlowRuleGrade());\n            rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior());\n            flowRules.add(rule);\n        }\n        FlowRuleManager.loadRules(flowRules);\n\n        List<DegradeRule> degradeRules = DegradeRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) {\n            DegradeRule rule = new DegradeRule(key);\n            rule.setCount(sentinelHandle.getDegradeRuleCount());\n            rule.setGrade(sentinelHandle.getDegradeRuleGrade());\n            rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow());\n            degradeRules.add(rule);\n        }\n        DegradeRuleManager.loadRules(degradeRules);\n    }",
    "prod_code_tgt": "@Override\n    public void handlerRule(final RuleData ruleData) {\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        String key = CacheKeyUtils.INST.getKey(ruleData);\n        List<FlowRule> flowRules = FlowRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) {\n            FlowRule rule = new FlowRule(key);\n            rule.setCount(sentinelHandle.getFlowRuleCount());\n            rule.setGrade(sentinelHandle.getFlowRuleGrade());\n            rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior());\n            flowRules.add(rule);\n        }\n        FlowRuleManager.loadRules(flowRules);\n\n        List<DegradeRule> degradeRules = DegradeRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) {\n            DegradeRule rule = new DegradeRule(key);\n            rule.setCount(sentinelHandle.getDegradeRuleCount());\n            rule.setGrade(sentinelHandle.getDegradeRuleGrade());\n            rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow());\n            rule.setStatIntervalMs(sentinelHandle.getDegradeRuleStatIntervals() * 1000);\n            rule.setMinRequestAmount(sentinelHandle.getDegradeRuleMinRequestAmount());\n            rule.setSlowRatioThreshold(sentinelHandle.getDegradeRuleSlowRatioThreshold());\n            degradeRules.add(rule);\n        }\n        DegradeRuleManager.loadRules(degradeRules);\n    }",
    "test_id": 40,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-04-18 17:54:10+08:00",
    "commit_src": "a0c3e0cca868180825ea29594eb746a49ddc7e53",
    "commit_tgt": "149360d94666d10fba8ea2ea93e4284e3ba50652",
    "changed_test": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java#executeTest",
    "changed_prod": "soul-plugin/soul-plugin-context-path/src/main/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }",
    "test_code_tgt": "@Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final String handle = rule.getHandle();\n        final ContextMappingHandle contextMappingHandle = GsonUtils.getInstance().fromJson(handle, ContextMappingHandle.class);\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final ContextMappingHandle contextMappingHandle = ApplicationConfigCache.getInstance().obtainHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(rule));\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
    "test_id": 41,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-04-18 17:54:10+08:00",
    "commit_src": "a0c3e0cca868180825ea29594eb746a49ddc7e53",
    "commit_tgt": "149360d94666d10fba8ea2ea93e4284e3ba50652",
    "changed_test": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java#executeRealPathTest",
    "changed_prod": "soul-plugin/soul-plugin-context-path/src/main/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPlugin.java#doExecute",
    "test_code_src": "@Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }",
    "test_code_tgt": "@Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final String handle = rule.getHandle();\n        final ContextMappingHandle contextMappingHandle = GsonUtils.getInstance().fromJson(handle, ContextMappingHandle.class);\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final ContextMappingHandle contextMappingHandle = ApplicationConfigCache.getInstance().obtainHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(rule));\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
    "test_id": 42,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-03-23 21:01:56+08:00",
    "commit_src": "5ab507eac456027492a1ac81b155d1da4b7326cf",
    "commit_tgt": "12527b4f2b2a7852a8014aaa7e9d2999df1e7eeb",
    "changed_test": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java#doExecute",
    "changed_prod": "soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java#doExecute",
    "test_code_src": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String body = exchange.getAttribute(Constants.DUBBO_PARAMS);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "test_id": 43,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-03-23 21:01:56+08:00",
    "commit_src": "5ab507eac456027492a1ac81b155d1da4b7326cf",
    "commit_tgt": "12527b4f2b2a7852a8014aaa7e9d2999df1e7eeb",
    "changed_test": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java#testMethodIsNullExecute",
    "changed_prod": "soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java#doExecute",
    "test_code_src": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "test_code_tgt": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
    "prod_code_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String body = exchange.getAttribute(Constants.DUBBO_PARAMS);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "prod_code_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
    "test_id": 44,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-01-25 16:36:35+08:00",
    "commit_src": "8f001e0fee4ebf0291d64327e589df8b8dfac960",
    "commit_tgt": "751c2ce732057b11bfe32458b11af77737e51065",
    "changed_test": "soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java#testOnRuleChanged",
    "changed_prod": "soul-admin/src/main/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListener.java#onRuleChanged",
    "test_code_src": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));\n    }",
    "test_code_tgt": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));\n    }",
    "prod_code_src": "@Override\r\n    public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) {\r\n        updateRuleMap(getConfig(RULE_DATA_ID));\r\n        switch (eventType) {\r\n            case DELETE:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            case REFRESH:\r\n            case MYSELF:\r\n                Set<String> set = new HashSet<>(RULE_MAP.keySet());\r\n                changed.forEach(rule -> {\r\n                    set.remove(rule.getSelectorId());\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                RULE_MAP.keySet().removeAll(set);\r\n                break;\r\n            default:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getSelectorId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n        }\r\n        publishConfig(RULE_DATA_ID, RULE_MAP);\r\n    }",
    "prod_code_tgt": "@Override\r\n    public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) {\r\n        updateRuleMap(getConfig(NacosPathConstants.RULE_DATA_ID));\r\n        switch (eventType) {\r\n            case DELETE:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            case REFRESH:\r\n            case MYSELF:\r\n                RULE_MAP.keySet().removeAll(RULE_MAP.keySet());\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            default:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getSelectorId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n        }\r\n        publishConfig(NacosPathConstants.RULE_DATA_ID, RULE_MAP);\r\n    }",
    "test_id": 45,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-01-23 21:46:18+08:00",
    "commit_src": "d6caa0a5cab18b7ceab109495a4a2c56e11cd277",
    "commit_tgt": "bae0e5a68c6fdd363129b695511cc651afe5b1ff",
    "changed_test": "soul-plugin/soul-plugin-sofa/src/test/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyServiceTest.java#test",
    "changed_prod": "soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyService.java#genericInvoker",
    "test_code_src": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }",
    "test_code_tgt": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$genericInvoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }",
    "prod_code_src": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.refer();\n        Pair<String[], Object[]> pair;\n        if (null == body || \"\".equals(body) || \"{}\".equals(body) || \"null\".equals(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback<Object>() {\n            @Override\n            public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n                future.complete(o);\n            }\n\n            @Override\n            public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(throwable);\n            }\n\n            @Override\n            public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(e);\n            }\n        });\n        genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.SOFA_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(SoulException::new);\n    }",
    "prod_code_tgt": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.refer();\n        Pair<String[], Object[]> pair;\n        if (null == body || \"\".equals(body) || \"{}\".equals(body) || \"null\".equals(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback<Object>() {\n            @Override\n            public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n                future.complete(o);\n            }\n\n            @Override\n            public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(throwable);\n            }\n\n            @Override\n            public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(e);\n            }\n        });\n        genericService.$genericInvoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.SOFA_RPC_RESULT_EMPTY;\n            }\n\n            GenericObject genericObject = (GenericObject) ret;\n            exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, genericObject.getFields());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(SoulException::new);\n    }",
    "test_id": 46,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  },
  {
    "repo_name": "apache/shenyu",
    "commit_date": "2021-01-22 01:07:31+08:00",
    "commit_src": "3225333c1e4bcc0985be3a8c7b9f2f6c5d9bd046",
    "commit_tgt": "a5a6831f04e7bfc6d0f799103e3be4caf5f2683d",
    "changed_test": "soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java#testEmptyResult",
    "changed_prod": "soul-admin/src/main/java/org/dromara/soul/admin/page/PageResultUtils.java#result",
    "test_code_src": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }",
    "test_code_tgt": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }",
    "prod_code_src": "public static <T> CommonPager<T> result(final PageParameter pageParameter, final Integer count, final Supplier<List<T>> supplier) {\n        if (count != null && count > 0) {\n            return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), count), supplier.get());\n        }\n        return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), 0), Collections.emptyList());\n\n    }",
    "prod_code_tgt": "public static <T> CommonPager<T> result(final PageParameter pageParameter, final Supplier<Integer> countSupplier,\n                                            final Supplier<List<T>> listSupplier) {\n        Integer count = countSupplier.get();\n        if (count != null && count > 0) {\n            return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), count),\n                    listSupplier.get());\n        }\n        return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), 0),\n                Collections.emptyList());\n\n    }",
    "test_id": 47,
    "src_java_version": "1.8",
    "src_maven_version": "3.6.3",
    "tgt_java_version": "1.8",
    "tgt_maven_version": "3.6.3"
  }
]