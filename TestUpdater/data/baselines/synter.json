[
    {
        "id": 0,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "32e27eecaa264b3f5463d994870d850631d418f5",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/UiConfigController.java",
            "method_src": "public ResponseEntity<List<ActivityLogModel>> showActivityLog(\n      @RequestParam(value = \"env\", defaultValue = \"\") String env,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage) {\n    return new ResponseEntity<>(\n        uiConfigControllerService.showActivityLog(env, pageNo, currentPage), HttpStatus.OK);\n  }",
            "method_tgt": "public ResponseEntity<List<ActivityLogModel>> showActivityLog(\n      @RequestParam(value = \"env\", defaultValue = \"\") String env,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"ordering\", defaultValue = \"DESC\") OrderBy orderBy,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage) {\n    return new ResponseEntity<>(\n        uiConfigControllerService.showActivityLog(env, pageNo, orderBy, currentPage),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/UiConfigControllerTest.java",
            "method_src": "@Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  @Order(20)\n  public void showActivityLog() throws Exception {\n    List<ActivityLogModel> activityLogs = utilMethods.getLogModels();\n    when(uiConfigControllerService.showActivityLog(anyString(), anyString(), any(), anyString()))\n        .thenReturn(activityLogs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getActivityLogPerEnv\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 1,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "32e27eecaa264b3f5463d994870d850631d418f5",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbc.java",
            "method_src": "public List<ActivityLog> selectActivityLog(\n      String username, String env, boolean allReqs, int tenantId) {\n    log.debug(\"selectActivityLog {}\", username);\n    List<ActivityLog> activityList;\n\n    if (allReqs) {\n      if (env == null || env.isBlank()) {\n        activityList = Lists.newArrayList(activityLogRepo.findAllByTenantId(tenantId));\n      } else {\n        activityList = activityLogRepo.findAllByEnvAndTenantId(env, tenantId);\n      }\n    } else {\n      final UserInfo userInfo = selectUserInfo(username);\n      if (env == null || env.isBlank()) {\n        activityList = activityLogRepo.findAllByTeamIdAndTenantId(userInfo.getTeamId(), tenantId);\n      } else {\n        activityList =\n            activityLogRepo.findAllByEnvAndTeamIdAndTenantId(env, userInfo.getTeamId(), tenantId);\n      }\n    }\n\n    for (ActivityLog row : activityList) {\n      row.setActivityTimeString(\n          DATE_TIME_DDMMMYYYY_HHMMSS_FORMATTER.format(row.getActivityTime().toLocalDateTime()));\n    }\n\n    return activityList;\n  }",
            "method_tgt": "public List<ActivityLog> selectActivityLog(\n      String username, String env, OrderBy orderBy, boolean allReqs, int tenantId) {\n    log.debug(\"selectActivityLog {}\", username);\n    List<ActivityLog> activityList;\n\n    if (allReqs) {\n      if (env == null || env.isBlank()) {\n        activityList = Lists.newArrayList(activityLogRepo.findAllByTenantId(tenantId));\n      } else {\n        activityList = activityLogRepo.findAllByEnvAndTenantId(env, tenantId);\n      }\n    } else {\n      final UserInfo userInfo = selectUserInfo(username);\n      if (env == null || env.isBlank()) {\n        if (orderBy.equals(OrderBy.DESC)) {\n          activityList =\n              activityLogRepo.findAllByTeamIdAndTenantIdOrderByActivityTimeDesc(\n                  userInfo.getTeamId(), tenantId);\n        } else {\n          activityList =\n              activityLogRepo.findAllByTeamIdAndTenantIdOrderByActivityTimeAsc(\n                  userInfo.getTeamId(), tenantId);\n        }\n      } else {\n        if (orderBy.equals(OrderBy.DESC)) {\n          activityList =\n              activityLogRepo.findAllByEnvAndTeamIdAndTenantIdOrderByActivityTimeDesc(\n                  env, userInfo.getTeamId(), tenantId);\n        } else {\n          activityList =\n              activityLogRepo.findAllByEnvAndTeamIdAndTenantIdOrderByActivityTimeAsc(\n                  env, userInfo.getTeamId(), tenantId);\n        }\n      }\n    }\n\n    for (ActivityLog row : activityList) {\n      row.setActivityTimeString(\n          DATE_TIME_DDMMMYYYY_HHMMSS_FORMATTER.format(row.getActivityTime().toLocalDateTime()));\n    }\n\n    return activityList;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/SelectDataJdbcTest.java",
            "method_src": "@Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs = selectData.selectActivityLog(username, env, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }",
            "method_tgt": "@Test\n  public void selectActivityLog2() {\n    String username = \"uuser1\", env = \"DEV\";\n    UserInfo userInfo = new UserInfo();\n    userInfo.setTeamId(1);\n    userInfo.setUsername(username);\n    userInfo.setRole(\"SUPERUSER\");\n    when(userInfoRepo.findByUsernameIgnoreCase(username))\n        .thenReturn(java.util.Optional.of(userInfo));\n    when(activityLogRepo.findAllByEnvAndTenantId(env, 1)).thenReturn(utilMethods.getLogs());\n\n    List<ActivityLog> activityLogs =\n        selectData.selectActivityLog(username, env, OrderBy.DESC, true, 1);\n\n    assertThat(activityLogs).hasSize(1);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 2,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "79d3ef16dfa75fc7ce56c6b75c8feb507f32257f",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AnalyticsControllerService.java",
            "method_src": "public File generateReport() {\n    int tenantId = commonUtilsService.getTenantId(getCurrentUserName());\n    String kwReportsLocation =\n        manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);\n\n    List<TeamOverview> totalOverviewList = getTeamsOverview(null);\n    final Map<String, List<String>> topicNames = getTopicNames(tenantId);\n    final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId);\n    File zipFile =\n        new File(\n            kwReportsLocation + \"KwReport\" + DATE_TIME_FORMATTER.format(Instant.now()) + \".zip\");\n    ZipOutputStream zipOutputStream = null;\n    try {\n      zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile));\n    } catch (FileNotFoundException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    String actualFileName;\n    List<File> reportFilesOfTenants = new ArrayList<>();\n    for (TeamOverview totalOverview : totalOverviewList) {\n      if (totalOverview.getTenantName() != null) {\n        actualFileName = \"Klaw-\" + totalOverview.getTenantName() + \".xlsx\";\n      } else {\n        actualFileName = \"KlawReport\" + \".xlsx\";\n      }\n\n      String fileName = kwReportsLocation + actualFileName;\n      File reportFile = new File(fileName);\n      reportFilesOfTenants.add(reportFile);\n\n      XSSFWorkbook workbook = new XSSFWorkbook();\n\n      generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);\n\n      addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, \"Topics\");\n      addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, \"ConsumerGroups\");\n\n      log.info(\"Report generated\");\n      if (zipOutputStream != null) {\n        writeToZipFile(zipOutputStream, fileName, actualFileName);\n      }\n    }\n\n    try {\n      if (zipOutputStream != null) {\n        zipOutputStream.close();\n        // delete xlsx report file after writing to zip file.\n        for (File reportFilesOfTenant : reportFilesOfTenants) {\n          reportFilesOfTenant.delete();\n        }\n      }\n    } catch (IOException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    return zipFile;\n  }",
            "method_tgt": "public File generateReport(int numberOfDays) {\n    int tenantId = commonUtilsService.getTenantId(getCurrentUserName());\n    String kwReportsLocation =\n        manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);\n\n    List<TeamOverview> totalOverviewList = getTeamsOverview(null, numberOfDays);\n    final Map<String, List<String>> topicNames = getTopicNames(tenantId);\n    final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId);\n    File zipFile =\n        new File(\n            kwReportsLocation + \"KwReport\" + DATE_TIME_FORMATTER.format(Instant.now()) + \".zip\");\n    ZipOutputStream zipOutputStream = null;\n    try {\n      zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile));\n    } catch (FileNotFoundException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    String actualFileName;\n    List<File> reportFilesOfTenants = new ArrayList<>();\n    for (TeamOverview totalOverview : totalOverviewList) {\n      if (totalOverview.getTenantName() != null) {\n        actualFileName = \"Klaw-\" + totalOverview.getTenantName() + \".xlsx\";\n      } else {\n        actualFileName = \"KlawReport\" + \".xlsx\";\n      }\n\n      String fileName = kwReportsLocation + actualFileName;\n      File reportFile = new File(fileName);\n      reportFilesOfTenants.add(reportFile);\n\n      XSSFWorkbook workbook = new XSSFWorkbook();\n\n      generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);\n\n      addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, \"Topics\");\n      addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, \"ConsumerGroups\");\n\n      log.info(\"Report generated\");\n      if (zipOutputStream != null) {\n        writeToZipFile(zipOutputStream, fileName, actualFileName);\n      }\n    }\n\n    try {\n      if (zipOutputStream != null) {\n        zipOutputStream.close();\n        // delete xlsx report file after writing to zip file.\n        for (File reportFilesOfTenant : reportFilesOfTenants) {\n          reportFilesOfTenant.delete();\n        }\n      }\n    } catch (IOException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    return zipFile;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AnalyticsControllerServiceTest.java",
            "method_src": "@Test\n  public void generateReport_AuthorizedUser() {\n    TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();\n\n    List<TeamOverview> listTeamsOverview = List.of(teamOverview);\n    Topic topic = UtilMethods.getDummyTopic();\n    Acl acl = UtilMethods.getDummyAcl();\n\n    loginMock();\n    Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME);\n    Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TENANT_ID);\n    Mockito.when(\n            manageDatabase.getKwPropertyValue(\n                KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID))\n        .thenReturn(TestConstants.KW_REPORTS_LOCATION);\n    Mockito.doReturn(listTeamsOverview).when(analyticsControllerService).getTeamsOverview(null);\n    Mockito.when(commonUtilsService.getEnvsFromUserId(any()))\n        .thenReturn(Set.of(TestConstants.ENV_ID));\n    Mockito.doReturn(TestConstants.ENV_NAME)\n        .when(analyticsControllerService)\n        .getEnvName(TestConstants.ENV_ID);\n    Mockito.when(\n            commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS)))\n        .thenReturn(false);\n    Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc);\n    Mockito.when(handleDbRequestsJdbc.getAllTopics(TestConstants.TENANT_ID))\n        .thenReturn(List.of(topic));\n    Mockito.when(handleDbRequestsJdbc.getAllConsumerGroups(TestConstants.TENANT_ID))\n        .thenReturn(List.of(acl));\n\n    File actual = analyticsControllerService.generateReport();\n    Assertions.assertNotNull(actual);\n    actual.deleteOnExit();\n  }",
            "method_tgt": "@Test\n  public void generateReport_AuthorizedUser() {\n    TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();\n\n    List<TeamOverview> listTeamsOverview = List.of(teamOverview);\n    Topic topic = UtilMethods.getDummyTopic();\n    Acl acl = UtilMethods.getDummyAcl();\n\n    loginMock();\n    Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME);\n    Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TENANT_ID);\n    Mockito.when(\n            manageDatabase.getKwPropertyValue(\n                KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID))\n        .thenReturn(TestConstants.KW_REPORTS_LOCATION);\n    Mockito.doReturn(listTeamsOverview)\n        .when(analyticsControllerService)\n        .getTeamsOverview(null, NUMBER_OF_DAYS);\n    Mockito.when(commonUtilsService.getEnvsFromUserId(any()))\n        .thenReturn(Set.of(TestConstants.ENV_ID));\n    Mockito.doReturn(TestConstants.ENV_NAME)\n        .when(analyticsControllerService)\n        .getEnvName(TestConstants.ENV_ID);\n    Mockito.when(\n            commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS)))\n        .thenReturn(false);\n    Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc);\n    Mockito.when(handleDbRequestsJdbc.getAllTopics(TestConstants.TENANT_ID))\n        .thenReturn(List.of(topic));\n    Mockito.when(handleDbRequestsJdbc.getAllConsumerGroups(TestConstants.TENANT_ID))\n        .thenReturn(List.of(acl));\n\n    File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS);\n    Assertions.assertNotNull(actual);\n    actual.deleteOnExit();\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 3,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "79d3ef16dfa75fc7ce56c6b75c8feb507f32257f",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AnalyticsControllerService.java",
            "method_src": "public File generateReport() {\n    int tenantId = commonUtilsService.getTenantId(getCurrentUserName());\n    String kwReportsLocation =\n        manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);\n\n    List<TeamOverview> totalOverviewList = getTeamsOverview(null);\n    final Map<String, List<String>> topicNames = getTopicNames(tenantId);\n    final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId);\n    File zipFile =\n        new File(\n            kwReportsLocation + \"KwReport\" + DATE_TIME_FORMATTER.format(Instant.now()) + \".zip\");\n    ZipOutputStream zipOutputStream = null;\n    try {\n      zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile));\n    } catch (FileNotFoundException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    String actualFileName;\n    List<File> reportFilesOfTenants = new ArrayList<>();\n    for (TeamOverview totalOverview : totalOverviewList) {\n      if (totalOverview.getTenantName() != null) {\n        actualFileName = \"Klaw-\" + totalOverview.getTenantName() + \".xlsx\";\n      } else {\n        actualFileName = \"KlawReport\" + \".xlsx\";\n      }\n\n      String fileName = kwReportsLocation + actualFileName;\n      File reportFile = new File(fileName);\n      reportFilesOfTenants.add(reportFile);\n\n      XSSFWorkbook workbook = new XSSFWorkbook();\n\n      generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);\n\n      addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, \"Topics\");\n      addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, \"ConsumerGroups\");\n\n      log.info(\"Report generated\");\n      if (zipOutputStream != null) {\n        writeToZipFile(zipOutputStream, fileName, actualFileName);\n      }\n    }\n\n    try {\n      if (zipOutputStream != null) {\n        zipOutputStream.close();\n        // delete xlsx report file after writing to zip file.\n        for (File reportFilesOfTenant : reportFilesOfTenants) {\n          reportFilesOfTenant.delete();\n        }\n      }\n    } catch (IOException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    return zipFile;\n  }",
            "method_tgt": "public File generateReport(int numberOfDays) {\n    int tenantId = commonUtilsService.getTenantId(getCurrentUserName());\n    String kwReportsLocation =\n        manageDatabase.getKwPropertyValue(KwConstants.KW_REPORTS_TMP_LOCATION_KEY, tenantId);\n\n    List<TeamOverview> totalOverviewList = getTeamsOverview(null, numberOfDays);\n    final Map<String, List<String>> topicNames = getTopicNames(tenantId);\n    final Map<String, List<String>> consumerGroups = getConsumerGroups(tenantId);\n    File zipFile =\n        new File(\n            kwReportsLocation + \"KwReport\" + DATE_TIME_FORMATTER.format(Instant.now()) + \".zip\");\n    ZipOutputStream zipOutputStream = null;\n    try {\n      zipOutputStream = new ZipOutputStream(new FileOutputStream(zipFile));\n    } catch (FileNotFoundException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    String actualFileName;\n    List<File> reportFilesOfTenants = new ArrayList<>();\n    for (TeamOverview totalOverview : totalOverviewList) {\n      if (totalOverview.getTenantName() != null) {\n        actualFileName = \"Klaw-\" + totalOverview.getTenantName() + \".xlsx\";\n      } else {\n        actualFileName = \"KlawReport\" + \".xlsx\";\n      }\n\n      String fileName = kwReportsLocation + actualFileName;\n      File reportFile = new File(fileName);\n      reportFilesOfTenants.add(reportFile);\n\n      XSSFWorkbook workbook = new XSSFWorkbook();\n\n      generateReportPerView(totalOverview.getTopicsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getPartitionsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getTopicsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getAclsPerEnvOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getProducerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getConsumerAclsPerTeamsOverview(), workbook, reportFile);\n      generateReportPerView(totalOverview.getActivityLogOverview(), workbook, reportFile);\n\n      addTopicNamesPerEnvToReport(topicNames, workbook, reportFile, \"Topics\");\n      addTopicNamesPerEnvToReport(consumerGroups, workbook, reportFile, \"ConsumerGroups\");\n\n      log.info(\"Report generated\");\n      if (zipOutputStream != null) {\n        writeToZipFile(zipOutputStream, fileName, actualFileName);\n      }\n    }\n\n    try {\n      if (zipOutputStream != null) {\n        zipOutputStream.close();\n        // delete xlsx report file after writing to zip file.\n        for (File reportFilesOfTenant : reportFilesOfTenants) {\n          reportFilesOfTenant.delete();\n        }\n      }\n    } catch (IOException e) {\n      log.error(\"Exception:\", e);\n    }\n\n    return zipFile;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AnalyticsControllerServiceTest.java",
            "method_src": "@Test\n  public void generateReport_UnauthorizedUser() {\n    TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();\n\n    List<TeamOverview> listTeamsOverview = List.of(teamOverview);\n    Topic topic = UtilMethods.getDummyTopic();\n    Acl acl = UtilMethods.getDummyAcl();\n\n    loginMock();\n    Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME);\n    Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TENANT_ID);\n    Mockito.when(\n            manageDatabase.getKwPropertyValue(\n                KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID))\n        .thenReturn(TestConstants.KW_REPORTS_LOCATION);\n    Mockito.doReturn(listTeamsOverview).when(analyticsControllerService).getTeamsOverview(null);\n    Mockito.when(commonUtilsService.getEnvsFromUserId(any()))\n        .thenReturn(Set.of(TestConstants.ENV_ID));\n    Mockito.doReturn(TestConstants.ENV_NAME)\n        .when(analyticsControllerService)\n        .getEnvName(TestConstants.ENV_ID);\n    Mockito.when(\n            commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS)))\n        .thenReturn(true);\n    Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TEAM_ID);\n    Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc);\n    Mockito.when(\n            handleDbRequestsJdbc.getTopicsforTeam(TestConstants.TEAM_ID, TestConstants.TENANT_ID))\n        .thenReturn(List.of(topic));\n    Mockito.when(\n            handleDbRequestsJdbc.getConsumerGroupsforTeam(\n                TestConstants.TEAM_ID, TestConstants.TENANT_ID))\n        .thenReturn(List.of(acl));\n\n    File actual = analyticsControllerService.generateReport();\n    Assertions.assertNotNull(actual);\n    actual.deleteOnExit();\n  }",
            "method_tgt": "@Test\n  public void generateReport_UnauthorizedUser() {\n    TeamOverview teamOverview = UtilMethods.getDummyTeamOverview();\n\n    List<TeamOverview> listTeamsOverview = List.of(teamOverview);\n    Topic topic = UtilMethods.getDummyTopic();\n    Acl acl = UtilMethods.getDummyAcl();\n\n    loginMock();\n    Mockito.when(commonUtilsService.getCurrentUserName()).thenReturn(TestConstants.USERNAME);\n    Mockito.when(commonUtilsService.getTenantId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TENANT_ID);\n    Mockito.when(\n            manageDatabase.getKwPropertyValue(\n                KwConstants.KW_REPORTS_TMP_LOCATION_KEY, TestConstants.TENANT_ID))\n        .thenReturn(TestConstants.KW_REPORTS_LOCATION);\n    Mockito.doReturn(listTeamsOverview)\n        .when(analyticsControllerService)\n        .getTeamsOverview(null, NUMBER_OF_DAYS);\n    Mockito.when(commonUtilsService.getEnvsFromUserId(any()))\n        .thenReturn(Set.of(TestConstants.ENV_ID));\n    Mockito.doReturn(TestConstants.ENV_NAME)\n        .when(analyticsControllerService)\n        .getEnvName(TestConstants.ENV_ID);\n    Mockito.when(\n            commonUtilsService.isNotAuthorizedUser(any(), eq(PermissionType.ALL_TEAMS_REPORTS)))\n        .thenReturn(true);\n    Mockito.when(commonUtilsService.getTeamId(TestConstants.USERNAME))\n        .thenReturn(TestConstants.TEAM_ID);\n    Mockito.when(manageDatabase.getHandleDbRequests()).thenReturn(handleDbRequestsJdbc);\n    Mockito.when(\n            handleDbRequestsJdbc.getTopicsforTeam(TestConstants.TEAM_ID, TestConstants.TENANT_ID))\n        .thenReturn(List.of(topic));\n    Mockito.when(\n            handleDbRequestsJdbc.getConsumerGroupsforTeam(\n                TestConstants.TEAM_ID, TestConstants.TENANT_ID))\n        .thenReturn(List.of(acl));\n\n    File actual = analyticsControllerService.generateReport(NUMBER_OF_DAYS);\n    Assertions.assertNotNull(actual);\n    actual.deleteOnExit();\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 4,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "1ee87037349a0796bd67c12665221b212427147f",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/TopicController.java",
            "method_src": "public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"topicType\", required = false) String topicType) {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId, pageNo, currentPage, topicNameSearch, teamId, topicType),\n        HttpStatus.OK);\n  }",
            "method_tgt": "public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"topicType\", required = false) AclType topicType)\n      throws KlawNotAuthorizedException {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId,\n            pageNo,\n            currentPage,\n            topicNameSearch,\n            teamId,\n            topicType != null ? topicType.value : null),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
            "method_src": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .param(\"topicType\", \"\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 1
        }
    },
    {
        "id": 5,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "bb1afdab0f1a4dd1665f273e0bf2c09c56bf5d58",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java",
            "method_src": "public List<TopicConfig> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<TopicConfig> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<TopicConfig>> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
            "method_tgt": "public LoadTopicsResponse getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId,\n      boolean resetTopicsCache)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n\n    LoadTopicsResponse loadTopicsResponse;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  TOPICS_NATIVE_TYPE,\n                  aclsNativeType,\n                  RESET_CACHE,\n                  String.valueOf(resetTopicsCache));\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<LoadTopicsResponse> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      loadTopicsResponse = Objects.requireNonNull(s.getBody());\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return loadTopicsResponse;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
            "method_src": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<TopicConfig> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }",
            "method_tgt": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<TopicConfig> topicsList = getTopics();\n    LoadTopicsResponse loadTopicsResponse =\n        LoadTopicsResponse.builder().topicConfigSet(topicsList).build();\n    ResponseEntity response = new ResponseEntity<>(loadTopicsResponse, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    Set<TopicConfig> result =\n        clusterApiService\n            .getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1, false)\n            .getTopicConfigSet();\n    assertThat(result).isEqualTo(topicsList);\n  }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 6,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "bb1afdab0f1a4dd1665f273e0bf2c09c56bf5d58",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java",
            "method_src": "public List<TopicConfig> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<TopicConfig> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<TopicConfig>> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
            "method_tgt": "public LoadTopicsResponse getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId,\n      boolean resetTopicsCache)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n\n    LoadTopicsResponse loadTopicsResponse;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  TOPICS_NATIVE_TYPE,\n                  aclsNativeType,\n                  RESET_CACHE,\n                  String.valueOf(resetTopicsCache));\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<LoadTopicsResponse> s =\n          getRestTemplate(null)\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      loadTopicsResponse = Objects.requireNonNull(s.getBody());\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return loadTopicsResponse;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
            "method_src": "@Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () -> clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1))\n        .isInstanceOf(KlawException.class);\n  }",
            "method_tgt": "@Test\n  @Order(6)\n  public void getAllTopicsFailure() throws Exception {\n\n    when(restTemplate.exchange(\n            Mockito.anyString(), eq(HttpMethod.GET), Mockito.any(), eq(Set.class)))\n        .thenThrow(new RuntimeException(\"error\"));\n\n    assertThatThrownBy(\n            () ->\n                clusterApiService.getAllTopics(\n                    \"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1, false))\n        .isInstanceOf(KlawException.class);\n  }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 7,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "ffd4da7b8f97db57a77b9bc54502aa4589396e7d",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandler.java",
            "method_src": "public String getRedirectPage(HttpServletRequest request) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
            "method_tgt": "public String getRedirectPage(HttpServletRequest request, Authentication authentication) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n    String coralTopicsUri = \"/coral/topics\";\n\n    if (quickStartEnabled\n        && handleDbRequests\n            .getUsersInfo(\n                UtilMethods.getUserName(authentication.getPrincipal(), preferredUsernameAttribute))\n            .getRole()\n            .equals(KwConstants.USER_ROLE)) {\n      return coralTopicsUri;\n    }\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
            "method_src": "@Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }",
            "method_tgt": "@Test\n  void getRedirectPageReturnRootForServletPathCheckTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getServletPath()).thenReturn(\"/{{ provider }}\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 8,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "ffd4da7b8f97db57a77b9bc54502aa4589396e7d",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandler.java",
            "method_src": "public String getRedirectPage(HttpServletRequest request) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }",
            "method_tgt": "public String getRedirectPage(HttpServletRequest request, Authentication authentication) {\n    DefaultSavedRequest defaultSavedRequest =\n        (DefaultSavedRequest) request.getSession().getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\");\n    String indexPage = \"index\";\n    String rootPath = \"/\";\n    String providerRoute = \"{{ provider }}\";\n    String coralTopicsUri = \"/coral/topics\";\n\n    if (quickStartEnabled\n        && handleDbRequests\n            .getUsersInfo(\n                UtilMethods.getUserName(authentication.getPrincipal(), preferredUsernameAttribute))\n            .getRole()\n            .equals(KwConstants.USER_ROLE)) {\n      return coralTopicsUri;\n    }\n\n    if (defaultSavedRequest == null) {\n      return indexPage;\n    }\n\n    String queryString = defaultSavedRequest.getQueryString();\n    String requestUri = defaultSavedRequest.getRequestURI();\n\n    if (requestUri != null && requestUri.contains(\"login\")) {\n      return indexPage;\n    }\n\n    if (defaultSavedRequest.getServletPath() != null\n        && defaultSavedRequest.getServletPath().contains(providerRoute)) return rootPath;\n\n    if (requestUri != null && queryString != null) {\n      return requestUri.concat(\"?\").concat(queryString);\n    } else {\n      return requestUri;\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/auth/KwAuthenticationSuccessHandlerTest.java",
            "method_src": "@Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage = kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }",
            "method_tgt": "@Test\n  void getRedirectPageReturnFullPathRequestUriQueryTest() {\n    when(httpServletRequest.getSession()).thenReturn(httpSession);\n    when(httpSession.getAttribute(springSavedReqAttribute)).thenReturn(defaultSavedRequest);\n    when(defaultSavedRequest.getRequestURI()).thenReturn(\"/browseTopics\");\n    when(defaultSavedRequest.getQueryString()).thenReturn(\"topicName=testtopic\");\n    String redirectedPage =\n        kwAuthenticationSuccessHandler.getRedirectPage(httpServletRequest, null);\n    assertThat(redirectedPage).isEqualTo(\"/browseTopics?topicName=testtopic\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 9,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "604d479714843994cfa244442fee2cbfc1096f35",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java",
            "method_src": "public ApiResponse deleteTeam(Integer teamId) throws KlawException {\n    log.info(\"deleteTeam {}\", teamId);\n    String userName = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_TEAMS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    if (manageDatabase.getHandleDbRequests().getAllUsersInfoForTeam(teamId, tenantId).size() > 0) {\n      return ApiResponse.notOk(TEAMS_ERR_103);\n    }\n\n    if (manageDatabase.getHandleDbRequests().existsComponentsCountForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_104);\n    }\n\n    // own team cannot be deleted\n    if (Objects.equals(commonUtilsService.getTeamId(userName), teamId)) {\n      return ApiResponse.notOk(TEAMS_ERR_105);\n    }\n\n    try {\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTeamRequest(teamId, commonUtilsService.getTenantId(getUserName()));\n\n      if (ApiResultStatus.SUCCESS.value.equals(result)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.TEAM, MetadataOperationType.DELETE, null);\n      }\n\n      return ApiResultStatus.SUCCESS.value.equals(result)\n          ? ApiResponse.ok(result)\n          : ApiResponse.notOk(result);\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse deleteTeam(Integer teamId) throws KlawException {\n    log.info(\"deleteTeam {}\", teamId);\n    String userName = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_TEAMS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    if (manageDatabase.getHandleDbRequests().existsUsersInfoForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_103);\n    }\n\n    if (manageDatabase.getHandleDbRequests().existsComponentsCountForTeam(teamId, tenantId)) {\n      return ApiResponse.notOk(TEAMS_ERR_104);\n    }\n\n    // own team cannot be deleted\n    if (Objects.equals(commonUtilsService.getTeamId(userName), teamId)) {\n      return ApiResponse.notOk(TEAMS_ERR_105);\n    }\n\n    try {\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTeamRequest(teamId, commonUtilsService.getTenantId(getUserName()));\n\n      if (ApiResultStatus.SUCCESS.value.equals(result)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.TEAM, MetadataOperationType.DELETE, null);\n      }\n\n      return ApiResultStatus.SUCCESS.value.equals(result)\n          ? ApiResponse.ok(result)\n          : ApiResponse.notOk(result);\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
            "method_src": "@Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllUsersInfoForTeam(teamId, tenantId))\n        .thenReturn(Collections.singletonList(new UserInfo()));\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }",
            "method_tgt": "@Test\n  void deleteTeamFailure() throws KlawException {\n    int teamId = 101;\n    int tenantId = 101;\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(tenantId);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.existsUsersInfoForTeam(teamId, tenantId)).thenReturn(true);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteTeam(teamId);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not allowed to delete this team, as there are associated users.\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 10,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "ddef9de123e04490d1504509ed4ded7971b971e2",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicSyncControllerService.java",
            "method_src": "public ApiResponse updateSyncTopics(List<SyncTopicUpdates> updatedSyncTopics)\n      throws KlawException {\n    log.info(\"updateSyncTopics {}\", updatedSyncTopics);\n    String userDetails = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.SYNC_TOPICS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    // tenant filtering\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    String syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    String orderOfEnvs = commonUtilsService.getEnvProperty(tenantId, ORDER_OF_TOPIC_ENVS);\n\n    List<Topic> existingTopics;\n    List<Topic> listTopics = new ArrayList<>();\n    Topic t;\n\n    StringBuilder erroredTopics = new StringBuilder();\n    boolean topicsWithDiffTeams = false;\n\n    StringBuilder erroredTopicsExist = new StringBuilder();\n    boolean topicsDontExistInMainCluster = false;\n    int topicId = manageDatabase.getHandleDbRequests().getNextTopicRequestId(\"TOPIC_ID\", tenantId);\n\n    // remove duplicates\n    updatedSyncTopics =\n        updatedSyncTopics.stream()\n            .filter(\n                topicUpdate ->\n                    topicUpdate.getTeamSelected() != null\n                        && !topicUpdate.getTeamSelected().equals(\"\"))\n            .collect(Collectors.toList());\n\n    List<Integer> updatedSyncTopicsDelete = new ArrayList<>();\n    updatedSyncTopics = handleTopicDeletes(updatedSyncTopics, updatedSyncTopicsDelete, tenantId);\n\n    if (updatedSyncTopics.size() > 0) {\n      for (SyncTopicUpdates topicUpdate : updatedSyncTopics) {\n        // tenant filtering\n        if (!commonUtilsService\n            .getEnvsFromUserId(userDetails)\n            .contains(topicUpdate.getEnvSelected())) {\n          return ApiResponse.NOT_AUTHORIZED;\n        }\n        existingTopics = getTopicFromName(topicUpdate.getTopicName(), tenantId);\n\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (existingTopic.getEnvironment().equals(syncCluster)) {\n              if (!manageDatabase\n                      .getTeamNameFromTeamId(tenantId, existingTopic.getTeamId())\n                      .equals(topicUpdate.getTeamSelected())\n                  && !topicUpdate.getEnvSelected().equals(syncCluster)) {\n                erroredTopics.append(topicUpdate.getTopicName()).append(\" \");\n                topicsWithDiffTeams = true;\n              }\n              break;\n            }\n          }\n        } else if (!Objects.equals(syncCluster, topicUpdate.getEnvSelected())) {\n          erroredTopicsExist.append(topicUpdate.getTopicName()).append(\" \");\n          if (checkInPromotionOrder(topicUpdate.getEnvSelected(), orderOfEnvs)) {\n            topicsDontExistInMainCluster = true;\n          }\n        }\n\n        boolean topicAdded = false;\n        if (existingTopics == null) {\n          t = new Topic();\n\n          topicId = topicId + 1;\n          t.setTopicid(topicId);\n          t.setTopicname(topicUpdate.getTopicName());\n          t.setNoOfPartitions(topicUpdate.getPartitions());\n          t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n          t.setEnvironment(topicUpdate.getEnvSelected());\n          t.setTeamId(\n              manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n          t.setDescription(\"Topic description\");\n          t.setExistingTopic(false);\n          t.setTenantId(tenantId);\n\n          listTopics.add(t);\n        } else {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            } else if (!Objects.equals(\n                manageDatabase.getTeamNameFromTeamId(tenantId, existingTopic.getTeamId()),\n                topicUpdate.getTeamSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            }\n          }\n        }\n\n        boolean envFound = false;\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              envFound = true;\n              break;\n            }\n          }\n          if (!envFound && !topicAdded) {\n            t = new Topic();\n            topicId = topicId + 1;\n            t.setTopicid(topicId);\n            t.setTopicname(topicUpdate.getTopicName());\n            t.setNoOfPartitions(topicUpdate.getPartitions());\n            t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n            t.setEnvironment(topicUpdate.getEnvSelected());\n            t.setTeamId(\n                manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n            t.setDescription(\"Topic description\");\n            t.setExistingTopic(false);\n            t.setTenantId(tenantId);\n\n            listTopics.add(t);\n          }\n        }\n      }\n    }\n\n    if (updatedSyncTopics.size() == 0 && updatedSyncTopicsDelete.size() > 0) {\n      manageDatabase.loadTopicsForOneTenant(tenantId);\n      return ApiResponse.SUCCESS;\n    }\n\n    if (topicsDontExistInMainCluster) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_103 + syncCluster + \". \\n Topics : \" + erroredTopicsExist);\n    }\n\n    if (topicsWithDiffTeams) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_104 + syncCluster + \". \\n Topics : \" + erroredTopics);\n    }\n\n    if (listTopics.size() > 0) {\n      try {\n        String statusSync = manageDatabase.getHandleDbRequests().addToSynctopics(listTopics);\n        manageDatabase.loadTopicsForOneTenant(tenantId);\n        return ApiResponse.ok(statusSync);\n      } catch (Exception e) {\n        log.error(e.getMessage());\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      return ApiResponse.notOk(SYNC_ERR_101);\n    }\n  }",
            "method_tgt": "public ApiResponse updateSyncTopics(List<SyncTopicUpdates> updatedSyncTopics)\n      throws KlawException {\n    log.info(\"updateSyncTopics {}\", updatedSyncTopics);\n    String userDetails = getUserName();\n\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.SYNC_TOPICS)) {\n      return ApiResponse.NOT_AUTHORIZED;\n    }\n\n    // tenant filtering\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    String syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    String orderOfEnvs = commonUtilsService.getEnvProperty(tenantId, ORDER_OF_TOPIC_ENVS);\n\n    List<Topic> existingTopics;\n    List<Topic> listTopics = new ArrayList<>();\n    Topic t;\n\n    StringBuilder erroredTopics = new StringBuilder();\n    boolean topicsWithDiffTeams = false;\n\n    StringBuilder erroredTopicsExist = new StringBuilder();\n    boolean topicsDontExistInMainCluster = false;\n    int topicId = manageDatabase.getHandleDbRequests().getNextTopicRequestId(\"TOPIC_ID\", tenantId);\n\n    // remove duplicates\n    updatedSyncTopics =\n        updatedSyncTopics.stream()\n            .filter(\n                topicUpdate ->\n                    topicUpdate.getTeamSelected() != null\n                        && !topicUpdate.getTeamSelected().equals(\"\"))\n            .collect(Collectors.toList());\n\n    List<Integer> updatedSyncTopicsDelete = new ArrayList<>();\n    updatedSyncTopics = handleTopicDeletes(updatedSyncTopics, updatedSyncTopicsDelete, tenantId);\n\n    if (updatedSyncTopics.size() > 0) {\n      for (SyncTopicUpdates topicUpdate : updatedSyncTopics) {\n        // tenant filtering\n        if (!commonUtilsService\n            .getEnvsFromUserId(userDetails)\n            .contains(topicUpdate.getEnvSelected())) {\n          return ApiResponse.NOT_AUTHORIZED;\n        }\n        existingTopics = getTopicFromName(topicUpdate.getTopicName(), tenantId);\n\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (existingTopic.getEnvironment().equals(syncCluster)) {\n              if (!manageDatabase\n                      .getTeamNameFromTeamId(tenantId, existingTopic.getTeamId())\n                      .equals(topicUpdate.getTeamSelected())\n                  && !topicUpdate.getEnvSelected().equals(syncCluster)) {\n                erroredTopics.append(topicUpdate.getTopicName()).append(\" \");\n                topicsWithDiffTeams = true;\n              }\n              break;\n            }\n          }\n        } else if (!Objects.equals(syncCluster, topicUpdate.getEnvSelected())) {\n          erroredTopicsExist.append(topicUpdate.getTopicName()).append(\" \");\n          if (checkInPromotionOrder(topicUpdate.getEnvSelected(), orderOfEnvs)) {\n            topicsDontExistInMainCluster = true;\n          }\n        }\n\n        boolean topicAdded = false;\n        if (existingTopics == null) {\n          t = new Topic();\n\n          topicId = topicId + 1;\n          t.setTopicid(topicId);\n          t.setTopicname(topicUpdate.getTopicName());\n          t.setNoOfPartitions(topicUpdate.getPartitions());\n          t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n          t.setEnvironment(topicUpdate.getEnvSelected());\n          t.setTeamId(\n              manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n          t.setDescription(\"Topic description\");\n          t.setExistingTopic(false);\n          t.setTenantId(tenantId);\n\n          listTopics.add(t);\n        } else {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            } else if (!Objects.equals(\n                manageDatabase.getTeamNameFromTeamId(tenantId, existingTopic.getTeamId()),\n                topicUpdate.getTeamSelected())) {\n              t = existingTopic;\n              t.setTeamId(\n                  manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n              t.setTopicname(topicUpdate.getTopicName());\n              t.setEnvironment(existingTopic.getEnvironment());\n              t.setExistingTopic(true);\n              t.setTenantId(tenantId);\n              listTopics.add(t);\n              topicAdded = true;\n            }\n          }\n        }\n\n        boolean envFound = false;\n        if (existingTopics != null) {\n          for (Topic existingTopic : existingTopics) {\n            if (Objects.equals(existingTopic.getEnvironment(), topicUpdate.getEnvSelected())) {\n              envFound = true;\n              break;\n            }\n          }\n          if (!envFound && !topicAdded) {\n            t = new Topic();\n            topicId = topicId + 1;\n            t.setTopicid(topicId);\n            t.setTopicname(topicUpdate.getTopicName());\n            t.setNoOfPartitions(topicUpdate.getPartitions());\n            t.setNoOfReplicas(topicUpdate.getReplicationFactor());\n            t.setEnvironment(topicUpdate.getEnvSelected());\n            t.setTeamId(\n                manageDatabase.getTeamIdFromTeamName(tenantId, topicUpdate.getTeamSelected()));\n            t.setDescription(\"Topic description\");\n            t.setExistingTopic(false);\n            t.setTenantId(tenantId);\n\n            listTopics.add(t);\n          }\n        }\n      }\n    }\n\n    if (updatedSyncTopics.size() == 0 && updatedSyncTopicsDelete.size() > 0) {\n      manageDatabase.loadTopicsForOneTenant(tenantId);\n      return ApiResponse.SUCCESS;\n    }\n\n    if (topicsDontExistInMainCluster) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_103 + syncCluster + \". \\n Topics : \" + erroredTopicsExist);\n    }\n\n    if (topicsWithDiffTeams) {\n      return ApiResponse.notOk(\n          TOPICS_SYNC_ERR_104 + syncCluster + \". \\n Topics : \" + erroredTopics);\n    }\n\n    if (listTopics.size() > 0) {\n      try {\n        CRUDResponse<Topic> statusSync =\n            manageDatabase.getHandleDbRequests().addToSynctopics(listTopics);\n        manageDatabase.loadTopicsForOneTenant(tenantId);\n\n        return ApiResponse.ok(statusSync.getResultStatus());\n      } catch (Exception e) {\n        log.error(e.getMessage());\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      return ApiResponse.notOk(SYNC_ERR_101);\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicSyncControllerServiceTest.java",
            "method_src": "@Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any())).thenReturn(ApiResultStatus.SUCCESS.value);\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  @Order(1)\n  public void updateSyncTopicsSuccess() throws KlawException {\n    stubUserInfo();\n    when(manageDatabase.getTenantConfig()).thenReturn(tenantConfig);\n    when(tenantConfig.get(anyInt())).thenReturn(tenantConfigModel);\n    when(tenantConfigModel.getBaseSyncEnvironment()).thenReturn(\"1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.addToSynctopics(any()))\n        .thenReturn(\n            CRUDResponse.<Topic>builder().resultStatus(ApiResultStatus.SUCCESS.value).build());\n\n    ApiResponse result =\n        topicSyncControllerService.updateSyncTopics(utilMethods.getSyncTopicUpdates());\n    assertThat(result.getMessage()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 11,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "da379ca6fbb593dfbdcedd33c6368ad6b086697b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java",
            "method_src": "public ApiResponse deleteUser(String userIdToDelete, boolean isExternal) throws KlawException {\n    log.info(\"deleteUser {}\", userIdToDelete);\n    String userName = getUserName();\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_USERS)) {\n      return ApiResponse.builder()\n          .success(false)\n          .message(ApiResultStatus.NOT_AUTHORIZED.value)\n          .build();\n    }\n\n    UserInfo existingUserInfo = manageDatabase.getHandleDbRequests().getUsersInfo(userIdToDelete);\n    List<String> permissions =\n        manageDatabase\n            .getRolesPermissionsPerTenant(commonUtilsService.getTenantId(getUserName()))\n            .get(existingUserInfo.getRole());\n    if (permissions != null\n        && permissions.contains(PermissionType.FULL_ACCESS_USERS_TEAMS_ROLES.name())) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_106).build();\n    }\n\n    if (manageDatabase.getHandleDbRequests().getAllComponentsCountForUser(userIdToDelete, tenantId)\n        > 0) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_107).build();\n    }\n\n    if (Objects.equals(userName, userIdToDelete) && isExternal) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_108).build();\n    }\n\n    try {\n      inMemoryUserDetailsManager.deleteUser(userIdToDelete);\n      String result = manageDatabase.getHandleDbRequests().deleteUserRequest(userIdToDelete);\n      if (result.equals(ApiResultStatus.SUCCESS.value)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.USERS, MetadataOperationType.DELETE, userIdToDelete);\n      }\n      return ApiResponse.builder()\n          .success(result.equals(ApiResultStatus.SUCCESS.value))\n          .message(result)\n          .build();\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse deleteUser(String userIdToDelete, boolean isExternal) throws KlawException {\n    log.info(\"deleteUser {}\", userIdToDelete);\n    String userName = getUserName();\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.ADD_EDIT_DELETE_USERS)) {\n      return ApiResponse.builder()\n          .success(false)\n          .message(ApiResultStatus.NOT_AUTHORIZED.value)\n          .build();\n    }\n\n    UserInfo existingUserInfo = manageDatabase.getHandleDbRequests().getUsersInfo(userIdToDelete);\n    List<String> permissions =\n        manageDatabase\n            .getRolesPermissionsPerTenant(commonUtilsService.getTenantId(getUserName()))\n            .get(existingUserInfo.getRole());\n    if (permissions != null\n        && permissions.contains(PermissionType.FULL_ACCESS_USERS_TEAMS_ROLES.name())) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_106).build();\n    }\n\n    if (manageDatabase\n        .getHandleDbRequests()\n        .existsComponentsCountForUser(userIdToDelete, tenantId)) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_107).build();\n    }\n\n    if (Objects.equals(userName, userIdToDelete) && isExternal) {\n      return ApiResponse.builder().success(false).message(TEAMS_ERR_108).build();\n    }\n\n    try {\n      inMemoryUserDetailsManager.deleteUser(userIdToDelete);\n      String result = manageDatabase.getHandleDbRequests().deleteUserRequest(userIdToDelete);\n      if (result.equals(ApiResultStatus.SUCCESS.value)) {\n        commonUtilsService.updateMetadata(\n            tenantId, EntityType.USERS, MetadataOperationType.DELETE, userIdToDelete);\n      }\n      return ApiResponse.builder()\n          .success(result.equals(ApiResultStatus.SUCCESS.value))\n          .message(result)\n          .build();\n    } catch (Exception e) {\n      log.error(\"Exception:\", e);\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
            "method_src": "@Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    when(handleDbRequests.getAllComponentsCountForUser(\"testuser\", 101)).thenReturn(1);\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }",
            "method_tgt": "@Test\n  void deleteUserFailureisAdmin() throws KlawException {\n    UserInfoModel userInfoModel = utilMethods.getUserInfoMock();\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(mailService.getUserName(any())).thenReturn(\"testuser\");\n    when(manageDatabase.getRolesPermissionsPerTenant(anyInt()))\n        .thenReturn(utilMethods.getRolesPermsMap());\n    ApiResponse apiResponse = usersTeamsControllerService.deleteUser(\"testuser\", false);\n    assertThat(apiResponse.getMessage())\n        .isEqualTo(\"Not Authorized. Cannot delete a user with SUPERADMIN access.\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 12,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "61b67d42faf6edfb01a61fb8620f809411824d1a",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java",
            "method_src": "public List<ServerConfigProperties> getAllProps() {\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      return new ArrayList<>();\n    }\n    return listProps;\n  }",
            "method_tgt": "public Collection<ServerConfigProperties> getAllProps() {\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      return new ArrayList<>();\n    }\n    return key2Props.values();\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
            "method_src": "@Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    List<ServerConfigProperties> list = serverConfigService.getAllProps();\n    assertThat(list).isEmpty(); // filtering for spring. and klaw.\n  }",
            "method_tgt": "@Test\n  @Order(2)\n  public void getAllProps() {\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    serverConfigService.getAllProperties();\n    Collection<ServerConfigProperties> collection = serverConfigService.getAllProps();\n    assertThat(collection).isEmpty(); // filtering for spring. and klaw.\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 13,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "2136704d67f8940e708c2a4b090a4f9a510a2d93",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/UsersTeamsControllerService.java",
            "method_src": "public ResetPasswordInfo resetPassword(String username, String password, String resetToken) {\n    log.info(\"resetPassword {}\", username);\n    ResetPasswordInfo resetPasswordInfo = new ResetPasswordInfo();\n    UserInfoModelResponse userInfoModel = getUserInfoDetails(username);\n    resetPasswordInfo.setTokenSent(false);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    if (userInfoModel == null) {\n      resetPasswordInfo.setUserFound(false);\n    } else {\n      resetPasswordInfo.setUserFound(true);\n      PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n\n      String pwdUpdated = dbHandle.resetPassword(username, resetToken, encodePwd(password));\n\n      if (ApiResultStatus.SUCCESS.value.equals(pwdUpdated)) {\n        UserDetails updatePwdUserDetails = inMemoryUserDetailsManager.loadUserByUsername(username);\n        inMemoryUserDetailsManager.updatePassword(updatePwdUserDetails, encoder.encode(password));\n        resetPasswordInfo.setTokenSent(true);\n        mailService.sendMailPwdChanged(\n            username, dbHandle, userInfoModel.getTenantId(), commonUtilsService.getLoginUrl());\n      }\n    }\n    return resetPasswordInfo;\n  }",
            "method_tgt": "public ResetPasswordInfo resetPassword(String username, String password, String resetToken)\n      throws KlawNotAuthorizedException {\n    log.info(\"resetPassword {}\", username);\n    ResetPasswordInfo resetPasswordInfo = new ResetPasswordInfo();\n    UserInfoModelResponse userInfoModel = getUserInfoDetails(username);\n    resetPasswordInfo.setTokenSent(false);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    if (userInfoModel == null) {\n      resetPasswordInfo.setUserFound(false);\n    } else {\n      resetPasswordInfo.setUserFound(true);\n      PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();\n\n      String pwdUpdated = dbHandle.resetPassword(username, resetToken, encodePwd(password));\n\n      if (ApiResultStatus.SUCCESS.value.equals(pwdUpdated)) {\n        UserDetails updatePwdUserDetails = inMemoryUserDetailsManager.loadUserByUsername(username);\n        inMemoryUserDetailsManager.updatePassword(updatePwdUserDetails, encoder.encode(password));\n        resetPasswordInfo.setTokenSent(true);\n        mailService.sendMailPwdChanged(\n            username, dbHandle, userInfoModel.getTenantId(), commonUtilsService.getLoginUrl());\n      }\n    }\n    return resetPasswordInfo;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/UsersTeamsControllerServiceTest.java",
            "method_src": "@Test\n  public void resetPassword_noUser() throws KlawException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }",
            "method_tgt": "@Test\n  public void resetPassword_noUser() throws KlawNotAuthorizedException {\n    String newPW = \"newPW\";\n    String resetToken = UUID.randomUUID().toString();\n    when(handleDbRequests.getUsersInfo(eq(OCTOPUS))).thenReturn(null);\n\n    ResetPasswordInfo passwordReset =\n        usersTeamsControllerService.resetPassword(OCTOPUS, newPW, resetToken);\n\n    assertThat(passwordReset.isUserFound()).isEqualTo(false);\n    assertThat(passwordReset.isTokenSent()).isEqualTo(false);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 1
        }
    },
    {
        "id": 14,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "aaf7a2689b005d9a47e0dc7b01e21d50d80517c2",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java",
            "method_src": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
            "method_tgt": "public TopicOverview getTopicOverview(String topicNameSearch, AclGroupBy groupBy) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo =\n        getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo, groupBy);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
            "method_src": "@Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }",
            "method_tgt": "@Test\n  @Order(3)\n  public void givenATopicWithOnlyOneKafkaEnv_ReturnNoPromotion() throws Exception {\n    stubUserInfo();\n    stubKafkaPromotion(TESTTOPIC, 1);\n    stubSchemaPromotionInfo(TESTTOPIC, KafkaClustersType.KAFKA, 15);\n    when(handleDbRequests.getTopics(TESTTOPIC, 101))\n        .thenReturn(Arrays.asList(createTopic(TESTTOPIC)));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"ORDER_OF_ENVS\"))).thenReturn(\"1\");\n\n    TopicOverview returnedValue = topicOverviewService.getTopicOverview(TESTTOPIC, AclGroupBy.NONE);\n    assertThat(returnedValue.getTopicPromotionDetails()).isNotNull();\n    assertThat(returnedValue.getTopicPromotionDetails().containsKey(\"status\")).isTrue();\n    assertThat(returnedValue.getTopicPromotionDetails().get(\"status\")).isEqualTo(\"NO_PROMOTION\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 15,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "aaf7a2689b005d9a47e0dc7b01e21d50d80517c2",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java",
            "method_src": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
            "method_tgt": "public TopicOverview getTopicOverview(String topicNameSearch, AclGroupBy groupBy) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo =\n        getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo, groupBy);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
            "method_src": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
            "method_tgt": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList =\n        topicOverviewService.getTopicOverview(topicNameSearch, AclGroupBy.NONE).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 16,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "aaf7a2689b005d9a47e0dc7b01e21d50d80517c2",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java",
            "method_src": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
            "method_tgt": "public TopicOverview getTopicOverview(String topicNameSearch, AclGroupBy groupBy) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo =\n        getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo, groupBy);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
            "method_src": "@Test\n  @Order(6)\n  public void getAclsSyncFalseMaskedData() throws KlawException {\n    String env1 = \"1\";\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(userInfo.getTeamId()).thenReturn(110);\n    when(mailService.getUserName(any())).thenReturn(TEAM_ID);\n    when(commonUtilsService.getTeamId(eq(TEAM_ID))).thenReturn(110);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    // MASKED DATA\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"Not Authorized to see this.\");\n    assertThat(aclList.get(0).getAcl_ssl()).isEqualTo(\"Not Authorized to see this.\");\n  }",
            "method_tgt": "@Test\n  @Order(6)\n  public void getAclsSyncFalseMaskedData() {\n    String env1 = \"1\";\n    when(handleDbRequests.getUsersInfo(anyString())).thenReturn(userInfo);\n    when(userInfo.getTeamId()).thenReturn(110);\n    when(mailService.getUserName(any())).thenReturn(TEAM_ID);\n    when(commonUtilsService.getTeamId(eq(TEAM_ID))).thenReturn(110);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList =\n        topicOverviewService.getTopicOverview(TESTTOPIC, AclGroupBy.NONE).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    // MASKED DATA\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"Not Authorized to see this.\");\n    assertThat(aclList.get(0).getAcl_ssl()).isEqualTo(\"Not Authorized to see this.\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 17,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "4f3e3ef8000e1f6f9b116ddd0d3f031b0b938ed3",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java",
            "method_src": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        manageDatabase.getHandleDbRequests().getTopicTeam(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
            "method_tgt": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
            "method_src": "@Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
            "method_tgt": "@Test\n  @Order(1)\n  public void getAclsSyncFalse1() throws KlawException {\n    String env1 = \"1\";\n    stubUserInfo();\n\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(TESTTOPIC));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(TESTTOPIC));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(TESTTOPIC).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(TESTTOPIC);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 18,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "4f3e3ef8000e1f6f9b116ddd0d3f031b0b938ed3",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicOverviewService.java",
            "method_src": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        manageDatabase.getHandleDbRequests().getTopicTeam(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }",
            "method_tgt": "public TopicOverview getTopicOverview(String topicNameSearch) {\n    log.debug(\"getAcls {}\", topicNameSearch);\n\n    if (topicNameSearch != null) {\n      topicNameSearch = topicNameSearch.trim();\n    } else {\n      return null;\n    }\n\n    String userName = getUserName();\n    HandleDbRequests handleDb = manageDatabase.getHandleDbRequests();\n    int tenantId = commonUtilsService.getTenantId(userName);\n\n    Integer loggedInUserTeam = commonUtilsService.getTeamId(userName);\n    List<Topic> topics = handleDb.getTopics(topicNameSearch, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topics =\n        topics.stream()\n            .filter(topicObj -> allowedEnvIdSet.contains(topicObj.getEnvironment()))\n            .collect(Collectors.toList());\n\n    TopicOverview topicOverview = new TopicOverview();\n\n    if (topics.size() == 0) {\n      topicOverview.setTopicExists(false);\n      return topicOverview;\n    } else {\n      topicOverview.setTopicExists(true);\n    }\n\n    String syncCluster;\n    String[] reqTopicsEnvs;\n    Set<String> reqTopicsEnvsList = new HashSet<>();\n    try {\n      syncCluster = manageDatabase.getTenantConfig().get(tenantId).getBaseSyncEnvironment();\n    } catch (Exception exception) {\n      log.error(\"Exception while getting syncCluster. Ignored. \", exception);\n      syncCluster = null;\n    }\n\n    try {\n      String requestTopicsEnvs =\n          commonUtilsService.getEnvProperty(tenantId, \"REQUEST_TOPICS_OF_ENVS\");\n      reqTopicsEnvs = requestTopicsEnvs.split(\",\");\n      reqTopicsEnvsList = new HashSet<>(Arrays.asList(reqTopicsEnvs));\n    } catch (Exception exception) {\n      log.error(\"Error in getting req topic envs\", exception);\n    }\n\n    List<TopicInfo> topicInfoList = new ArrayList<>();\n    List<TopicHistory> topicHistoryList = new ArrayList<>();\n    enrichTopicOverview(\n        tenantId, topics, topicOverview, syncCluster, topicInfoList, topicHistoryList);\n    List<AclInfo> aclInfo = new ArrayList<>();\n    List<AclInfo> prefixedAclsInfo = new ArrayList<>();\n    List<Topic> topicsSearchList =\n        commonUtilsService.getTopicsForTopicName(topicNameSearch, tenantId);\n    // tenant filtering\n    Integer topicOwnerTeamId =\n        commonUtilsService.getFilteredTopicsForTenant(topicsSearchList).get(0).getTeamId();\n\n    enrichTopicInfoList(\n        topicNameSearch,\n        handleDb,\n        tenantId,\n        loggedInUserTeam,\n        topicInfoList,\n        aclInfo,\n        prefixedAclsInfo,\n        topicOwnerTeamId);\n\n    aclInfo = getAclInfoList(tenantId, topicOverview, topicInfoList, aclInfo, prefixedAclsInfo);\n\n    updateTopicOverviewItems(\n        topicNameSearch,\n        tenantId,\n        loggedInUserTeam,\n        topics,\n        topicOverview,\n        topicInfoList,\n        aclInfo,\n        topicOwnerTeamId);\n\n    return topicOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicOverviewServiceTest.java",
            "method_src": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }",
            "method_tgt": "@Test\n  @Order(2)\n  public void getAclsSyncFalse2() {\n    String topicNameSearch = \"testnewtopic1\";\n\n    stubUserInfo();\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(manageDatabase.getKwPropertyValue(anyString(), anyInt())).thenReturn(\"true\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.selectAllTeamsOfUsers(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTeams());\n    when(handleDbRequests.getTopics(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(getAclsSOT(topicNameSearch));\n    when(commonUtilsService.getTopicsForTopicName(anyString(), anyInt()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(utilMethods.getTopics(topicNameSearch));\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(kwClustersHashMap);\n    when(kwClustersHashMap.get(anyInt())).thenReturn(kwClusters);\n\n    when(manageDatabase.getAllEnvList(anyInt()))\n        .thenReturn(createListOfEnvs(KafkaClustersType.SCHEMA_REGISTRY, 5));\n    when(commonUtilsService.getEnvProperty(eq(101), eq(\"REQUEST_TOPICS_OF_ENVS\"))).thenReturn(\"1\");\n    mockTenantConfig();\n\n    List<AclInfo> aclList = topicOverviewService.getTopicOverview(topicNameSearch).getAclInfoList();\n\n    assertThat(aclList).hasSize(1);\n\n    assertThat(aclList.get(0).getTopicname()).isEqualTo(topicNameSearch);\n    assertThat(aclList.get(0).getConsumergroup()).isEqualTo(\"mygrp1\");\n    assertThat(aclList.get(0).getAcl_ip()).isEqualTo(\"2.1.2.1\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 19,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "55b72c5c35004038ca242c240ead4234e050c0eb",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java",
            "method_src": "public List<Map<String, String>> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<Map<String, String>> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<Map<String, String>>> s =\n          getRestTemplate()\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }",
            "method_tgt": "public List<TopicConfig> getAllTopics(\n      String bootstrapHost,\n      KafkaSupportedProtocol protocol,\n      String clusterIdentification,\n      String kafkaFlavors,\n      int tenantId)\n      throws Exception {\n    log.info(\"getAllTopics {} {}\", bootstrapHost, protocol);\n    getClusterApiProperties(tenantId);\n    List<TopicConfig> topicsList;\n    String aclsNativeType = AclsNativeType.NATIVE.value;\n\n    if (KafkaFlavors.CONFLUENT_CLOUD.value.equals(kafkaFlavors)) {\n      aclsNativeType = AclsNativeType.CONFLUENT_CLOUD.value;\n    }\n    try {\n      String uriGetTopicsFull =\n          clusterConnUrl\n              + URI_GET_TOPICS\n              + bootstrapHost\n              + URL_DELIMITER\n              + String.join(\n                  URL_DELIMITER,\n                  protocol.getName(),\n                  clusterIdentification,\n                  \"topicsNativeType\",\n                  aclsNativeType);\n\n      HttpEntity<String> entity = getHttpEntity();\n      ResponseEntity<Set<TopicConfig>> s =\n          getRestTemplate()\n              .exchange(\n                  uriGetTopicsFull, HttpMethod.GET, entity, new ParameterizedTypeReference<>() {});\n      topicsList = new ArrayList<>(Objects.requireNonNull(s.getBody()));\n    } catch (Exception e) {\n      log.error(\"Error from getAllTopics\", e);\n      throw new KlawException(CLUSTER_API_ERR_104);\n    }\n\n    return topicsList;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
            "method_src": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<Map<String, String>> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }",
            "method_tgt": "@Test\n  @Order(5)\n  public void getAllTopicsSuccess() throws Exception {\n    Set<String> topicsList = getTopics();\n    ResponseEntity response = new ResponseEntity<>(topicsList, HttpStatus.OK);\n\n    when(restTemplate.exchange(\n            Mockito.anyString(),\n            eq(HttpMethod.GET),\n            Mockito.any(),\n            (ParameterizedTypeReference<Object>) any()))\n        .thenReturn(response);\n\n    List<TopicConfig> result =\n        clusterApiService.getAllTopics(\"\", KafkaSupportedProtocol.PLAINTEXT, \"\", \"\", 1);\n    assertThat(result).isEqualTo(new ArrayList<>(topicsList));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 20,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "a85b55d302480ca65fe5566710b5dc1ca652e751",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java",
            "method_src": "public List<Map<String, String>> getAllEditableProps() {\n    List<Map<String, String>> listMap = new ArrayList<>();\n    Map<String, String> resultMap = new HashMap<>();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      resultMap.put(\"result\", ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(resultMap);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      resultMap = new HashMap<>();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      resultMap.put(\"kwkey\", kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(resultMap);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        resultMap.put(\"kwvalue\", kwVal);\n        resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(resultMap);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.get(\"kwkey\")))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
            "method_tgt": "public List<KwPropertiesResponse> getAllEditableProps() {\n    List<KwPropertiesResponse> listMap = new ArrayList<>();\n    KwPropertiesResponse propertiesResponse = new KwPropertiesResponse();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      propertiesResponse.setResult(ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(propertiesResponse);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      KwPropertiesResponse kwPropertiesResponse = new KwPropertiesResponse();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      kwPropertiesResponse.setKwkey(kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(kwPropertiesResponse);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        kwPropertiesResponse.setKwvalue(kwVal);\n        kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(kwPropertiesResponse);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.getKwkey()))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
            "method_src": "@Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }",
            "method_tgt": "@Test\n  @Order(10)\n  public void givenRequestForConfigWithNoneSet_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n    TenantConfig config = new TenantConfig();\n    config.setTenantModel(null);\n    Map<String, Map<String, String>> dbObject = new HashMap<>();\n    Map<String, String> map = new HashMap();\n\n    map.put(\"kwvalue\", mapper.writeValueAsString(config));\n    map.put(\"kwkey\", KLAW_TENANT_CONFIG);\n    map.put(\"kwdes\", \"Desc\");\n    map.put(\"tenantid\", \"101\");\n    dbObject.put(KLAW_TENANT_CONFIG, map);\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(dbObject);\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n    assertThat(tenantConfig.getTenantModel()).isNull();\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 21,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "a85b55d302480ca65fe5566710b5dc1ca652e751",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ServerConfigService.java",
            "method_src": "public List<Map<String, String>> getAllEditableProps() {\n    List<Map<String, String>> listMap = new ArrayList<>();\n    Map<String, String> resultMap = new HashMap<>();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      resultMap.put(\"result\", ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(resultMap);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      resultMap = new HashMap<>();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      resultMap.put(\"kwkey\", kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(resultMap);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          resultMap.put(\"kwvalue\", kwVal);\n          resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        resultMap.put(\"kwvalue\", kwVal);\n        resultMap.put(\"kwdesc\", stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(resultMap);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.get(\"kwkey\")))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }",
            "method_tgt": "public List<KwPropertiesResponse> getAllEditableProps() {\n    List<KwPropertiesResponse> listMap = new ArrayList<>();\n    KwPropertiesResponse propertiesResponse = new KwPropertiesResponse();\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.UPDATE_SERVERCONFIG)) {\n      propertiesResponse.setResult(ApiResultStatus.NOT_AUTHORIZED.value);\n      listMap.add(propertiesResponse);\n      return listMap;\n    }\n\n    int tenantId = commonUtilsService.getTenantId(getUserName());\n    Map<String, Map<String, String>> kwProps = manageDatabase.getKwPropertiesMap(tenantId);\n    String kwVal, kwKey;\n\n    for (Map.Entry<String, Map<String, String>> stringStringEntry : kwProps.entrySet()) {\n      KwPropertiesResponse kwPropertiesResponse = new KwPropertiesResponse();\n      kwKey = stringStringEntry.getKey();\n      kwVal = stringStringEntry.getValue().get(\"kwvalue\");\n      kwPropertiesResponse.setKwkey(kwKey);\n\n      if (KwConstants.TENANT_CONFIG_PROPERTY.equals(kwKey)) {\n        TenantConfig dynamicObj;\n        try {\n          OBJECT_MAPPER.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n          dynamicObj = OBJECT_MAPPER.readValue(kwVal, TenantConfig.class);\n          updateEnvNameValues(dynamicObj, tenantId);\n          kwVal = WRITER_WITH_DEFAULT_PRETTY_PRINTER.writeValueAsString(dynamicObj);\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n          listMap.add(kwPropertiesResponse);\n        } catch (Exception ioe) {\n          log.error(\"Error from getAllEditableProps {}\", kwKey, ioe);\n          log.error(\"No environments/clusters found. {}\", kwKey);\n          kwVal = \"{}\";\n          kwPropertiesResponse.setKwvalue(kwVal);\n          kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n        }\n      } else {\n        kwPropertiesResponse.setKwvalue(kwVal);\n        kwPropertiesResponse.setKwdesc(stringStringEntry.getValue().get(\"kwdesc\"));\n\n        listMap.add(kwPropertiesResponse);\n      }\n    }\n\n    if (tenantId != KwConstants.DEFAULT_TENANT_ID) {\n      return listMap.stream()\n          .filter(item -> KwConstants.allowConfigForAdmins.contains(item.getKwkey()))\n          .collect(Collectors.toList());\n    } else {\n      return listMap;\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ServerConfigServiceTest.java",
            "method_src": "@Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<Map<String, String>> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig =\n        mapper.readValue(response.get(0).get(\"kwvalue\"), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }",
            "method_tgt": "@Test\n  @Order(9)\n  public void givenRequestForConfig_returnCorrectConfig()\n      throws KlawException, JsonProcessingException {\n    stubValidateTests();\n\n    when(managedb.getKwPropertiesMap(101)).thenReturn(buildFullDbObject());\n\n    // Execute\n    List<KwPropertiesResponse> response = serverConfigService.getAllEditableProps();\n    TenantConfig tenantConfig = mapper.readValue(response.get(0).getKwvalue(), TenantConfig.class);\n    verify(managedb, times(1)).getKwPropertiesMap(101);\n    // assert that the order is as specified in getJsonString\n\n    assertThat(tenantConfig.getTenantModel().getBaseSyncEnvironment()).isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(0))\n        .isEqualTo(\"DEV\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(1))\n        .isEqualTo(\"UAT\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfTopicPromotionEnvsList().get(2))\n        .isEqualTo(\"TST\");\n\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(0))\n        .isEqualTo(\"UAT_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(1))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getOrderOfConnectorsPromotionEnvsList().get(2))\n        .isEqualTo(\"DEV_CONN\");\n\n    // ensure all parts are correctly being formatted back from the codes.\n    assertThat(tenantConfig.getTenantModel().getRequestConnectorsEnvironmentsList().get(0))\n        .isEqualTo(\"TST_CONN\");\n    assertThat(tenantConfig.getTenantModel().getRequestTopicsEnvironmentsList().get(0))\n        .isEqualTo(\"DEV\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 22,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "a0cf99a5812b9090339844d2066d0cbef537447b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/TopicController.java",
            "method_src": "public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamName\", required = false) String teamName,\n      @RequestParam(value = \"topicType\", required = false) String topicType) {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId, pageNo, currentPage, topicNameSearch, teamName, topicType),\n        HttpStatus.OK);\n  }",
            "method_tgt": "public ResponseEntity<List<List<TopicInfo>>> getTopics(\n      @RequestParam(\"env\") String envId,\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"topicnamesearch\", required = false) String topicNameSearch,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"topicType\", required = false) String topicType) {\n\n    return new ResponseEntity<>(\n        topicControllerService.getTopics(\n            envId, pageNo, currentPage, topicNameSearch, teamId, topicType),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
            "method_src": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyString(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamName\", \"Team1\")\n                .param(\"topicType\", \"\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  @Order(9)\n  public void getTopics() throws Exception {\n    List<List<TopicInfo>> topicList = utilMethods.getTopicInfoList();\n\n    when(topicControllerService.getTopics(\n            anyString(), anyString(), anyString(), anyString(), anyInt(), any()))\n        .thenReturn(topicList);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopics\")\n                .param(\"env\", \"1\")\n                .param(\"pageNo\", \"1\")\n                .param(\"topicnamesearch\", \"testtopic\")\n                .param(\"teamId\", \"1001\")\n                .param(\"topicType\", \"\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 23,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "c0da373fb04346f5e5e6ad74897d5dd85351ca9f",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/AclController.java",
            "method_src": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"operationType\", required = false)\n          RequestOperationType requestOperationType,\n      @RequestParam(value = \"order\", required = false, defaultValue = \"ASC_REQUESTED_TIME\")\n          Order order) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo,\n            currentPage,\n            requestStatus.value,\n            topic,\n            env,\n            requestOperationType,\n            aclType,\n            order),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"search\", required = false) String search,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"operationType\", required = false)\n          RequestOperationType requestOperationType,\n      @RequestParam(value = \"order\", required = false, defaultValue = \"ASC_REQUESTED_TIME\")\n          Order order) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo,\n            currentPage,\n            requestStatus.value,\n            topic,\n            env,\n            requestOperationType,\n            search,\n            aclType,\n            order),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/AclControllerTest.java",
            "method_src": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\n            \"1\",\n            \"\",\n            \"created\",\n            null,\n            null,\n            RequestOperationType.CREATE,\n            null,\n            io.aiven.klaw.model.enums.Order.ASC_REQUESTED_TIME))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .param(\"operationType\", RequestOperationType.CREATE.toString())\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\n            \"1\",\n            \"\",\n            \"created\",\n            null,\n            null,\n            RequestOperationType.CREATE,\n            null,\n            null,\n            io.aiven.klaw.model.enums.Order.ASC_REQUESTED_TIME))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .param(\"operationType\", RequestOperationType.CREATE.toString())\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 24,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "aa58e61d806f57389c940352138f5ed3d7a18502",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/AclController.java",
            "method_src": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"order\", required = false, defaultValue = \"ASC_REQUESTED_TIME\")\n          Order order) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo, currentPage, requestStatus.value, topic, env, aclType, order),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"operationType\", required = false)\n          RequestOperationType requestOperationType,\n      @RequestParam(value = \"order\", required = false, defaultValue = \"ASC_REQUESTED_TIME\")\n          Order order) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo,\n            currentPage,\n            requestStatus.value,\n            topic,\n            env,\n            requestOperationType,\n            aclType,\n            order),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/AclControllerTest.java",
            "method_src": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\n            \"1\",\n            \"\",\n            \"created\",\n            null,\n            null,\n            null,\n            io.aiven.klaw.model.enums.Order.ASC_REQUESTED_TIME))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\n            \"1\",\n            \"\",\n            \"created\",\n            null,\n            null,\n            RequestOperationType.CREATE,\n            null,\n            io.aiven.klaw.model.enums.Order.ASC_REQUESTED_TIME))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .param(\"operationType\", RequestOperationType.CREATE.toString())\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 25,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "60a75d766a981e2dc3c8cab1064726fca2c87650",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/AclController.java",
            "method_src": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo, currentPage, requestStatus.value, topic, env, aclType),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getAclRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"CREATED\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"order\", required = false, defaultValue = \"ASC_REQUESTED_TIME\")\n          Order order) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequestsForApprover(\n            pageNo, currentPage, requestStatus.value, topic, env, aclType, order),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/AclControllerTest.java",
            "method_src": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\"1\", \"\", \"created\", null, null, null))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getAclRequestsForApprover(\n            \"1\",\n            \"\",\n            \"created\",\n            null,\n            null,\n            null,\n            io.aiven.klaw.model.enums.Order.ASC_REQUESTED_TIME))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 26,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "19781130002f59cac5f1a26feeda4307742ad351",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java",
            "method_src": "public List<AclRequestsResponseModel> getAclRequests(\n      String pageNo,\n      String currentPage,\n      String requestStatus,\n      String topic,\n      String env,\n      AclType aclType,\n      boolean isMyRequest) {\n\n    String userName = getCurrentUserName();\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    List<AclRequests> aclReqs =\n        dbHandle.getAllAclRequests(\n            false, userName, \"\", requestStatus, false, topic, env, aclType, isMyRequest, tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    aclReqs =\n        aclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(AclRequests::getRequesttime)))\n            .collect(Collectors.toList());\n\n    aclReqs = getAclRequestsPaged(aclReqs, pageNo, currentPage, tenantId);\n\n    return getAclRequestsModels(aclReqs, tenantId, userName);\n  }",
            "method_tgt": "public List<AclRequestsResponseModel> getAclRequests(\n      String pageNo,\n      String currentPage,\n      String requestStatus,\n      RequestOperationType requestOperationType,\n      String topic,\n      String env,\n      String search,\n      AclType aclType,\n      boolean isMyRequest) {\n\n    String userName = getCurrentUserName();\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    List<AclRequests> aclReqs =\n        dbHandle.getAllAclRequests(\n            false,\n            userName,\n            \"\",\n            requestStatus,\n            false,\n            requestOperationType,\n            topic,\n            env,\n            search,\n            aclType,\n            isMyRequest,\n            tenantId);\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    aclReqs =\n        aclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(AclRequests::getRequesttime)))\n            .collect(Collectors.toList());\n\n    aclReqs = getAclRequestsPaged(aclReqs, pageNo, currentPage, tenantId);\n\n    return getAclRequestsModels(aclReqs, tenantId, userName);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
            "method_src": "@Test\n  @Order(10)\n  public void getAclRequestsFirstAndSecondPage() {\n    String teamName = \"teamname\";\n    List<Topic> topicList = getTopicList();\n    List<UserInfo> userList = getUserInfoList();\n\n    stubUserInfo();\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.getAllAclRequests(\n            anyBoolean(),\n            anyString(),\n            anyString(),\n            anyString(),\n            anyBoolean(),\n            eq(null),\n            eq(null),\n            eq(null),\n            eq(false),\n            anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 15));\n    when(rolesPermissionsControllerService.getApproverRoles(anyString(), anyInt()))\n        .thenReturn(Collections.singletonList(\"USER\"));\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(topicList);\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(topicList);\n    when(handleDbRequests.selectAllUsersInfoForTeam(anyInt(), anyInt())).thenReturn(userList);\n\n    List<AclRequestsResponseModel> aclReqs =\n        aclControllerService.getAclRequests(\"1\", \"\", \"all\", null, null, null, false);\n    assertThat(aclReqs.size()).isEqualTo(10);\n    assertThat(aclReqs.get(0).getAcl_ip().size()).isEqualTo(3);\n    assertThat(aclReqs.get(0).getTeamname()).isEqualTo(teamName);\n\n    aclReqs = aclControllerService.getAclRequests(\"2\", \"\", \"all\", null, null, null, false);\n    assertThat(aclReqs.size()).isEqualTo(5);\n    assertThat(aclReqs.get(0).getApprovingTeamDetails()).contains(userList.get(0).getUsername());\n    assertThat(aclReqs.get(0).getApprovingTeamDetails()).contains(userList.get(1).getUsername());\n  }",
            "method_tgt": "@Test\n  @Order(10)\n  public void getAclRequestsFirstAndSecondPage() {\n    String teamName = \"teamname\";\n    List<Topic> topicList = getTopicList();\n    List<UserInfo> userList = getUserInfoList();\n\n    stubUserInfo();\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.getAllAclRequests(\n            anyBoolean(),\n            anyString(),\n            anyString(),\n            anyString(),\n            anyBoolean(),\n            eq(null),\n            eq(null),\n            eq(null),\n            eq(null),\n            eq(null),\n            eq(false),\n            anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 15));\n    when(rolesPermissionsControllerService.getApproverRoles(anyString(), anyInt()))\n        .thenReturn(Collections.singletonList(\"USER\"));\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(topicList);\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(topicList);\n    when(handleDbRequests.selectAllUsersInfoForTeam(anyInt(), anyInt())).thenReturn(userList);\n\n    List<AclRequestsResponseModel> aclReqs =\n        aclControllerService.getAclRequests(\"1\", \"\", \"all\", null, null, null, null, null, false);\n    assertThat(aclReqs.size()).isEqualTo(10);\n    assertThat(aclReqs.get(0).getAcl_ip().size()).isEqualTo(3);\n    assertThat(aclReqs.get(0).getTeamname()).isEqualTo(teamName);\n\n    aclReqs =\n        aclControllerService.getAclRequests(\"2\", \"\", \"all\", null, null, null, null, null, false);\n    assertThat(aclReqs.size()).isEqualTo(5);\n    assertThat(aclReqs.get(0).getApprovingTeamDetails()).contains(userList.get(0).getUsername());\n    assertThat(aclReqs.get(0).getApprovingTeamDetails()).contains(userList.get(1).getUsername());\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 27,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "19781130002f59cac5f1a26feeda4307742ad351",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo, String currentPage, String requestsType, String env, boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName, requestsType, env, isMyRequest, commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }",
            "method_tgt": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo,\n      String currentPage,\n      RequestOperationType requestOperationType,\n      String requestsType,\n      String env,\n      String wildcardSearch,\n      boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName,\n                requestsType,\n                requestOperationType,\n                env,\n                wildcardSearch,\n                isMyRequest,\n                commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(15)\n  public void getTopicRequestsOtherType() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    List<TopicRequest> topicRequests = getListTopicRequests();\n    topicRequests.get(0).setRequestOperationType(RequestOperationType.CLAIM.value);\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(false), anyInt()))\n        .thenReturn(topicRequests);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(utilMethods.getTopics());\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(utilMethods.getTopics());\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", \"created\", null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }",
            "method_tgt": "@Test\n  @Order(15)\n  public void getTopicRequestsOtherType() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    List<TopicRequest> topicRequests = getListTopicRequests();\n    topicRequests.get(0).setRequestOperationType(RequestOperationType.CLAIM.value);\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(null), eq(null), eq(false), anyInt()))\n        .thenReturn(topicRequests);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(utilMethods.getTopics());\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(utilMethods.getTopics());\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", null, \"created\", null, null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 28,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "19781130002f59cac5f1a26feeda4307742ad351",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo, String currentPage, String requestsType, String env, boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName, requestsType, env, isMyRequest, commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }",
            "method_tgt": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo,\n      String currentPage,\n      RequestOperationType requestOperationType,\n      String requestsType,\n      String env,\n      String wildcardSearch,\n      boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName,\n                requestsType,\n                requestOperationType,\n                env,\n                wildcardSearch,\n                isMyRequest,\n                commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(14)\n  public void getTopicRequestsClaimType() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    List<TopicRequest> topicRequests = getListTopicRequests();\n    topicRequests.get(0).setRequestOperationType(RequestOperationType.CLAIM.value);\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(false), anyInt()))\n        .thenReturn(topicRequests);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(utilMethods.getTopics());\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(utilMethods.getTopics());\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }",
            "method_tgt": "@Test\n  @Order(14)\n  public void getTopicRequestsClaimType() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    List<TopicRequest> topicRequests = getListTopicRequests();\n    topicRequests.get(0).setRequestOperationType(RequestOperationType.CLAIM.value);\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(null), eq(null), eq(false), anyInt()))\n        .thenReturn(topicRequests);\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt())).thenReturn(utilMethods.getTopics());\n    when(commonUtilsService.getFilteredTopicsForTenant(any())).thenReturn(utilMethods.getTopics());\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", null, \"all\", null, null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 29,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "19781130002f59cac5f1a26feeda4307742ad351",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/AclController.java",
            "method_src": "@RequestMapping(\n      value = \"/getAclRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"ALL\") RequestStatus requestStatus,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"isMyRequest\", required = false, defaultValue = \"false\")\n          boolean isMyRequest) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequests(\n            pageNo, currentPage, requestStatus.value, topic, env, aclType, isMyRequest),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getAclRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsResponseModel>> getAclRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestStatus\", defaultValue = \"ALL\") RequestStatus requestStatus,\n      @RequestParam(value = \"operationType\", required = false)\n          RequestOperationType requestOperationType,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"search\", required = false) String search,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType,\n      @RequestParam(value = \"isMyRequest\", required = false, defaultValue = \"false\")\n          boolean isMyRequest) {\n    return new ResponseEntity<>(\n        aclControllerService.getAclRequests(\n            pageNo,\n            currentPage,\n            requestStatus.value,\n            requestOperationType,\n            topic,\n            env,\n            search,\n            aclType,\n            isMyRequest),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/AclControllerTest.java",
            "method_src": "@Test\n  public void getAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsModel();\n\n    when(aclControllerService.getAclRequests(\"1\", \"\", \"all\", null, null, null, false))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  public void getAclRequests() throws Exception {\n\n    List<AclRequestsResponseModel> aclRequests = utilMethods.getAclRequestsModel();\n\n    when(aclControllerService.getAclRequests(\"1\", \"\", \"all\", null, null, null, null, null, false))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getAclRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 30,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "19781130002f59cac5f1a26feeda4307742ad351",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo, String currentPage, String requestsType, String env, boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName, requestsType, env, isMyRequest, commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }",
            "method_tgt": "public List<TopicRequestsResponseModel> getTopicRequests(\n      String pageNo,\n      String currentPage,\n      RequestOperationType requestOperationType,\n      String requestsType,\n      String env,\n      String wildcardSearch,\n      boolean isMyRequest) {\n    log.debug(\"getTopicRequests page {} requestsType {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> topicReqs =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAllTopicRequests(\n                userName,\n                requestsType,\n                requestOperationType,\n                env,\n                wildcardSearch,\n                isMyRequest,\n                commonUtilsService.getTenantId(userName));\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    topicReqs =\n        topicReqs.stream()\n            .filter(topicRequest -> allowedEnvIdSet.contains(topicRequest.getEnvironment()))\n            .sorted(Collections.reverseOrder(Comparator.comparing(TopicRequest::getRequesttime)))\n            .collect(Collectors.toList());\n\n    topicReqs = getTopicRequestsPaged(topicReqs, pageNo, currentPage);\n    return getTopicRequestModels(topicReqs, true);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(13)\n  public void getTopicRequests() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(false), anyInt()))\n        .thenReturn(getListTopicRequests());\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }",
            "method_tgt": "@Test\n  @Order(13)\n  public void getTopicRequests() {\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(handleDbRequests.getAllTopicRequests(\n            anyString(), anyString(), eq(null), eq(null), eq(null), eq(false), anyInt()))\n        .thenReturn(getListTopicRequests());\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFRATEAM\");\n\n    List<TopicRequestsResponseModel> listTopicRqs =\n        topicControllerService.getTopicRequests(\"1\", \"\", null, \"all\", null, null, false);\n    assertThat(listTopicRqs).hasSize(2);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 31,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "2d15ef0846892a6b104112a75d24a8574fc42a6b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/ClusterApiService.java",
            "method_src": "public ResponseEntity<ApiResponse> approveTopicRequests(\n      String topicName,\n      String topicRequestType,\n      int topicPartitions,\n      String replicationFactor,\n      String topicEnvId,\n      Map<String, String> advancedTopicConfiguration,\n      int tenantId)\n      throws KlawException {\n    log.info(\"approveTopicRequests {} {}\", topicName, topicEnvId);\n    getClusterApiProperties(tenantId);\n    ResponseEntity<ApiResponse> response;\n    ClusterTopicRequest clusterTopicRequest;\n    try {\n      Env envSelected = manageDatabase.getHandleDbRequests().selectEnvDetails(topicEnvId, tenantId);\n      KwClusters kwClusters =\n          manageDatabase\n              .getClusters(KafkaClustersType.KAFKA, tenantId)\n              .get(envSelected.getClusterId());\n      clusterTopicRequest =\n          ClusterTopicRequest.builder()\n              .env(kwClusters.getBootstrapServers())\n              .protocol(kwClusters.getProtocol())\n              .clusterName(kwClusters.getClusterName() + kwClusters.getClusterId())\n              .topicName(topicName)\n              .aclsNativeType(\n                  (Objects.equals(kwClusters.getKafkaFlavor(), KafkaFlavors.CONFLUENT_CLOUD.value))\n                      ? AclsNativeType.CONFLUENT_CLOUD\n                      : AclsNativeType.NATIVE)\n              .build();\n\n      String uri;\n      if (RequestOperationType.CREATE.value.equals(topicRequestType)\n          || RequestOperationType.PROMOTE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_CREATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .advancedTopicConfiguration(advancedTopicConfiguration)\n                .build();\n      } else if (RequestOperationType.UPDATE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_UPDATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .build();\n      } else {\n        uri = clusterConnUrl + URI_DELETE_TOPICS;\n      }\n\n      HttpHeaders headers = createHeaders(clusterApiUser);\n      headers.setContentType(MediaType.APPLICATION_JSON);\n      HttpEntity<ClusterTopicRequest> request = new HttpEntity<>(clusterTopicRequest, headers);\n      response = getRestTemplate().postForEntity(uri, request, ApiResponse.class);\n    } catch (Exception e) {\n      log.error(\"approveTopicRequests {}\", topicName, e);\n      throw new KlawException(\"Could not approve topic request. Please contact Administrator.\");\n    }\n    return response;\n  }",
            "method_tgt": "public ResponseEntity<ApiResponse> approveTopicRequests(\n      String topicName,\n      String topicRequestType,\n      int topicPartitions,\n      String replicationFactor,\n      String topicEnvId,\n      Map<String, String> advancedTopicConfiguration,\n      int tenantId,\n      Boolean deleteAssociatedSchema)\n      throws KlawException {\n    log.info(\"approveTopicRequests {} {}\", topicName, topicEnvId);\n    getClusterApiProperties(tenantId);\n    ResponseEntity<ApiResponse> response;\n    ClusterTopicRequest clusterTopicRequest;\n    try {\n      Env envSelected = manageDatabase.getHandleDbRequests().selectEnvDetails(topicEnvId, tenantId);\n      KwClusters kwClusters =\n          manageDatabase\n              .getClusters(KafkaClustersType.KAFKA, tenantId)\n              .get(envSelected.getClusterId());\n      clusterTopicRequest =\n          ClusterTopicRequest.builder()\n              .env(kwClusters.getBootstrapServers())\n              .protocol(kwClusters.getProtocol())\n              .clusterName(kwClusters.getClusterName() + kwClusters.getClusterId())\n              .topicName(topicName)\n              .aclsNativeType(\n                  (Objects.equals(kwClusters.getKafkaFlavor(), KafkaFlavors.CONFLUENT_CLOUD.value))\n                      ? AclsNativeType.CONFLUENT_CLOUD\n                      : AclsNativeType.NATIVE)\n              .build();\n\n      String uri;\n      if (RequestOperationType.CREATE.value.equals(topicRequestType)\n          || RequestOperationType.PROMOTE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_CREATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .advancedTopicConfiguration(advancedTopicConfiguration)\n                .build();\n      } else if (RequestOperationType.UPDATE.value.equals(topicRequestType)) {\n        uri = clusterConnUrl + URI_UPDATE_TOPICS;\n        clusterTopicRequest =\n            clusterTopicRequest.toBuilder()\n                .partitions(topicPartitions)\n                .replicationFactor(Short.parseShort(replicationFactor))\n                .build();\n      } else {\n        uri = clusterConnUrl + URI_DELETE_TOPICS;\n        if (deleteAssociatedSchema) {\n          // get associated schema env\n          Env schemaEnvSelected =\n              manageDatabase\n                  .getHandleDbRequests()\n                  .selectEnvDetails(envSelected.getAssociatedEnv().getId(), tenantId);\n          KwClusters kwClustersSchemaEnv =\n              manageDatabase\n                  .getClusters(KafkaClustersType.SCHEMA_REGISTRY, tenantId)\n                  .get(schemaEnvSelected.getClusterId());\n          clusterTopicRequest =\n              clusterTopicRequest.toBuilder()\n                  .deleteAssociatedSchema(true)\n                  .schemaClusterIdentification(\n                      kwClustersSchemaEnv.getClusterName() + kwClustersSchemaEnv.getClusterId())\n                  .schemaEnv(kwClustersSchemaEnv.getBootstrapServers())\n                  .schemaEnvProtocol(kwClustersSchemaEnv.getProtocol())\n                  .build();\n        }\n      }\n\n      HttpHeaders headers = createHeaders(clusterApiUser);\n      headers.setContentType(MediaType.APPLICATION_JSON);\n      HttpEntity<ClusterTopicRequest> request = new HttpEntity<>(clusterTopicRequest, headers);\n      response = getRestTemplate().postForEntity(uri, request, ApiResponse.class);\n    } catch (Exception e) {\n      log.error(\"approveTopicRequests {}\", topicName, e);\n      throw new KlawException(\"Could not approve topic request. Please contact Administrator.\");\n    }\n    return response;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/ClusterApiServiceTest.java",
            "method_src": "@Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  @Order(7)\n  public void approveTopicRequestsSuccess() throws KlawException {\n    ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build();\n    ResponseEntity<ApiResponse> response =\n        new ResponseEntity<>(\n            ApiResponse.builder().result(ApiResultStatus.SUCCESS.value).build(), HttpStatus.OK);\n\n    String topicName = \"testtopic\";\n    TopicRequest topicRequest = new TopicRequest();\n    topicRequest.setTopicname(\"testtopic\");\n    topicRequest.setEnvironment(\"DEV\");\n    topicRequest.setRequestOperationType(RequestOperationType.CREATE.value);\n\n    when(handleDbRequests.selectEnvDetails(anyString(), anyInt())).thenReturn(this.env);\n    when(manageDatabase.getClusters(any(KafkaClustersType.class), anyInt()))\n        .thenReturn(clustersHashMap);\n    when(clustersHashMap.get(any())).thenReturn(kwClusters);\n    when(kwClusters.getBootstrapServers()).thenReturn(BOOTSRAP_SERVERS);\n    when(kwClusters.getProtocol()).thenReturn(KafkaSupportedProtocol.PLAINTEXT);\n    when(kwClusters.getClusterName()).thenReturn(\"cluster\");\n    when(restTemplate.postForEntity(Mockito.anyString(), Mockito.any(), eq(ApiResponse.class)))\n        .thenReturn(response);\n\n    ResponseEntity<ApiResponse> response1 =\n        clusterApiService.approveTopicRequests(\n            topicName, RequestOperationType.CREATE.value, 1, \"1\", \"\", null, 1, false);\n    assertThat(Objects.requireNonNull(response1.getBody()).getResult())\n        .isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 32,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "91ba7c186812119702a6147074e80edae6e90e03",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public ApiResponse declineTopicRequests(String topicId, String reasonForDecline)\n      throws KlawException {\n    log.info(\"declineTopicRequests {} {}\", topicId, reasonForDecline);\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.APPROVE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    String userName = getUserName();\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    TopicRequest topicRequest =\n        dbHandle.selectTopicRequestsForTopic(\n            Integer.parseInt(topicId), commonUtilsService.getTenantId(userName));\n\n    if (!RequestStatus.CREATED.value.equals(topicRequest.getTopicstatus())) {\n      return ApiResponse.builder().result(\"This request does not exist anymore.\").build();\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    if (!allowedEnvIdSet.contains(topicRequest.getEnvironment())) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    try {\n      String result = dbHandle.declineTopicRequest(topicRequest, userName);\n      mailService.sendMail(\n          topicRequest.getTopicname(),\n          null,\n          reasonForDecline,\n          topicRequest.getRequestor(),\n          dbHandle,\n          TOPIC_REQUEST_DENIED,\n          commonUtilsService.getLoginUrl());\n\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse declineTopicRequests(String topicId, String reasonForDecline)\n      throws KlawException {\n    log.info(\"declineTopicRequests {} {}\", topicId, reasonForDecline);\n    if (commonUtilsService.isNotAuthorizedUser(getPrincipal(), PermissionType.APPROVE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    String userName = getUserName();\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n    TopicRequest topicRequest =\n        dbHandle.selectTopicRequestsForTopic(\n            Integer.parseInt(topicId), commonUtilsService.getTenantId(userName));\n\n    if (!RequestStatus.CREATED.value.equals(topicRequest.getRequestStatus())) {\n      return ApiResponse.builder().result(\"This request does not exist anymore.\").build();\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userName);\n    if (!allowedEnvIdSet.contains(topicRequest.getEnvironment())) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    try {\n      String result = dbHandle.declineTopicRequest(topicRequest, userName);\n      mailService.sendMail(\n          topicRequest.getTopicname(),\n          null,\n          reasonForDecline,\n          topicRequest.getRequestor(),\n          dbHandle,\n          TOPIC_REQUEST_DENIED,\n          commonUtilsService.getLoginUrl());\n\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setTopicstatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }",
            "method_tgt": "@Test\n  @Order(40)\n  public void declineTopicRequestsFailureRequestDoesNotExist() throws KlawException {\n    String topicName = \"testtopic\";\n    int topicId = 1001;\n    TopicRequest topicRequest = getTopicRequest(topicName);\n    topicRequest.setRequestStatus(RequestStatus.APPROVED.value);\n\n    stubUserInfo();\n    when(handleDbRequests.selectTopicRequestsForTopic(anyInt(), anyInt())).thenReturn(topicRequest);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(handleDbRequests.declineTopicRequest(any(), anyString()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse resultResp = topicControllerService.declineTopicRequests(topicId + \"\", \"Reason\");\n\n    assertThat(resultResp.getResult()).isEqualTo(\"This request does not exist anymore.\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 33,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "dcf22786af04641156c0f32913dccf61d379726b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java",
            "method_src": "public String deleteSchemaRequest(int avroSchemaId, int tenantId) {\n    log.debug(\"deleteSchemaRequest {}\", avroSchemaId);\n    SchemaRequestID schemaRequestID = new SchemaRequestID(avroSchemaId, tenantId);\n    Optional<SchemaRequest> schemaReq = schemaRequestRepo.findById(schemaRequestID);\n    if (schemaReq.isPresent()) {\n      schemaReq.get().setTopicstatus(\"deleted\");\n      schemaRequestRepo.save(schemaReq.get());\n    }\n    return ApiResultStatus.SUCCESS.value;\n  }",
            "method_tgt": "public String deleteSchemaRequest(int avroSchemaId, String userName, int tenantId) {\n    log.debug(\"deleteSchemaRequest {}\", avroSchemaId);\n    SchemaRequestID schemaRequestID = new SchemaRequestID(avroSchemaId, tenantId);\n    Optional<SchemaRequest> schemaReq = schemaRequestRepo.findById(schemaRequestID);\n    if (schemaReq.isPresent() && schemaReq.get().getUsername().equals(userName)) {\n      schemaReq.get().setTopicstatus(\"deleted\");\n      schemaRequestRepo.save(schemaReq.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
            "method_src": "@Test\n  public void deleteSchemaRequest() {\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  public void deleteSchemaRequest() {\n    SchemaRequest req = new SchemaRequest();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(schemaRequestRepo.findById(new SchemaRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteSchemaRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 34,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "0f5599f424887afca35ac5ede9715fd55e89514b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public ApiResponse deleteTopicRequests(String topicId) throws KlawException {\n    log.info(\"deleteTopicRequests {}\", topicId);\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_CREATE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n    try {\n      String deleteTopicReqStatus =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTopicRequest(\n                  Integer.parseInt(topicId), commonUtilsService.getTenantId(getUserName()));\n\n      return ApiResponse.builder().result(deleteTopicReqStatus).build();\n    } catch (Exception e) {\n      log.error(e.getMessage());\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse deleteTopicRequests(String topicId) throws KlawException {\n    log.info(\"deleteTopicRequests {}\", topicId);\n\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_CREATE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n    String userName = getUserName();\n    try {\n      String deleteTopicReqStatus =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteTopicRequest(\n                  Integer.parseInt(topicId),\n                  userName,\n                  commonUtilsService.getTenantId(getUserName()));\n\n      return ApiResponse.builder().result(deleteTopicReqStatus).build();\n    } catch (Exception e) {\n      log.error(e.getMessage());\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(22)\n  public void deleteTopicRequests() throws KlawException {\n    when(handleDbRequests.deleteTopicRequest(anyInt(), anyInt()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    ApiResponse resultResp = topicControllerService.deleteTopicRequests(\"1001\");\n    assertThat(resultResp.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  @Order(22)\n  public void deleteTopicRequests() throws KlawException {\n    when(handleDbRequests.deleteTopicRequest(anyInt(), anyString(), anyInt()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    when(mailService.getUserName(any())).thenReturn(\"uiuser1\");\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    ApiResponse resultResp = topicControllerService.deleteTopicRequests(\"1001\");\n    assertThat(resultResp.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 35,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "0f5599f424887afca35ac5ede9715fd55e89514b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/TopicController.java",
            "method_src": "public ResponseEntity<List<TopicRequestModel>> getTopicRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"all\") String requestsType) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequests(pageNo, currentPage, requestsType), HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getTopicRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"all\") String requestsType,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"isMyRequest\", required = false, defaultValue = \"false\")\n          boolean isMyRequest) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequests(\n            pageNo, currentPage, requestsType, env, isMyRequest),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
            "method_src": "@Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\")).thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  @Order(3)\n  public void getTopicRequests() throws Exception {\n    List<TopicRequestModel> topicRequests = utilMethods.getTopicRequestsModel();\n\n    when(topicControllerService.getTopicRequests(\"1\", \"\", \"all\", null, false))\n        .thenReturn(topicRequests);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequests\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .param(\"pageNo\", \"1\")\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 36,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "0f5599f424887afca35ac5ede9715fd55e89514b",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java",
            "method_src": "public String deleteTopicRequest(int topicId, int tenantId) {\n    log.debug(\"deleteTopicRequest {}\", topicId);\n\n    TopicRequestID topicRequestID = new TopicRequestID();\n    topicRequestID.setTenantId(tenantId);\n    topicRequestID.setTopicid(topicId);\n\n    Optional<TopicRequest> topicReq = topicRequestsRepo.findById(topicRequestID);\n    if (topicReq.isPresent()) {\n      topicReq.get().setTopicstatus(\"deleted\");\n      topicRequestsRepo.save(topicReq.get());\n    }\n    return ApiResultStatus.SUCCESS.value;\n  }",
            "method_tgt": "public String deleteTopicRequest(int topicId, String userName, int tenantId) {\n    log.debug(\"deleteTopicRequest {}\", topicId);\n\n    TopicRequestID topicRequestID = new TopicRequestID();\n    topicRequestID.setTenantId(tenantId);\n    topicRequestID.setTopicid(topicId);\n\n    Optional<TopicRequest> topicReq = topicRequestsRepo.findById(topicRequestID);\n    // UserName is transient and is not set in the database but the requestor is. Both are set to\n    // the userName when the request is created.\n    if (topicReq.isPresent() && topicReq.get().getRequestor().equals(userName)) {\n      topicReq.get().setTopicstatus(\"deleted\");\n      topicRequestsRepo.save(topicReq.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
            "method_src": "@Test\n  public void deleteTopicRequest() {\n    String result = deleteDataJdbc.deleteTopicRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  public void deleteTopicRequest() {\n    TopicRequestID id = new TopicRequestID(1010, 1);\n    when(topicRequestsRepo.findById(eq(id)))\n        .thenReturn(createTopicRequest(\"uiuser1\", RequestStatus.CREATED));\n    String result = deleteDataJdbc.deleteTopicRequest(1010, \"uiuser1\", 1);\n    assertThat(result).contains(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 37,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "4f5187e3796f1c66846582dea09d71fcae407822",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java",
            "method_src": "public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), commonUtilsService.getTenantId(getCurrentUserName()));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      String userName = getCurrentUserName();\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), userName, commonUtilsService.getTenantId(userName));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
            "method_src": "@Test\n  @Order(13)\n  public void deleteAclRequests() throws KlawException {\n    String req_no = \"1001\";\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(handleDbRequests.deleteAclRequest(Integer.parseInt(req_no), 1))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse result = aclControllerService.deleteAclRequests(req_no);\n    assertThat(result.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  @Order(13)\n  public void deleteAclRequests() throws KlawException {\n    String req_no = \"1001\";\n    when(mailService.getCurrentUserName()).thenReturn(\"testuser\");\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyString(), anyInt()))\n        .thenReturn(ApiResultStatus.SUCCESS.value);\n    ApiResponse result = aclControllerService.deleteAclRequests(req_no);\n    assertThat(result.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 38,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "4f5187e3796f1c66846582dea09d71fcae407822",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java",
            "method_src": "public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), commonUtilsService.getTenantId(getCurrentUserName()));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }",
            "method_tgt": "public ApiResponse deleteAclRequests(String req_no) throws KlawException {\n    try {\n      if (commonUtilsService.isNotAuthorizedUser(\n          getPrincipal(), PermissionType.REQUEST_CREATE_SUBSCRIPTIONS)) {\n        return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n      }\n      String userName = getCurrentUserName();\n      log.info(\"deleteAclRequests {}\", req_no);\n      String result =\n          manageDatabase\n              .getHandleDbRequests()\n              .deleteAclRequest(\n                  Integer.parseInt(req_no), userName, commonUtilsService.getTenantId(userName));\n      return ApiResponse.builder().result(result).build();\n    } catch (Exception e) {\n      log.error(\"Exception \", e);\n      throw new KlawException(e.getMessage());\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
            "method_src": "@Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }",
            "method_tgt": "@Test\n  @Order(15)\n  public void deleteAclRequestsFailure() {\n    String req_no = \"1001\";\n    when(mailService.getCurrentUserName()).thenReturn(\"testuser\");\n    when(handleDbRequests.deleteAclRequest(anyInt(), anyString(), anyInt()))\n        .thenThrow(new RuntimeException(\"failure in deleting request\"));\n    KlawException thrown =\n        Assertions.assertThrows(\n            KlawException.class, () -> aclControllerService.deleteAclRequests(req_no));\n    assertThat(thrown.getMessage()).isEqualTo(\"failure in deleting request\");\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 39,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "4f5187e3796f1c66846582dea09d71fcae407822",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbc.java",
            "method_src": "public String deleteAclRequest(int aclId, int tenantId) {\n    log.debug(\"deleteAclRequest {}\", aclId);\n    AclRequestID aclRequestID = new AclRequestID();\n    aclRequestID.setReq_no(aclId);\n    aclRequestID.setTenantId(tenantId);\n    Optional<AclRequests> optAclRequests = aclRequestsRepo.findById(aclRequestID);\n    if (optAclRequests.isPresent()) {\n      optAclRequests.get().setAclstatus(\"deleted\");\n      aclRequestsRepo.save(optAclRequests.get());\n    }\n\n    return ApiResultStatus.SUCCESS.value;\n  }",
            "method_tgt": "public String deleteAclRequest(int aclId, String userName, int tenantId) {\n    log.debug(\"deleteAclRequest {}\", aclId);\n    AclRequestID aclRequestID = new AclRequestID();\n    aclRequestID.setReq_no(aclId);\n    aclRequestID.setTenantId(tenantId);\n    Optional<AclRequests> optAclRequests = aclRequestsRepo.findById(aclRequestID);\n    if (optAclRequests.isPresent() && optAclRequests.get().getUsername().equals(userName)) {\n      optAclRequests.get().setAclstatus(\"deleted\");\n      aclRequestsRepo.save(optAclRequests.get());\n      return ApiResultStatus.SUCCESS.value;\n    }\n\n    return ApiResultStatus.FAILURE.value\n        + \" Unable to verify ownership of this request. you may only delete your own requests.\";\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/helpers/db/rdbms/DeleteDataJdbcTest.java",
            "method_src": "@Test\n  public void deleteAclRequest() {\n    String result = deleteDataJdbc.deleteAclRequest(1001, 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }",
            "method_tgt": "@Test\n  public void deleteAclRequest() {\n    AclRequests req = new AclRequests();\n    req.setUsername(\"uiuser1\");\n    req.setReq_no(1001);\n    when(aclRequestsRepo.findById(new AclRequestID(1001, 1))).thenReturn(Optional.of(req));\n    String result = deleteDataJdbc.deleteAclRequest(1001, \"uiuser1\", 1);\n    assertThat(result).isEqualTo(ApiResultStatus.SUCCESS.value);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 40,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "caf23a540ca209584545c1889437adcdaae9cb2a",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/RequestStatisticsService.java",
            "method_src": "public RequestsCountOverview getRequestsCountOverview(RequestMode requestMode) {\n    RequestsCountOverview requestsCountOverview = new RequestsCountOverview();\n    Set<RequestEntityStatusCount> requestEntityStatusCountSet = new HashSet<>();\n    updateRequestsCountOverviewForTopics(requestEntityStatusCountSet, requestMode);\n\n    requestsCountOverview.setRequestEntityStatistics(requestEntityStatusCountSet);\n    return requestsCountOverview;\n  }",
            "method_tgt": "public RequestsCountOverview getRequestsCountOverview(RequestMode requestMode) {\n    RequestsCountOverview requestsCountOverview = new RequestsCountOverview();\n    Set<RequestEntityStatusCount> requestEntityStatusCountSet = new HashSet<>();\n\n    // get topics count and update requestsCountOverview\n    Map<String, Map<String, Long>> topicRequestCountsMap =\n        manageDatabase\n            .getHandleDbRequests()\n            .getTopicRequestsCounts(\n                commonUtilsService.getTeamId(getUserName()),\n                requestMode,\n                commonUtilsService.getTenantId(getUserName()));\n    updateRequestsCountOverview(\n        topicRequestCountsMap, requestEntityStatusCountSet, RequestEntityType.TOPIC);\n\n    // get acls count and update requestsCountOverview\n    Map<String, Map<String, Long>> aclsRequestCountsMap =\n        manageDatabase\n            .getHandleDbRequests()\n            .getAclRequestsCounts(\n                commonUtilsService.getTeamId(getUserName()),\n                requestMode,\n                commonUtilsService.getTenantId(getUserName()));\n    updateRequestsCountOverview(\n        aclsRequestCountsMap, requestEntityStatusCountSet, RequestEntityType.ACL);\n\n    // get schema reqs count and update requestsCountOverview\n    Map<String, Map<String, Long>> schemasRequestCountsMap =\n        manageDatabase\n            .getHandleDbRequests()\n            .getSchemaRequestsCounts(\n                commonUtilsService.getTeamId(getUserName()),\n                requestMode,\n                commonUtilsService.getTenantId(getUserName()));\n    updateRequestsCountOverview(\n        schemasRequestCountsMap, requestEntityStatusCountSet, RequestEntityType.SCHEMA);\n\n    // get connector reqs count and update requestsCountOverview\n    Map<String, Map<String, Long>> connectorRequestCountsMap =\n        manageDatabase\n            .getHandleDbRequests()\n            .getConnectorRequestsCounts(\n                commonUtilsService.getTeamId(getUserName()),\n                requestMode,\n                commonUtilsService.getTenantId(getUserName()));\n    updateRequestsCountOverview(\n        connectorRequestCountsMap, requestEntityStatusCountSet, RequestEntityType.CONNECTOR);\n\n    requestsCountOverview.setRequestEntityStatistics(requestEntityStatusCountSet);\n    return requestsCountOverview;\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/RequestStatisticsServiceTest.java",
            "method_src": "@Test\n  public void getRequestsCountOverview() {\n    stubUserInfo();\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(handleDbRequests.getTopicRequestsCounts(anyInt(), eq(RequestMode.MY_REQUESTS), anyInt()))\n        .thenReturn(utilMethods.getRequestCounts());\n    RequestsCountOverview requestsCountOverview =\n        requestStatisticsService.getRequestsCountOverview(RequestMode.MY_REQUESTS);\n    Set<RequestEntityStatusCount> requestEntityStatistics =\n        requestsCountOverview.getRequestEntityStatistics();\n    List<RequestEntityStatusCount> requestEntityStatusCountArrayList =\n        new ArrayList<>(requestEntityStatistics);\n\n    assertThat(requestEntityStatusCountArrayList.get(0).getRequestEntityType())\n        .isEqualTo(RequestEntityType.TOPIC);\n    assertThat(requestEntityStatusCountArrayList.get(0).getRequestStatusCountSet()).hasSize(2);\n    assertThat(requestEntityStatusCountArrayList.get(0).getRequestsOperationTypeCountSet())\n        .hasSize(2);\n  }",
            "method_tgt": "@Test\n  public void getRequestsCountOverview() {\n    stubUserInfo();\n    when(commonUtilsService.getTenantId(userDetails.getUsername())).thenReturn(1);\n    when(handleDbRequests.getTopicRequestsCounts(anyInt(), eq(RequestMode.MY_REQUESTS), anyInt()))\n        .thenReturn(utilMethods.getRequestCounts());\n    when(handleDbRequests.getAclRequestsCounts(anyInt(), eq(RequestMode.MY_REQUESTS), anyInt()))\n        .thenReturn(utilMethods.getRequestCounts());\n    when(handleDbRequests.getSchemaRequestsCounts(anyInt(), eq(RequestMode.MY_REQUESTS), anyInt()))\n        .thenReturn(utilMethods.getRequestCounts());\n    when(handleDbRequests.getConnectorRequestsCounts(\n            anyInt(), eq(RequestMode.MY_REQUESTS), anyInt()))\n        .thenReturn(utilMethods.getRequestCounts());\n    RequestsCountOverview requestsCountOverview =\n        requestStatisticsService.getRequestsCountOverview(RequestMode.MY_REQUESTS);\n    Set<RequestEntityStatusCount> requestEntityStatistics =\n        requestsCountOverview.getRequestEntityStatistics();\n    List<RequestEntityStatusCount> requestEntityStatusCountArrayList =\n        new ArrayList<>(requestEntityStatistics);\n\n    assertThat(requestEntityStatusCountArrayList).hasSize(4);\n\n    boolean topicEntityFound = false,\n        aclEntityFound = false,\n        schemaEntityFound = false,\n        connectorEntityFound = false;\n    for (RequestEntityStatusCount requestEntityStatusCount : requestEntityStatusCountArrayList) {\n      if (requestEntityStatusCount.getRequestEntityType() == RequestEntityType.TOPIC) {\n        topicEntityFound = true;\n      }\n      if (requestEntityStatusCount.getRequestEntityType() == RequestEntityType.ACL) {\n        aclEntityFound = true;\n      }\n      if (requestEntityStatusCount.getRequestEntityType() == RequestEntityType.SCHEMA) {\n        schemaEntityFound = true;\n      }\n      if (requestEntityStatusCount.getRequestEntityType() == RequestEntityType.CONNECTOR) {\n        connectorEntityFound = true;\n      }\n    }\n\n    assertThat(topicEntityFound).isTrue();\n    assertThat(requestEntityStatusCountArrayList.get(0).getRequestStatusCountSet()).hasSize(2);\n    assertThat(requestEntityStatusCountArrayList.get(0).getRequestsOperationTypeCountSet())\n        .hasSize(2);\n\n    assertThat(aclEntityFound).isTrue();\n    assertThat(requestEntityStatusCountArrayList.get(1).getRequestStatusCountSet()).hasSize(2);\n    assertThat(requestEntityStatusCountArrayList.get(1).getRequestsOperationTypeCountSet())\n        .hasSize(2);\n\n    assertThat(schemaEntityFound).isTrue();\n    assertThat(requestEntityStatusCountArrayList.get(2).getRequestStatusCountSet()).hasSize(2);\n    assertThat(requestEntityStatusCountArrayList.get(2).getRequestsOperationTypeCountSet())\n        .hasSize(2);\n\n    assertThat(connectorEntityFound).isTrue();\n    assertThat(requestEntityStatusCountArrayList.get(3).getRequestStatusCountSet()).hasSize(2);\n    assertThat(requestEntityStatusCountArrayList.get(3).getRequestsOperationTypeCountSet())\n        .hasSize(2);\n  }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 41,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "df96ad15bbfe5647082c54622ea9b8efeb96de76",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public List<TopicRequestModel> getTopicRequestsForApprover(\n      String pageNo, String currentPage, String requestsType) {\n    log.debug(\"getCreatedTopicRequests {} {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> createdTopicReqList;\n    int tenantId = commonUtilsService.getTenantId(userName);\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(userName, requestsType, false, tenantId);\n    } else {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(userName, requestsType, true, tenantId);\n    }\n\n    createdTopicReqList = getTopicRequestsFilteredForTenant(createdTopicReqList);\n    createdTopicReqList = getTopicRequestsPaged(createdTopicReqList, pageNo, currentPage);\n\n    return updateCreateTopicReqsList(createdTopicReqList, tenantId);\n  }",
            "method_tgt": "public List<TopicRequestModel> getTopicRequestsForApprover(\n      String pageNo,\n      String currentPage,\n      String requestsType,\n      Integer teamId,\n      String env,\n      String wildcardSearch) {\n    if (log.isDebugEnabled()) {\n      log.debug(\n          \"getCreatedTopicRequests {} {} {} {} {}\",\n          pageNo,\n          requestsType,\n          teamId,\n          env,\n          wildcardSearch);\n    }\n\n    String userName = getUserName();\n    List<TopicRequest> createdTopicReqList;\n    int tenantId = commonUtilsService.getTenantId(userName);\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(\n                  userName, requestsType, false, tenantId, teamId, env, wildcardSearch);\n    } else {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(\n                  userName, requestsType, true, tenantId, teamId, env, wildcardSearch);\n    }\n\n    createdTopicReqList = getTopicRequestsFilteredForTenant(createdTopicReqList);\n    createdTopicReqList = getTopicRequestsPaged(createdTopicReqList, pageNo, currentPage);\n\n    return updateCreateTopicReqsList(createdTopicReqList, tenantId);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(21)\n  public void getCreatedTopicRequestsWithMoreElements() {\n    List<TopicRequest> listTopicReqs = new ArrayList<>();\n    listTopicReqs.add(getTopicRequest(\"topic1\"));\n    listTopicReqs.add(getTopicRequest(\"topic2\"));\n    listTopicReqs.add(getTopicRequest(\"topic3\"));\n    listTopicReqs.add(getTopicRequest(\"topic4\"));\n    listTopicReqs.add(getTopicRequest(\"topic5\"));\n\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedTopicRequests(anyString(), anyString(), anyBoolean(), anyInt()))\n        .thenReturn(listTopicReqs);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFTATEAM\");\n\n    List<TopicRequestModel> topicList =\n        topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"all\");\n\n    assertThat(topicList).hasSize(5);\n    assertThat(topicList.get(0).getTopicpartitions()).isEqualTo(2);\n    assertThat(topicList.get(0).getTopicname()).isEqualTo(\"topic1\");\n    assertThat(topicList.get(1).getTopicname()).isEqualTo(\"topic2\");\n  }",
            "method_tgt": "@Test\n  @Order(21)\n  public void getCreatedTopicRequestsWithMoreElements() {\n    List<TopicRequest> listTopicReqs = new ArrayList<>();\n    listTopicReqs.add(getTopicRequest(\"topic1\"));\n    listTopicReqs.add(getTopicRequest(\"topic2\"));\n    listTopicReqs.add(getTopicRequest(\"topic3\"));\n    listTopicReqs.add(getTopicRequest(\"topic4\"));\n    listTopicReqs.add(getTopicRequest(\"topic5\"));\n\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedTopicRequests(\n            anyString(), anyString(), anyBoolean(), anyInt(), eq(null), eq(null), eq(null)))\n        .thenReturn(listTopicReqs);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFTATEAM\");\n\n    List<TopicRequestModel> topicList =\n        topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"all\", null, null, null);\n\n    assertThat(topicList).hasSize(5);\n    assertThat(topicList.get(0).getTopicpartitions()).isEqualTo(2);\n    assertThat(topicList.get(0).getTopicname()).isEqualTo(\"topic1\");\n    assertThat(topicList.get(1).getTopicname()).isEqualTo(\"topic2\");\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 42,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "df96ad15bbfe5647082c54622ea9b8efeb96de76",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/TopicController.java",
            "method_src": "@RequestMapping(\n      value = \"/getTopicRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequestsForApprover(pageNo, currentPage, requestsType),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getTopicRequestsForApprover\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<TopicRequestModel>> getTopicRequestsForApprover(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType,\n      @RequestParam(value = \"teamId\", required = false) Integer teamId,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"search\", required = false) String search) {\n    return new ResponseEntity<>(\n        topicControllerService.getTopicRequestsForApprover(\n            pageNo, currentPage, requestsType, teamId, env, search),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/TopicControllerTest.java",
            "method_src": "@Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\"))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  @Order(5)\n  public void getCreatedTopicRequests() throws Exception {\n    List<TopicRequestModel> topicReqs = utilMethods.getTopicRequestsList();\n    when(topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"created\", null, null, null))\n        .thenReturn(topicReqs);\n\n    mvc.perform(\n            MockMvcRequestBuilders.get(\"/getTopicRequestsForApprover\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 43,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "df96ad15bbfe5647082c54622ea9b8efeb96de76",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public List<TopicRequestModel> getTopicRequestsForApprover(\n      String pageNo, String currentPage, String requestsType) {\n    log.debug(\"getCreatedTopicRequests {} {}\", pageNo, requestsType);\n    String userName = getUserName();\n    List<TopicRequest> createdTopicReqList;\n    int tenantId = commonUtilsService.getTenantId(userName);\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(userName, requestsType, false, tenantId);\n    } else {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(userName, requestsType, true, tenantId);\n    }\n\n    createdTopicReqList = getTopicRequestsFilteredForTenant(createdTopicReqList);\n    createdTopicReqList = getTopicRequestsPaged(createdTopicReqList, pageNo, currentPage);\n\n    return updateCreateTopicReqsList(createdTopicReqList, tenantId);\n  }",
            "method_tgt": "public List<TopicRequestModel> getTopicRequestsForApprover(\n      String pageNo,\n      String currentPage,\n      String requestsType,\n      Integer teamId,\n      String env,\n      String wildcardSearch) {\n    if (log.isDebugEnabled()) {\n      log.debug(\n          \"getCreatedTopicRequests {} {} {} {} {}\",\n          pageNo,\n          requestsType,\n          teamId,\n          env,\n          wildcardSearch);\n    }\n\n    String userName = getUserName();\n    List<TopicRequest> createdTopicReqList;\n    int tenantId = commonUtilsService.getTenantId(userName);\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(\n                  userName, requestsType, false, tenantId, teamId, env, wildcardSearch);\n    } else {\n      createdTopicReqList =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedTopicRequests(\n                  userName, requestsType, true, tenantId, teamId, env, wildcardSearch);\n    }\n\n    createdTopicReqList = getTopicRequestsFilteredForTenant(createdTopicReqList);\n    createdTopicReqList = getTopicRequestsPaged(createdTopicReqList, pageNo, currentPage);\n\n    return updateCreateTopicReqsList(createdTopicReqList, tenantId);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(20)\n  public void getCreatedTopicRequests() {\n    List<TopicRequest> listTopicReqs = new ArrayList<>();\n    listTopicReqs.add(getCorrectTopicDao());\n    listTopicReqs.add(getCorrectTopicDao());\n\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedTopicRequests(anyString(), anyString(), anyBoolean(), anyInt()))\n        .thenReturn(listTopicReqs);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFTATEAM\");\n\n    List<TopicRequestModel> topicList =\n        topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"all\");\n\n    assertThat(topicList).hasSize(2);\n  }",
            "method_tgt": "@Test\n  @Order(20)\n  public void getCreatedTopicRequests() {\n    List<TopicRequest> listTopicReqs = new ArrayList<>();\n    listTopicReqs.add(getCorrectTopicDao());\n    listTopicReqs.add(getCorrectTopicDao());\n\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedTopicRequests(\n            anyString(), anyString(), anyBoolean(), anyInt(), eq(null), eq(null), eq(null)))\n        .thenReturn(listTopicReqs);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt())).thenReturn(\"1\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(\"INFTATEAM\");\n\n    List<TopicRequestModel> topicList =\n        topicControllerService.getTopicRequestsForApprover(\"1\", \"\", \"all\", null, null, null);\n\n    assertThat(topicList).hasSize(2);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 44,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "bfc8377726a2b46e8f2c4a2f5d8dd7f88f4fbfc4",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java",
            "method_src": "public List<AclRequestsModel> getCreatedAclRequests(\n      String pageNo, String currentPage, String requestsType) {\n    log.debug(\"getCreatedAclRequests {} {}\", pageNo, requestsType);\n    String userDetails = getCurrentUserName();\n    List<AclRequests> createdAclReqs;\n    int tenantId = commonUtilsService.getTenantId(userDetails);\n\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(userDetails, requestsType, false, tenantId);\n    } else {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(userDetails, requestsType, true, tenantId);\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userDetails);\n    createdAclReqs =\n        createdAclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .collect(Collectors.toList());\n\n    return getAclRequestModelPaged(\n        updateCreatAclReqsList(createdAclReqs, tenantId), pageNo, currentPage, tenantId);\n  }",
            "method_tgt": "public List<AclRequestsModel> getCreatedAclRequests(\n      String pageNo,\n      String currentPage,\n      String requestsType,\n      String topic,\n      String environment,\n      AclType aclType) {\n    log.debug(\"getCreatedAclRequests {} {}\", pageNo, requestsType);\n    String userDetails = getCurrentUserName();\n    List<AclRequests> createdAclReqs;\n    int tenantId = commonUtilsService.getTenantId(userDetails);\n\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(\n                  userDetails, requestsType, false, topic, environment, aclType, tenantId);\n    } else {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(\n                  userDetails, requestsType, true, topic, environment, aclType, tenantId);\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userDetails);\n    createdAclReqs =\n        createdAclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .collect(Collectors.toList());\n\n    return getAclRequestModelPaged(\n        updateCreatAclReqsList(createdAclReqs, tenantId), pageNo, currentPage, tenantId);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
            "method_src": "@Test\n  @Order(12)\n  public void getCreatedAclRequestsNotAuthorizedForAllTeams() {\n    String teamName = \"teamname\";\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedAclRequestsByStatus(\n            anyString(), anyString(), anyBoolean(), anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 16));\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(true);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n\n    List<AclRequestsModel> listReqs = aclControllerService.getCreatedAclRequests(\"\", \"\", \"\");\n    assertThat(listReqs.size()).isEqualTo(10);\n  }",
            "method_tgt": "@Test\n  @Order(12)\n  public void getCreatedAclRequestsNotAuthorizedForAllTeams() {\n    String teamName = \"teamname\";\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedAclRequestsByStatus(\n            anyString(), anyString(), anyBoolean(), any(), any(), any(), anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 16));\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(true);\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n\n    List<AclRequestsModel> listReqs =\n        aclControllerService.getCreatedAclRequests(\"\", \"\", \"\", null, null, null);\n    assertThat(listReqs.size()).isEqualTo(10);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 45,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "bfc8377726a2b46e8f2c4a2f5d8dd7f88f4fbfc4",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/AclControllerService.java",
            "method_src": "public List<AclRequestsModel> getCreatedAclRequests(\n      String pageNo, String currentPage, String requestsType) {\n    log.debug(\"getCreatedAclRequests {} {}\", pageNo, requestsType);\n    String userDetails = getCurrentUserName();\n    List<AclRequests> createdAclReqs;\n    int tenantId = commonUtilsService.getTenantId(userDetails);\n\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(userDetails, requestsType, false, tenantId);\n    } else {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(userDetails, requestsType, true, tenantId);\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userDetails);\n    createdAclReqs =\n        createdAclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .collect(Collectors.toList());\n\n    return getAclRequestModelPaged(\n        updateCreatAclReqsList(createdAclReqs, tenantId), pageNo, currentPage, tenantId);\n  }",
            "method_tgt": "public List<AclRequestsModel> getCreatedAclRequests(\n      String pageNo,\n      String currentPage,\n      String requestsType,\n      String topic,\n      String environment,\n      AclType aclType) {\n    log.debug(\"getCreatedAclRequests {} {}\", pageNo, requestsType);\n    String userDetails = getCurrentUserName();\n    List<AclRequests> createdAclReqs;\n    int tenantId = commonUtilsService.getTenantId(userDetails);\n\n    // get requests relevant to your teams or all teams\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.APPROVE_ALL_REQUESTS_TEAMS)) {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(\n                  userDetails, requestsType, false, topic, environment, aclType, tenantId);\n    } else {\n      createdAclReqs =\n          manageDatabase\n              .getHandleDbRequests()\n              .getCreatedAclRequestsByStatus(\n                  userDetails, requestsType, true, topic, environment, aclType, tenantId);\n    }\n\n    // tenant filtering\n    final Set<String> allowedEnvIdSet = commonUtilsService.getEnvsFromUserId(userDetails);\n    createdAclReqs =\n        createdAclReqs.stream()\n            .filter(aclRequest -> allowedEnvIdSet.contains(aclRequest.getEnvironment()))\n            .collect(Collectors.toList());\n\n    return getAclRequestModelPaged(\n        updateCreatAclReqsList(createdAclReqs, tenantId), pageNo, currentPage, tenantId);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/AclControllerServiceTest.java",
            "method_src": "@Test\n  @Order(11)\n  public void getCreatedAclRequests() {\n    String teamName = \"teamname\";\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedAclRequestsByStatus(\n            anyString(), anyString(), anyBoolean(), anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 16));\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n\n    List<AclRequestsModel> listReqs = aclControllerService.getCreatedAclRequests(\"\", \"\", \"\");\n    assertThat(listReqs.size()).isEqualTo(10);\n  }",
            "method_tgt": "@Test\n  @Order(11)\n  public void getCreatedAclRequests() {\n    String teamName = \"teamname\";\n    stubUserInfo();\n    when(manageDatabase.getKafkaEnvList(anyInt())).thenReturn(utilMethods.getEnvLists());\n    when(handleDbRequests.getCreatedAclRequestsByStatus(\n            anyString(), anyString(), anyBoolean(), any(), any(), any(), anyInt()))\n        .thenReturn(getAclRequests(\"testtopic\", 16));\n    when(commonUtilsService.getEnvsFromUserId(anyString()))\n        .thenReturn(new HashSet<>(Collections.singletonList(\"1\")));\n    when(commonUtilsService.deriveCurrentPage(anyString(), anyString(), anyInt()))\n        .thenReturn(\"1\", \"2\");\n    when(manageDatabase.getTeamNameFromTeamId(anyInt(), anyInt())).thenReturn(teamName);\n\n    List<AclRequestsModel> listReqs =\n        aclControllerService.getCreatedAclRequests(\"\", \"\", \"\", null, null, null);\n    assertThat(listReqs.size()).isEqualTo(10);\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 46,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "bfc8377726a2b46e8f2c4a2f5d8dd7f88f4fbfc4",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/controller/AclController.java",
            "method_src": "@RequestMapping(\n      value = \"/getCreatedAclRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsModel>> getCreatedAclRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType) {\n    return new ResponseEntity<>(\n        aclControllerService.getCreatedAclRequests(pageNo, currentPage, requestsType),\n        HttpStatus.OK);\n  }",
            "method_tgt": "@RequestMapping(\n      value = \"/getCreatedAclRequests\",\n      method = RequestMethod.GET,\n      produces = {MediaType.APPLICATION_JSON_VALUE})\n  public ResponseEntity<List<AclRequestsModel>> getCreatedAclRequests(\n      @RequestParam(\"pageNo\") String pageNo,\n      @RequestParam(value = \"currentPage\", defaultValue = \"\") String currentPage,\n      @RequestParam(value = \"requestsType\", defaultValue = \"created\") String requestsType,\n      @RequestParam(value = \"topic\", required = false) String topic,\n      @RequestParam(value = \"env\", required = false) String env,\n      @RequestParam(value = \"aclType\", required = false) AclType aclType) {\n    return new ResponseEntity<>(\n        aclControllerService.getCreatedAclRequests(\n            pageNo, currentPage, requestsType, topic, env, aclType),\n        HttpStatus.OK);\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/controller/AclControllerTest.java",
            "method_src": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getCreatedAclRequests(\"1\", \"\", \"created\")).thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getCreatedAclRequests\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }",
            "method_tgt": "@Test\n  public void getCreatedAclRequests() throws Exception {\n\n    List<AclRequestsModel> aclRequests = utilMethods.getAclRequestsList();\n\n    when(aclControllerService.getCreatedAclRequests(\"1\", \"\", \"created\", null, null, null))\n        .thenReturn(aclRequests);\n\n    mvcAcls\n        .perform(\n            MockMvcRequestBuilders.get(\"/getCreatedAclRequests\")\n                .param(\"pageNo\", \"1\")\n                .contentType(MediaType.APPLICATION_JSON)\n                .accept(MediaType.APPLICATION_JSON))\n        .andExpect(status().isOk())\n        .andExpect(jsonPath(\"$\", hasSize(1)));\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 47,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
            "method_tgt": "public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
            "method_tgt": "@Test\n  @Order(6)\n  public void createTopicDeleteRequestFailureTopicAlreadyExists() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(getListTopicRequests());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\"Failure. A delete topic request already exists.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 1
        }
    },
    {
        "id": 48,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
            "method_tgt": "public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
            "method_tgt": "@Test\n  @Order(8)\n  public void createTopicDeleteRequestFailureTopicWithSubscriptions() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(utilMethods.getAcls());\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult())\n          .isEqualTo(\n              \"Failure. There are existing subscriptions for topic. Please get them deleted before.\");\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 1
        }
    },
    {
        "id": 49,
        "repo_name": "Aiven-Open/klaw",
        "commit_id": "1edf492f3566e9dbe01f59e25d6cbc28b4262dbd",
        "focal_db": {
            "rel_path": "core/src/main/java/io/aiven/klaw/service/TopicControllerService.java",
            "method_src": "public ApiResponse createTopicDeleteRequest(String topicName, String envId) throws KlawException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    if (commonUtilsService.isNotAuthorizedUser(\n        getPrincipal(), PermissionType.REQUEST_DELETE_TOPICS)) {\n      return ApiResponse.builder().result(ApiResultStatus.NOT_AUTHORIZED.value).build();\n    }\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }",
            "method_tgt": "public ApiResponse createTopicDeleteRequest(String topicName, String envId)\n      throws KlawException, KlawNotAuthorizedException {\n    log.info(\"createTopicDeleteRequest {} {}\", topicName, envId);\n    String userName = getUserName();\n\n    // check if authorized user to delete topic request\n    checkIsAuthorized(PermissionType.REQUEST_DELETE_TOPICS);\n\n    int tenantId = commonUtilsService.getTenantId(userName);\n    HandleDbRequests dbHandle = manageDatabase.getHandleDbRequests();\n\n    // check if already a delete topic request exists\n    if (!dbHandle\n        .selectTopicRequests(topicName, envId, RequestStatus.CREATED.value, tenantId)\n        .isEmpty()) {\n      return ApiResponse.builder()\n          .result(\"Failure. A delete topic request already exists.\")\n          .build();\n    }\n\n    List<Topic> topics = getTopicFromName(topicName, tenantId);\n\n    // check if you are part of the same team to delete this request\n    Integer userTeamId = commonUtilsService.getTeamId(userName);\n    if (topics != null\n        && !topics.isEmpty()\n        && !Objects.equals(topics.get(0).getTeamId(), userTeamId)) {\n      return ApiResponse.builder()\n          .result(\"Failure. Sorry, you cannot delete this topic, as you are not part of this team.\")\n          .build();\n    }\n\n    TopicRequest topicRequestReq = new TopicRequest();\n    topicRequestReq.setRequestor(userName);\n    topicRequestReq.setUsername(userName);\n    topicRequestReq.setTeamId(userTeamId);\n    topicRequestReq.setEnvironment(envId);\n    topicRequestReq.setTopicname(topicName);\n    topicRequestReq.setTopictype(TopicRequestTypes.Delete.name());\n    topicRequestReq.setTenantId(tenantId);\n\n    Optional<Topic> topicOb = Optional.empty();\n    if (topics != null) {\n      topicOb =\n          topics.stream()\n              .filter(\n                  topic -> Objects.equals(topic.getEnvironment(), topicRequestReq.getEnvironment()))\n              .findFirst();\n    }\n    if (topicOb.isPresent()) {\n      // Check if any existing subscriptions for this topic\n      List<Acl> acls =\n          dbHandle.getSyncAcls(\n              topicRequestReq.getEnvironment(), topicRequestReq.getTopicname(), tenantId);\n      if (!acls.isEmpty()) {\n        return ApiResponse.builder()\n            .result(\n                \"Failure. There are existing subscriptions for topic. Please get them deleted before.\")\n            .build();\n      }\n\n      topicRequestReq.setTopicpartitions(topicOb.get().getNoOfPartitions());\n      topicRequestReq.setReplicationfactor(topicOb.get().getNoOfReplcias());\n      try {\n        mailService.sendMail(\n            topicRequestReq.getTopicname(),\n            null,\n            \"\",\n            userName,\n            dbHandle,\n            TOPIC_DELETE_REQUESTED,\n            commonUtilsService.getLoginUrl());\n\n        String result = dbHandle.requestForTopic(topicRequestReq).get(\"result\");\n        return ApiResponse.builder().result(result).build();\n      } catch (Exception e) {\n        log.error(\"Error \", e);\n        throw new KlawException(e.getMessage());\n      }\n    } else {\n      log.error(\"Topic not found : {}\", topicName);\n      return ApiResponse.builder()\n          .result(\"Failure. Topic not found on cluster: \" + topicName)\n          .build();\n    }\n  }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/io/aiven/klaw/service/TopicControllerServiceTest.java",
            "method_src": "@Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    }\n  }",
            "method_tgt": "@Test\n  @Order(10)\n  public void createTopicDeleteRequestSuccessDefaultValues() {\n    String topicName = \"testtopic1\";\n    String envId = \"1\";\n    stubUserInfo();\n    when(commonUtilsService.getTeamId(anyString())).thenReturn(1);\n    when(commonUtilsService.isNotAuthorizedUser(any(), any())).thenReturn(false);\n    when(commonUtilsService.getTenantId(anyString())).thenReturn(101);\n    when(handleDbRequests.selectTopicRequests(anyString(), anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    when(handleDbRequests.getTopicTeam(anyString(), anyInt()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(commonUtilsService.getFilteredTopicsForTenant(any()))\n        .thenReturn(List.of(getTopic(topicName)));\n    when(handleDbRequests.getSyncAcls(anyString(), anyString(), anyInt()))\n        .thenReturn(Collections.emptyList());\n    Map<String, String> deleteReqResult = new HashMap<>();\n    deleteReqResult.put(\"result\", ApiResultStatus.SUCCESS.value);\n    when(handleDbRequests.requestForTopic(any())).thenReturn(deleteReqResult);\n    try {\n      ApiResponse apiResponse = topicControllerService.createTopicDeleteRequest(topicName, envId);\n      assertThat(apiResponse.getResult()).isEqualTo(ApiResultStatus.SUCCESS.value);\n    } catch (KlawException e) {\n      throw new RuntimeException(e);\n    } catch (KlawNotAuthorizedException e) {\n      throw new RuntimeException(e);\n    }\n  }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 1
        }
    },
    {
        "id": 50,
        "repo_name": "alibaba/nacos",
        "commit_id": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java",
            "method_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
            "method_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java",
            "method_src": "@Test\n    void testGetAllInstanceWithCacheAndSubscribed() throws NacosException {\n        String serviceName = \"service1\";\n        ServiceInfo serviceInfo = new ServiceInfo();\n        serviceInfo.setName(serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(true);\n        List<Instance> result = client.getAllInstances(serviceName);\n        assertEquals(serviceInfo.getHosts().get(0), result.get(0));\n    }",
            "method_tgt": "@Test\n    void testGetAllInstanceWithCacheAndSubscribed() throws NacosException {\n        String serviceName = \"service1\";\n        ServiceInfo serviceInfo = new ServiceInfo();\n        serviceInfo.setName(serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP)).thenReturn(serviceInfo);\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(true);\n        List<Instance> result = client.getAllInstances(serviceName);\n        assertEquals(serviceInfo.getHosts().get(0), result.get(0));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 51,
        "repo_name": "alibaba/nacos",
        "commit_id": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java",
            "method_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
            "method_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java",
            "method_src": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
            "method_tgt": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP)).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 52,
        "repo_name": "alibaba/nacos",
        "commit_id": "fa79474dee4a5c89ddfcaa190baa4dc57c235c20",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/naming/cache/ServiceInfoHolder.java",
            "method_src": "public ServiceInfo getFailoverServiceInfo(final String serviceName, final String groupName, final String clusters) {\n        String groupedServiceName = NamingUtils.getGroupedName(serviceName, groupName);\n        String key = ServiceInfo.getKey(groupedServiceName, clusters);\n        return failoverReactor.getService(key);\n    }",
            "method_tgt": "public ServiceInfo getFailoverServiceInfo(final String serviceName, final String groupName) {\n        String key = NamingUtils.getGroupedName(serviceName, groupName);\n        return failoverReactor.getService(key);\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/naming/cache/ServiceInfoHolderTest.java",
            "method_src": "@Test\n    void testGetFailoverServiceInfo() throws IllegalAccessException, NoSuchFieldException, NacosException {\n        FailoverReactor mock = injectMockFailoverReactor();\n        ServiceInfo serviceInfo = new ServiceInfo(\"a@@b@@c\");\n        when(mock.getService(\"a@@b@@c\")).thenReturn(serviceInfo);\n        assertEquals(serviceInfo, holder.getFailoverServiceInfo(\"b\", \"a\", \"c\"));\n    }",
            "method_tgt": "@Test\n    void testGetFailoverServiceInfo() throws IllegalAccessException, NoSuchFieldException, NacosException {\n        FailoverReactor mock = injectMockFailoverReactor();\n        ServiceInfo serviceInfo = new ServiceInfo(\"a@@b@@c\");\n        when(mock.getService(\"a@@b\")).thenReturn(serviceInfo);\n        assertEquals(serviceInfo, holder.getFailoverServiceInfo(\"b\", \"a\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 53,
        "repo_name": "alibaba/nacos",
        "commit_id": "f03cd12bf7f35585acac00bed9b706f22bfedd65",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/naming/NacosNamingService.java",
            "method_src": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper) {\n        if (changeNotifier.isSubscribed(groupName, serviceName)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }",
            "method_tgt": "private void notifyIfSubscribed(String serviceName, String groupName, NamingSelectorWrapper wrapper)\n            throws NacosException {\n        if (clientProxy.isSubscribed(serviceName, groupName, StringUtils.EMPTY)) {\n            NAMING_LOGGER.warn(\n                    \"Duplicate subscribe for groupName: {}, serviceName: {}; directly use current cached to notify.\",\n                    groupName, serviceName);\n            ServiceInfo serviceInfo = serviceInfoHolder.getServiceInfo(serviceName, groupName, Constants.NULL);\n            InstancesChangeEvent event = transferToEvent(serviceInfo);\n            wrapper.notifyListener(event);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/naming/NacosNamingServiceTest.java",
            "method_src": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(changeNotifier.isSubscribed(Constants.DEFAULT_GROUP, serviceName)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }",
            "method_tgt": "@Test\n    void testSubscribeDuplicate() throws NacosException {\n        String serviceName = \"service1\";\n        when(proxy.isSubscribed(serviceName, Constants.DEFAULT_GROUP, StringUtils.EMPTY)).thenReturn(true);\n        ServiceInfo serviceInfo = new ServiceInfo(Constants.DEFAULT_GROUP + \"@@\" + serviceName);\n        serviceInfo.addHost(new Instance());\n        when(serviceInfoHolder.getServiceInfo(serviceName, Constants.DEFAULT_GROUP, \"\")).thenReturn(serviceInfo);\n        final AtomicBoolean flag = new AtomicBoolean(false);\n        client.subscribe(serviceName, event -> flag.set(true));\n        assertTrue(flag.get());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 1
        }
    },
    {
        "id": 54,
        "repo_name": "alibaba/nacos",
        "commit_id": "c7386cf49e74924bec6576665c6c07019ba5b993",
        "focal_db": {
            "rel_path": "config/src/main/java/com/alibaba/nacos/config/server/remote/ConfigQueryRequestHandler.java",
            "method_src": "@Override\n    @TpsControl(pointName = \"ConfigQuery\")\n    @Secured(action = ActionTypes.READ, signType = SignType.CONFIG)\n    @ExtractorManager.Extractor(rpcExtractor = ConfigRequestParamExtractor.class)\n    public ConfigQueryResponse handle(ConfigQueryRequest request, RequestMeta meta) throws NacosException {\n        try {\n            String dataId = request.getDataId();\n            String group = request.getGroup();\n            String tenant = request.getTenant();\n            String groupKey = GroupKey2.getKey(dataId, group, tenant);\n            boolean notify = request.isNotify();\n            \n            String requestIpApp = meta.getLabels().get(CLIENT_APPNAME_HEADER);\n            String clientIp = meta.getClientIp();\n            \n            ConfigQueryChainRequest chainRequest = ConfigChainRequestExtractorService.getExtractor().extract(request, meta);\n            ConfigQueryChainResponse chainResponse = configQueryChainService.handle(chainRequest);\n            \n            if (ResponseCode.FAIL.getCode() == chainResponse.getResultCode()) {\n                return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), chainResponse.getMessage());\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_NOT_FOUND) {\n                return handlerConfigNotFound(request.getDataId(), request.getGroup(), request.getTenant(), requestIpApp, clientIp, notify);\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_QUERY_CONFLICT) {\n                return handlerConfigConflict(clientIp, groupKey);\n            }\n            \n            ConfigQueryResponse response = new ConfigQueryResponse();\n            \n            // Check if there is a matched gray rule\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_FOUND_GRAY) {\n                if (BetaGrayRule.TYPE_BETA.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setBeta(true);\n                } else if (TagGrayRule.TYPE_TAG.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setTag(URLEncoder.encode(chainResponse.getMatchedGray().getRawGrayRule(), ENCODE_UTF8));\n                }\n            }\n            \n            // Check if there is a special tag\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.SPECIAL_TAG_CONFIG_NOT_FOUND) {\n                response.setTag(request.getTag());\n            }\n            \n            response.setMd5(chainResponse.getMd5());\n            response.setEncryptedDataKey(chainResponse.getEncryptedDataKey());\n            response.setContent(chainResponse.getContent());\n            response.setContentType(chainResponse.getConfigType());\n            response.setLastModified(chainResponse.getLastModified());\n            \n            String pullType = ConfigTraceService.PULL_TYPE_OK;\n            if (chainResponse.getContent() == null) {\n                pullType = ConfigTraceService.PULL_TYPE_NOTFOUND;\n                response.setErrorInfo(ConfigQueryResponse.CONFIG_NOT_FOUND, \"config data not exist\");\n            } else {\n                response.setResultCode(ResponseCode.SUCCESS.getCode());\n            }\n            \n            String pullEvent = resolvePullEventType(chainResponse, request.getTag());\n            LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\", groupKey, clientIp, response.getMd5(), TimeUtils.getCurrentTimeStr());\n            final long delayed = System.currentTimeMillis() - response.getLastModified();\n            ConfigTraceService.logPullEvent(dataId, group, tenant, requestIpApp, response.getLastModified(), pullEvent, pullType,\n                    delayed, clientIp, notify, \"grpc\");\n            \n            return response;\n            \n        } catch (Exception e) {\n            LOGGER.error(\"Failed to handle grpc configuration query\", e);\n            return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), e.getMessage());\n        }\n        \n    }",
            "method_tgt": "@Override\n    @TpsControl(pointName = \"ConfigQuery\")\n    @Secured(action = ActionTypes.READ, signType = SignType.CONFIG)\n    @ExtractorManager.Extractor(rpcExtractor = ConfigRequestParamExtractor.class)\n    public ConfigQueryResponse handle(ConfigQueryRequest request, RequestMeta meta) throws NacosException {\n        try {\n            request.setTenant(NamespaceUtil.processNamespaceParameter(request.getTenant()));\n            String dataId = request.getDataId();\n            String group = request.getGroup();\n            String tenant = request.getTenant();\n            String groupKey = GroupKey2.getKey(dataId, group, tenant);\n            boolean notify = request.isNotify();\n            \n            String requestIpApp = meta.getLabels().get(CLIENT_APPNAME_HEADER);\n            String clientIp = meta.getClientIp();\n            \n            ConfigQueryChainRequest chainRequest = ConfigChainRequestExtractorService.getExtractor().extract(request, meta);\n            ConfigQueryChainResponse chainResponse = configQueryChainService.handle(chainRequest);\n            \n            if (ResponseCode.FAIL.getCode() == chainResponse.getResultCode()) {\n                return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), chainResponse.getMessage());\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_NOT_FOUND) {\n                return handlerConfigNotFound(request.getDataId(), request.getGroup(), request.getTenant(), requestIpApp, clientIp, notify);\n            }\n            \n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_QUERY_CONFLICT) {\n                return handlerConfigConflict(clientIp, groupKey);\n            }\n            \n            ConfigQueryResponse response = new ConfigQueryResponse();\n            \n            // Check if there is a matched gray rule\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.CONFIG_FOUND_GRAY) {\n                if (BetaGrayRule.TYPE_BETA.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setBeta(true);\n                } else if (TagGrayRule.TYPE_TAG.equals(chainResponse.getMatchedGray().getGrayRule().getType())) {\n                    response.setTag(URLEncoder.encode(chainResponse.getMatchedGray().getRawGrayRule(), ENCODE_UTF8));\n                }\n            }\n            \n            // Check if there is a special tag\n            if (chainResponse.getStatus() == ConfigQueryChainResponse.ConfigQueryStatus.SPECIAL_TAG_CONFIG_NOT_FOUND) {\n                response.setTag(request.getTag());\n            }\n            \n            response.setMd5(chainResponse.getMd5());\n            response.setEncryptedDataKey(chainResponse.getEncryptedDataKey());\n            response.setContent(chainResponse.getContent());\n            response.setContentType(chainResponse.getConfigType());\n            response.setLastModified(chainResponse.getLastModified());\n            \n            String pullType = ConfigTraceService.PULL_TYPE_OK;\n            if (chainResponse.getContent() == null) {\n                pullType = ConfigTraceService.PULL_TYPE_NOTFOUND;\n                response.setErrorInfo(ConfigQueryResponse.CONFIG_NOT_FOUND, \"config data not exist\");\n            } else {\n                response.setResultCode(ResponseCode.SUCCESS.getCode());\n            }\n            \n            String pullEvent = resolvePullEventType(chainResponse, request.getTag());\n            LogUtil.PULL_CHECK_LOG.warn(\"{}|{}|{}|{}\", groupKey, clientIp, response.getMd5(), TimeUtils.getCurrentTimeStr());\n            final long delayed = System.currentTimeMillis() - response.getLastModified();\n            ConfigTraceService.logPullEvent(dataId, group, tenant, requestIpApp, response.getLastModified(), pullEvent, pullType,\n                    delayed, clientIp, notify, \"grpc\");\n            \n            return response;\n            \n        } catch (Exception e) {\n            LOGGER.error(\"Failed to handle grpc configuration query\", e);\n            return ConfigQueryResponse.buildFailResponse(ResponseCode.FAIL.getCode(), e.getMessage());\n        }\n        \n    }"
        },
        "test_db": {
            "rel_path": "config/src/test/java/com/alibaba/nacos/config/server/remote/ConfigQueryRequestHandlerTest.java",
            "method_src": "@Test\n    void testGetTagAutoTag() throws Exception {\n        \n        final String groupKey = GroupKey2.getKey(dataId, group, \"\");\n        String content = \"content_from_tag_notdirectread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        ConfigRocksDbDiskService configRocksDbDiskService = Mockito.mock(ConfigRocksDbDiskService.class);\n        when(ConfigDiskServiceFactory.getInstance()).thenReturn(configRocksDbDiskService);\n        \n        String autoTag = \"auto_tag\";\n        CacheItem cacheItem = new CacheItem(groupKey);\n        cacheItem.initConfigGrayIfEmpty(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        cacheItem.getConfigCache().setMd5(MD5Utils.md5Hex(content, \"UTF-8\"));\n        ConfigCacheGray configCacheGrayTag = cacheItem.getConfigCacheGray().get(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        String tagContent = \"content_from_specific_tag_directread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        configCacheGrayTag.setMd5(MD5Utils.md5Hex(tagContent, \"UTF-8\"));\n        configCacheGrayTag.setEncryptedDataKey(\"key_testGetTag_AutoTag_NotDirectRead\");\n        ConfigGrayPersistInfo configGrayPersistInfo = new ConfigGrayPersistInfo(TagGrayRule.TYPE_TAG,\n                TagGrayRule.VERSION, autoTag, -999);\n        configCacheGrayTag.resetGrayRule(GrayRuleManager.serializeConfigGrayPersistInfo(configGrayPersistInfo));\n        cacheItem.sortConfigGray();\n        when(ConfigCacheService.getContentCache(eq(groupKey))).thenReturn(cacheItem);\n        \n        ConfigQueryRequest configQueryRequest = new ConfigQueryRequest();\n        configQueryRequest.setDataId(dataId);\n        configQueryRequest.setGroup(group);\n        RequestMeta requestMeta = new RequestMeta();\n        requestMeta.setClientIp(\"127.0.0.1\");\n        requestMeta.getAppLabels().put(VIPSERVER_TAG, autoTag);\n        //mock disk read.\n        when(configRocksDbDiskService.getGrayContent(eq(dataId), eq(group), eq(null),\n                eq(TagGrayRule.TYPE_TAG + \"_\" + autoTag))).thenReturn(tagContent);\n        ConfigQueryResponse response = configQueryRequestHandler.handle(configQueryRequest, requestMeta);\n        \n        //check content&md5\n        assertEquals(tagContent, response.getContent());\n        assertEquals(MD5Utils.md5Hex(tagContent, \"UTF-8\"), response.getMd5());\n        assertEquals(\"key_testGetTag_AutoTag_NotDirectRead\", response.getEncryptedDataKey());\n        \n        //check flags.\n        assertFalse(response.isBeta());\n        assertEquals(response.getTag(), autoTag);\n        \n    }",
            "method_tgt": "@Test\n    void testGetTagAutoTag() throws Exception {\n        \n        final String groupKey = GroupKey2.getKey(dataId, group, \"\");\n        String content = \"content_from_tag_notdirectread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        ConfigRocksDbDiskService configRocksDbDiskService = Mockito.mock(ConfigRocksDbDiskService.class);\n        when(ConfigDiskServiceFactory.getInstance()).thenReturn(configRocksDbDiskService);\n        \n        String autoTag = \"auto_tag\";\n        CacheItem cacheItem = new CacheItem(groupKey);\n        cacheItem.initConfigGrayIfEmpty(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        cacheItem.getConfigCache().setMd5(MD5Utils.md5Hex(content, \"UTF-8\"));\n        ConfigCacheGray configCacheGrayTag = cacheItem.getConfigCacheGray().get(TagGrayRule.TYPE_TAG + \"_\" + autoTag);\n        String tagContent = \"content_from_specific_tag_directread\u00c4\u00e3\u00ba\u00c3\" + System.currentTimeMillis();\n        configCacheGrayTag.setMd5(MD5Utils.md5Hex(tagContent, \"UTF-8\"));\n        configCacheGrayTag.setEncryptedDataKey(\"key_testGetTag_AutoTag_NotDirectRead\");\n        ConfigGrayPersistInfo configGrayPersistInfo = new ConfigGrayPersistInfo(TagGrayRule.TYPE_TAG,\n                TagGrayRule.VERSION, autoTag, -999);\n        configCacheGrayTag.resetGrayRule(GrayRuleManager.serializeConfigGrayPersistInfo(configGrayPersistInfo));\n        cacheItem.sortConfigGray();\n        when(ConfigCacheService.getContentCache(eq(groupKey))).thenReturn(cacheItem);\n        \n        ConfigQueryRequest configQueryRequest = new ConfigQueryRequest();\n        configQueryRequest.setDataId(dataId);\n        configQueryRequest.setGroup(group);\n        RequestMeta requestMeta = new RequestMeta();\n        requestMeta.setClientIp(\"127.0.0.1\");\n        requestMeta.getAppLabels().put(VIPSERVER_TAG, autoTag);\n        //mock disk read.\n        when(configRocksDbDiskService.getGrayContent(eq(dataId), eq(group), eq(\"\"),\n                eq(TagGrayRule.TYPE_TAG + \"_\" + autoTag))).thenReturn(tagContent);\n        ConfigQueryResponse response = configQueryRequestHandler.handle(configQueryRequest, requestMeta);\n        \n        //check content&md5\n        assertEquals(tagContent, response.getContent());\n        assertEquals(MD5Utils.md5Hex(tagContent, \"UTF-8\"), response.getMd5());\n        assertEquals(\"key_testGetTag_AutoTag_NotDirectRead\", response.getEncryptedDataKey());\n        \n        //check flags.\n        assertFalse(response.isBeta());\n        assertEquals(response.getTag(), autoTag);\n        \n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 55,
        "repo_name": "alibaba/nacos",
        "commit_id": "762303b94617e4febcf00f79e1c67050ae6f832d",
        "focal_db": {
            "rel_path": "naming/src/main/java/com/alibaba/nacos/naming/core/v2/metadata/NamingMetadataManager.java",
            "method_src": "public void removeInstanceMetadata(Service service, String metadataId) {\n        ConcurrentMap<String, InstanceMetadata> instanceMetadataMapForService = instanceMetadataMap.get(service);\n        if (null != instanceMetadataMapForService) {\n            instanceMetadataMapForService.remove(metadataId);\n            if (instanceMetadataMapForService.isEmpty()) {\n                serviceMetadataMap.remove(service);\n            }\n        }\n        expiredMetadataInfos.remove(ExpiredMetadataInfo.newExpiredInstanceMetadata(service, metadataId));\n    }",
            "method_tgt": "public void removeInstanceMetadata(Service service, String metadataId) {\n        ConcurrentMap<String, InstanceMetadata> instanceMetadataMapForService = instanceMetadataMap.get(service);\n        if (null != instanceMetadataMapForService) {\n            instanceMetadataMapForService.remove(metadataId);\n            if (instanceMetadataMapForService.isEmpty()) {\n                instanceMetadataMap.remove(service);\n            }\n        }\n        expiredMetadataInfos.remove(ExpiredMetadataInfo.newExpiredInstanceMetadata(service, metadataId));\n    }"
        },
        "test_db": {
            "rel_path": "naming/src/test/java/com/alibaba/nacos/naming/core/v2/metadata/NamingMetadataManagerTest.java",
            "method_src": "@Test\n    void testRemoveInstanceMetadata() {\n        \n        namingMetadataManager.removeInstanceMetadata(service, METADATA_ID);\n        \n        Optional<InstanceMetadata> instanceMetadata = namingMetadataManager.getInstanceMetadata(service, METADATA_ID);\n        \n        assertFalse(instanceMetadata.isPresent());\n    }",
            "method_tgt": "@Test\n    void testRemoveInstanceMetadata() {\n        \n        namingMetadataManager.removeInstanceMetadata(service, METADATA_ID);\n        \n        Optional<InstanceMetadata> instanceMetadata = namingMetadataManager.getInstanceMetadata(service, METADATA_ID);\n        \n        assertFalse(instanceMetadata.isPresent());\n\n        Map<Service, ConcurrentMap<String, InstanceMetadata>> instanceMetadataSnapshot = namingMetadataManager.getInstanceMetadataSnapshot();\n        \n        assertEquals(0, instanceMetadataSnapshot.size());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 56,
        "repo_name": "alibaba/nacos",
        "commit_id": "98c9760d8827335963ba1deca02adac3073642a5",
        "focal_db": {
            "rel_path": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoGrayPersistServiceImpl.java",
            "method_src": "@Override\n    public ConfigOperateResult updateConfigInfo4GrayCas(ConfigInfo configInfo, String grayName, String grayRule,\n            String srcIp, String srcUser) {\n        String appNameTmp = StringUtils.defaultEmptyIfBlank(configInfo.getAppName());\n        String tenantTmp = StringUtils.defaultEmptyIfBlank(configInfo.getTenant());\n        String grayNameTmp = StringUtils.isBlank(grayName) ? StringUtils.EMPTY : grayName.trim();\n        String grayRuleTmp = StringUtils.isBlank(grayRule) ? StringUtils.EMPTY : grayRule.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            final ConfigInfoGrayWrapper oldConfigAllInfo4Gray = findConfigInfo4Gray(configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp, grayNameTmp);\n            if (oldConfigAllInfo4Gray == null) {\n                if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                    LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                            configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                }\n            }\n            \n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoGrayMapper configInfoGrayMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_GRAY);\n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.GRAY_NAME, grayNameTmp);\n            context.putWhereParameter(FieldConstant.GRAY_RULE, grayRuleTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoGrayMapper.updateConfigInfo4GrayCas(context);\n            \n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigAllInfo4Gray.getId(),\n                    oldConfigAllInfo4Gray, srcIp, srcUser, now, \"U\", Constants.GRAY,\n                    ConfigExtInfoUtil.getExtInfoFromGrayInfo(oldConfigAllInfo4Gray.getGrayName(),\n                            oldConfigAllInfo4Gray.getGrayRule(), oldConfigAllInfo4Gray.getSrcUser()));\n            \n            EmbeddedStorageContextUtils.onModifyConfigGrayInfo(configInfo, grayNameTmp, grayRuleTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());\n            \n            Boolean success = databaseOperate.blockUpdate();\n            if (success) {\n                return getGrayOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp, grayNameTmp);\n            } else {\n                return new ConfigOperateResult(false);\n            }\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }",
            "method_tgt": "@Override\n    public ConfigOperateResult updateConfigInfo4GrayCas(ConfigInfo configInfo, String grayName, String grayRule,\n            String srcIp, String srcUser) {\n        String appNameTmp = StringUtils.defaultEmptyIfBlank(configInfo.getAppName());\n        String tenantTmp = StringUtils.defaultEmptyIfBlank(configInfo.getTenant());\n        String grayNameTmp = StringUtils.isBlank(grayName) ? StringUtils.EMPTY : grayName.trim();\n        String grayRuleTmp = StringUtils.isBlank(grayRule) ? StringUtils.EMPTY : grayRule.trim();\n        \n        configInfo.setTenant(tenantTmp);\n        \n        try {\n            final ConfigInfoGrayWrapper oldConfigAllInfo4Gray = findConfigInfo4Gray(configInfo.getDataId(),\n                    configInfo.getGroup(), tenantTmp, grayNameTmp);\n            if (oldConfigAllInfo4Gray == null) {\n                if (LogUtil.FATAL_LOG.isErrorEnabled()) {\n                    LogUtil.FATAL_LOG.error(\"expected config info[dataid:{}, group:{}, tenent:{}] but not found.\",\n                            configInfo.getDataId(), configInfo.getGroup(), configInfo.getTenant());\n                }\n            }\n            \n            String md5 = MD5Utils.md5Hex(configInfo.getContent(), Constants.ENCODE);\n            ConfigInfoGrayMapper configInfoGrayMapper = mapperManager.findMapper(dataSourceService.getDataSourceType(),\n                    TableConstant.CONFIG_INFO_GRAY);\n            Timestamp time = new Timestamp(System.currentTimeMillis());\n            \n            MapperContext context = new MapperContext();\n            context.putUpdateParameter(FieldConstant.CONTENT, configInfo.getContent());\n            context.putUpdateParameter(FieldConstant.MD5, md5);\n            context.putUpdateParameter(FieldConstant.SRC_IP, srcIp);\n            context.putUpdateParameter(FieldConstant.SRC_USER, srcUser);\n            context.putUpdateParameter(FieldConstant.GMT_MODIFIED, time);\n            context.putUpdateParameter(FieldConstant.APP_NAME, appNameTmp);\n            \n            context.putWhereParameter(FieldConstant.DATA_ID, configInfo.getDataId());\n            context.putWhereParameter(FieldConstant.GROUP_ID, configInfo.getGroup());\n            context.putWhereParameter(FieldConstant.TENANT_ID, tenantTmp);\n            context.putWhereParameter(FieldConstant.GRAY_NAME, grayNameTmp);\n            context.putWhereParameter(FieldConstant.GRAY_RULE, grayRuleTmp);\n            context.putWhereParameter(FieldConstant.MD5, configInfo.getMd5());\n            \n            final MapperResult mapperResult = configInfoGrayMapper.updateConfigInfo4GrayCas(context);\n            \n            Timestamp now = new Timestamp(System.currentTimeMillis());\n            historyConfigInfoPersistService.insertConfigHistoryAtomic(oldConfigAllInfo4Gray.getId(),\n                    oldConfigAllInfo4Gray, srcIp, srcUser, now, \"U\", Constants.GRAY, grayNameTmp,\n                    ConfigExtInfoUtil.getExtInfoFromGrayInfo(oldConfigAllInfo4Gray.getGrayName(),\n                            oldConfigAllInfo4Gray.getGrayRule(), oldConfigAllInfo4Gray.getSrcUser()));\n            \n            EmbeddedStorageContextUtils.onModifyConfigGrayInfo(configInfo, grayNameTmp, grayRuleTmp, srcIp, time);\n            EmbeddedStorageContextHolder.addSqlContext(mapperResult.getSql(), mapperResult.getParamList().toArray());\n            \n            Boolean success = databaseOperate.blockUpdate();\n            if (success) {\n                return getGrayOperateResult(configInfo.getDataId(), configInfo.getGroup(), tenantTmp, grayNameTmp);\n            } else {\n                return new ConfigOperateResult(false);\n            }\n            \n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }"
        },
        "test_db": {
            "rel_path": "config/src/test/java/com/alibaba/nacos/config/server/service/repository/embedded/EmbeddedConfigInfoGrayPersistServiceImplTest.java",
            "method_src": "@Test\n    public void testRemoveConfigInfoGrayName() {\n        String dataId = \"dataId1112222\";\n        String group = \"group22\";\n        String tenant = \"tenant2\";\n        final String srcIp = \"ip345678\";\n        final String srcUser = \"user1234567\";\n        final String grayName = \"grayName...\";\n        \n        //mock exist config info\n        ConfigInfoGrayWrapper configAllInfo4Gray = new ConfigInfoGrayWrapper();\n        configAllInfo4Gray.setDataId(dataId);\n        configAllInfo4Gray.setGroup(group);\n        configAllInfo4Gray.setTenant(tenant);\n        configAllInfo4Gray.setMd5(\"old_md5\");\n        \n        when(databaseOperate.queryOne(anyString(), eq(new Object[] {dataId, group, tenant, grayName}),\n                eq(CONFIG_INFO_GRAY_WRAPPER_ROW_MAPPER))).thenReturn(configAllInfo4Gray);\n        \n        embeddedConfigInfoGrayPersistService.removeConfigInfoGray(dataId, group, tenant, grayName, srcIp, srcUser);\n        \n        //verify delete sql invoked.\n        embeddedStorageContextHolderMockedStatic.verify(\n                () -> EmbeddedStorageContextHolder.addSqlContext(anyString(), eq(dataId), eq(group), eq(tenant),\n                        eq(grayName)), times(1));\n        Mockito.verify(historyConfigInfoPersistService, times(1)).insertConfigHistoryAtomic(\n                eq(configAllInfo4Gray.getId()), eq(configAllInfo4Gray), eq(srcIp), eq(srcUser), any(Timestamp.class), eq(\"D\"),\n                eq(\"gray\"), anyString());\n    }",
            "method_tgt": "@Test\n    public void testRemoveConfigInfoGrayName() {\n        String dataId = \"dataId1112222\";\n        String group = \"group22\";\n        String tenant = \"tenant2\";\n        final String srcIp = \"ip345678\";\n        final String srcUser = \"user1234567\";\n        final String grayName = \"grayName...\";\n        \n        //mock exist config info\n        ConfigInfoGrayWrapper configAllInfo4Gray = new ConfigInfoGrayWrapper();\n        configAllInfo4Gray.setDataId(dataId);\n        configAllInfo4Gray.setGroup(group);\n        configAllInfo4Gray.setTenant(tenant);\n        configAllInfo4Gray.setMd5(\"old_md5\");\n        \n        when(databaseOperate.queryOne(anyString(), eq(new Object[] {dataId, group, tenant, grayName}),\n                eq(CONFIG_INFO_GRAY_WRAPPER_ROW_MAPPER))).thenReturn(configAllInfo4Gray);\n        \n        embeddedConfigInfoGrayPersistService.removeConfigInfoGray(dataId, group, tenant, grayName, srcIp, srcUser);\n        \n        //verify delete sql invoked.\n        embeddedStorageContextHolderMockedStatic.verify(\n                () -> EmbeddedStorageContextHolder.addSqlContext(anyString(), eq(dataId), eq(group), eq(tenant),\n                        eq(grayName)), times(1));\n        Mockito.verify(historyConfigInfoPersistService, times(1))\n                .insertConfigHistoryAtomic(eq(configAllInfo4Gray.getId()), eq(configAllInfo4Gray), eq(srcIp),\n                        eq(srcUser), any(Timestamp.class), eq(\"D\"), eq(\"gray\"), eq(grayName), anyString());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 57,
        "repo_name": "alibaba/nacos",
        "commit_id": "98c9760d8827335963ba1deca02adac3073642a5",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerby.java",
            "method_src": "@Override\n    public MapperResult findDeletedConfig(MapperContext context) {\n        return new MapperResult(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip, op_type, tenant_id, \"\n                        + \"publish_type, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                CollectionUtils.list(context.getWhereParameter(FieldConstant.PUBLISH_TYPE),\n                        context.getWhereParameter(FieldConstant.START_TIME),\n                        context.getWhereParameter(FieldConstant.LAST_MAX_ID),\n                        context.getWhereParameter(FieldConstant.PAGE_SIZE)));\n    }",
            "method_tgt": "@Override\n    public MapperResult findDeletedConfig(MapperContext context) {\n        return new MapperResult(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip, op_type, tenant_id, \"\n                        + \"publish_type,gray_name, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                CollectionUtils.list(context.getWhereParameter(FieldConstant.PUBLISH_TYPE),\n                        context.getWhereParameter(FieldConstant.START_TIME),\n                        context.getWhereParameter(FieldConstant.LAST_MAX_ID),\n                        context.getWhereParameter(FieldConstant.PAGE_SIZE)));\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerbyTest.java",
            "method_src": "@Test\n    void testFindDeletedConfig() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.findDeletedConfig(context);\n        assertEquals(mapperResult.getSql(), \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip,\"\n                + \" op_type, tenant_id, publish_type, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\");\n        assertArrayEquals(new Object[] {publishType, startTime, lastMaxId, pageSize}, mapperResult.getParamList().toArray());\n    }",
            "method_tgt": "@Test\n    void testFindDeletedConfig() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.findDeletedConfig(context);\n        assertEquals(\n                \"SELECT id, nid, data_id, group_id, app_name, content, md5, gmt_create, gmt_modified, src_user, src_ip,\"\n                        + \" op_type, tenant_id, publish_type,gray_name, ext_info, encrypted_data_key FROM his_config_info WHERE op_type = 'D' AND \"\n                        + \"publish_type = ? and gmt_modified >= ? and nid > ? order by nid OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY\",\n                mapperResult.getSql());\n        assertArrayEquals(new Object[] {publishType, startTime, lastMaxId, pageSize},\n                mapperResult.getParamList().toArray());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 58,
        "repo_name": "alibaba/nacos",
        "commit_id": "5c0fa0dc609ea06c83c92e74c1bd3510e86f0210",
        "focal_db": {
            "rel_path": "core/src/main/java/com/alibaba/nacos/core/service/NamespaceOperationService.java",
            "method_src": "public List<Namespace> getNamespaceList() {\n        // TODO \u83b7\u53d6\u7528kp\n        List<TenantInfo> tenantInfos = namespacePersistService.findTenantByKp(DEFAULT_KP);\n        \n        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE, DEFAULT_QUOTA, 0,\n                NamespaceTypeEnum.GLOBAL.getType());\n        NamespaceDetailInjectorHolder.getInstance().injectDetail(namespace0);\n        List<Namespace> namespaceList = new ArrayList<>();\n        namespaceList.add(namespace0);\n        \n        for (TenantInfo tenantInfo : tenantInfos) {\n            Namespace namespaceTmp = new Namespace(tenantInfo.getTenantId(), tenantInfo.getTenantName(),\n                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, 0, NamespaceTypeEnum.CUSTOM.getType());\n            NamespaceDetailInjectorHolder.getInstance().injectDetail(namespaceTmp);\n            namespaceList.add(namespaceTmp);\n        }\n        return namespaceList;\n    }",
            "method_tgt": "public List<Namespace> getNamespaceList() {\n        // TODO \u83b7\u53d6\u7528kp\n        List<TenantInfo> tenantInfos = namespacePersistService.findTenantByKp(DEFAULT_KP);\n        \n        Namespace namespace0 = new Namespace(NamespaceUtil.getNamespaceDefaultId(), DEFAULT_NAMESPACE_SHOW_NAME,\n                DEFAULT_NAMESPACE_DESCRIPTION, DEFAULT_QUOTA, 0, NamespaceTypeEnum.GLOBAL.getType());\n        NamespaceDetailInjectorHolder.getInstance().injectDetail(namespace0);\n        List<Namespace> namespaceList = new ArrayList<>();\n        namespaceList.add(namespace0);\n        \n        for (TenantInfo tenantInfo : tenantInfos) {\n            Namespace namespaceTmp = new Namespace(tenantInfo.getTenantId(), tenantInfo.getTenantName(),\n                    tenantInfo.getTenantDesc(), DEFAULT_QUOTA, 0, NamespaceTypeEnum.CUSTOM.getType());\n            NamespaceDetailInjectorHolder.getInstance().injectDetail(namespaceTmp);\n            namespaceList.add(namespaceTmp);\n        }\n        return namespaceList;\n    }"
        },
        "test_db": {
            "rel_path": "core/src/test/java/com/alibaba/nacos/core/service/NamespaceOperationServiceTest.java",
            "method_src": "@Test\n    void testGetNamespaceList() {\n        TenantInfo tenantInfo = new TenantInfo();\n        tenantInfo.setTenantId(TEST_NAMESPACE_ID);\n        tenantInfo.setTenantName(TEST_NAMESPACE_NAME);\n        tenantInfo.setTenantDesc(TEST_NAMESPACE_DESC);\n        when(namespacePersistService.findTenantByKp(DEFAULT_KP)).thenReturn(Collections.singletonList(tenantInfo));\n        \n        List<Namespace> list = namespaceOperationService.getNamespaceList();\n        assertEquals(2, list.size());\n        Namespace namespaceA = list.get(0);\n        assertEquals(\"\", namespaceA.getNamespace());\n        assertEquals(DEFAULT_NAMESPACE, namespaceA.getNamespaceShowName());\n        assertEquals(DEFAULT_QUOTA, namespaceA.getQuota());\n        assertEquals(1, namespaceA.getConfigCount());\n        \n        Namespace namespaceB = list.get(1);\n        assertEquals(TEST_NAMESPACE_ID, namespaceB.getNamespace());\n        assertEquals(TEST_NAMESPACE_NAME, namespaceB.getNamespaceShowName());\n        assertEquals(1, namespaceB.getConfigCount());\n    }",
            "method_tgt": "@Test\n    void testGetNamespaceList() {\n        TenantInfo tenantInfo = new TenantInfo();\n        tenantInfo.setTenantId(TEST_NAMESPACE_ID);\n        tenantInfo.setTenantName(TEST_NAMESPACE_NAME);\n        tenantInfo.setTenantDesc(TEST_NAMESPACE_DESC);\n        when(namespacePersistService.findTenantByKp(DEFAULT_KP)).thenReturn(Collections.singletonList(tenantInfo));\n        \n        List<Namespace> list = namespaceOperationService.getNamespaceList();\n        assertEquals(2, list.size());\n        Namespace namespaceA = list.get(0);\n        assertEquals(\"\", namespaceA.getNamespace());\n        assertEquals(DEFAULT_NAMESPACE_SHOW_NAME, namespaceA.getNamespaceShowName());\n        assertEquals(DEFAULT_NAMESPACE_DESCRIPTION, namespaceA.getNamespaceDesc());\n        assertEquals(DEFAULT_QUOTA, namespaceA.getQuota());\n        assertEquals(1, namespaceA.getConfigCount());\n        \n        Namespace namespaceB = list.get(1);\n        assertEquals(TEST_NAMESPACE_ID, namespaceB.getNamespace());\n        assertEquals(TEST_NAMESPACE_NAME, namespaceB.getNamespaceShowName());\n        assertEquals(1, namespaceB.getConfigCount());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 59,
        "repo_name": "alibaba/nacos",
        "commit_id": "e2d44f2fd2b12124d844d152b7025e3f758d00e6",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerby.java",
            "method_src": "@Override\n    public MapperResult removeConfigHistory(MapperContext context) {\n        String sql = \"DELETE FROM his_config_info WHERE id IN( \"\n                + \"SELECT id FROM his_config_info WHERE gmt_modified < ? OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\";\n        return new MapperResult(sql, CollectionUtils.list(context.getWhereParameter(FieldConstant.START_TIME),\n                context.getWhereParameter(FieldConstant.LIMIT_SIZE)));\n    }",
            "method_tgt": "@Override\n    public MapperResult removeConfigHistory(MapperContext context) {\n        String sql = \"DELETE FROM his_config_info WHERE nid IN( \"\n                + \"SELECT nid FROM his_config_info WHERE gmt_modified < ? OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\";\n        return new MapperResult(sql, CollectionUtils.list(context.getWhereParameter(FieldConstant.START_TIME),\n                context.getWhereParameter(FieldConstant.LIMIT_SIZE)));\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/HistoryConfigInfoMapperByDerbyTest.java",
            "method_src": "@Test\n    void testRemoveConfigHistory() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.removeConfigHistory(context);\n        assertEquals(mapperResult.getSql(),\n                \"DELETE FROM his_config_info WHERE id IN( SELECT id FROM his_config_info WHERE gmt_modified < ? \"\n                        + \"OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\");\n        assertArrayEquals(new Object[] {startTime, limitSize}, mapperResult.getParamList().toArray());\n    }",
            "method_tgt": "@Test\n    void testRemoveConfigHistory() {\n        MapperResult mapperResult = historyConfigInfoMapperByDerby.removeConfigHistory(context);\n        assertEquals(mapperResult.getSql(),\n                \"DELETE FROM his_config_info WHERE nid IN( SELECT nid FROM his_config_info WHERE gmt_modified < ? \"\n                        + \"OFFSET 0 ROWS FETCH NEXT ? ROWS ONLY)\");\n        assertArrayEquals(new Object[] {startTime, limitSize}, mapperResult.getParamList().toArray());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 60,
        "repo_name": "alibaba/nacos",
        "commit_id": "facf4c82704c5dc4f4290d79973ac70d6f0bb6ea",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java",
            "method_src": "@Override\n    public MapperResult findAllConfigInfoBaseFetchRows(MapperContext context) {\n        String sql = \"SELECT t.id,data_id,group_id,content,md5\"\n                + \" FROM ( SELECT id FROM config_info ORDER BY id LIMIT ?,?  ) \"\n                + \" g, config_info t  WHERE g.id = t.id \";\n        return new MapperResult(sql, Collections.emptyList());\n    }",
            "method_tgt": "@Override\n    public MapperResult findAllConfigInfoBaseFetchRows(MapperContext context) {\n        String sql = \"SELECT t.id,data_id,group_id,content,md5\"\n                + \" FROM ( SELECT id FROM config_info ORDER BY id LIMIT \" + context.getStartRow() + \",\"\n                + context.getPageSize() + \" )\" + \" g, config_info t  WHERE g.id = t.id \";\n        return new MapperResult(sql, Collections.emptyList());\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testFindAllConfigInfoBaseFetchRows() {\n        MapperResult mapperResult = configInfoMapperByMySql.findAllConfigInfoBaseFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT t.id,data_id,group_id,content,md5 FROM ( SELECT id FROM config_info ORDER BY id LIMIT ?,?\"\n                        + \"  )  g, config_info t  WHERE g.id = t.id \");\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(), emptyObjs);\n    }",
            "method_tgt": "@Test\n    public void testFindAllConfigInfoBaseFetchRows() {\n        MapperResult mapperResult = configInfoMapperByMySql.findAllConfigInfoBaseFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT t.id,data_id,group_id,content,md5 FROM ( SELECT id FROM config_info ORDER BY id LIMIT \" + context.getStartRow() + \",\"\n                        + context.getPageSize() + \" ) g, config_info t  WHERE g.id = t.id \");\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(), emptyObjs);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 61,
        "repo_name": "alibaba/nacos",
        "commit_id": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
        "focal_db": {
            "rel_path": "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java",
            "method_src": "public static Response build(int errorCode, String msg) {\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, msg);\n        return response;\n    }",
            "method_tgt": "public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }"
        },
        "test_db": {
            "rel_path": "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java",
            "method_src": "@Test\n    public void testBuildWithNacosException() {\n        int errCode = 500;\n        String errMsg = \"nacos exception msg\";\n        NacosException nacosException = new NacosException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }",
            "method_tgt": "@Test\n    public void testBuildWithNacosException() {\n        int errCode = 500;\n        String errMsg = \"nacos exception msg\";\n        NacosException nacosException = new NacosException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errCode, response.getResultCode());\n        Assert.assertEquals(errMsg, response.getMessage());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 62,
        "repo_name": "alibaba/nacos",
        "commit_id": "6461aeb719ceb4ee0fb3cb7c4fbcff6b56ce539a",
        "focal_db": {
            "rel_path": "api/src/main/java/com/alibaba/nacos/api/remote/response/ErrorResponse.java",
            "method_src": "public static Response build(int errorCode, String msg) {\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, msg);\n        return response;\n    }",
            "method_tgt": "public static Response build(Throwable exception) {\n        int errorCode;\n        if (exception instanceof NacosException) {\n            errorCode = ((NacosException) exception).getErrCode();\n        } else if (exception instanceof NacosRuntimeException) {\n            errorCode = ((NacosRuntimeException) exception).getErrCode();\n        } else {\n            errorCode = ResponseCode.FAIL.getCode();\n        }\n        ErrorResponse response = new ErrorResponse();\n        response.setErrorInfo(errorCode, exception.getMessage());\n        response.setResultCode(errorCode);\n        return response;\n    }"
        },
        "test_db": {
            "rel_path": "api/src/test/java/com/alibaba/nacos/api/remote/response/ErrorResponseTest.java",
            "method_src": "@Test\n    public void testBuildWithNacosRuntimeException() {\n        int errCode = 500;\n        String errMsg = \"nacos runtime exception msg\";\n        NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosRuntimeException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    }",
            "method_tgt": "@Test\n    public void testBuildWithNacosRuntimeException() {\n        int errCode = 500;\n        String errMsg = \"nacos runtime exception msg\";\n        NacosRuntimeException nacosRuntimeException = new NacosRuntimeException(errCode, errMsg);\n        \n        Response response = ErrorResponse.build(nacosRuntimeException);\n        \n        Assert.assertEquals(errCode, response.getErrorCode());\n        Assert.assertEquals(errCode, response.getResultCode());\n        Assert.assertEquals(\"errCode: \" + errCode + \", errMsg: \" + errMsg + \" \", response.getMessage());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 63,
        "repo_name": "alibaba/nacos",
        "commit_id": "1b9a22c1a8209890743fd77cbe3b007ed946c548",
        "focal_db": {
            "rel_path": "naming/src/main/java/com/alibaba/nacos/naming/push/v2/hook/NacosMonitorPushResultHook.java",
            "method_src": "@Override\n    public void pushFailed(PushResult result) {\n        MetricsMonitor.incrementFailPush();\n        if (isRpc(result.getSubscriber())) {\n            NamingTpsMonitor.rpcPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        } else {\n            NamingTpsMonitor.udpPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        }\n    }",
            "method_tgt": "@Override\n    public void pushFailed(PushResult result) {\n        MetricsMonitor.incrementPush();\n        MetricsMonitor.incrementFailPush();\n        if (isRpc(result.getSubscriber())) {\n            NamingTpsMonitor.rpcPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        } else {\n            NamingTpsMonitor.udpPushFail(result.getSubscribeClientId(), result.getSubscriber().getIp());\n        }\n    }"
        },
        "test_db": {
            "rel_path": "naming/src/test/java/com/alibaba/nacos/naming/push/v2/hook/NacosMonitorPushResultHookTest.java",
            "method_src": "@Test\n    public void testPushFailed() {\n        new NacosMonitorPushResultHook().pushFailed(pushResult);\n        assertEquals(1, MetricsMonitor.getFailedPushMonitor().get());\n    }",
            "method_tgt": "@Test\n    public void testPushFailed() {\n        new NacosMonitorPushResultHook().pushFailed(pushResult);\n        assertEquals(1, MetricsMonitor.getFailedPushMonitor().get());\n        assertEquals(1, MetricsMonitor.getTotalPushMonitor().get());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 64,
        "repo_name": "alibaba/nacos",
        "commit_id": "790bb197cfce709e5bb75be3e522e03f68db0d71",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java",
            "method_src": "@Override\n    public MapperResult findChangeConfigFetchRows(MapperContext context) {\n        final String tenant = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        final String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        final String group = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        final String appName = (String) context.getWhereParameter(FieldConstant.APP_NAME);\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final Timestamp startTime = (Timestamp) context.getWhereParameter(FieldConstant.START_TIME);\n        final Timestamp endTime = (Timestamp) context.getWhereParameter(FieldConstant.END_TIME);\n        \n        List<Object> paramList = new ArrayList<>();\n        \n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,content,type,md5,gmt_modified FROM config_info WHERE \";\n        String where = \" 1=1 \";\n        if (!StringUtils.isBlank(dataId)) {\n            where += \" AND data_id LIKE ? \";\n            paramList.add(dataId);\n        }\n        if (!StringUtils.isBlank(group)) {\n            where += \" AND group_id LIKE ? \";\n            paramList.add(group);\n        }\n        \n        if (!StringUtils.isBlank(tenantTmp)) {\n            where += \" AND tenant_id = ? \";\n            paramList.add(tenantTmp);\n        }\n        \n        if (!StringUtils.isBlank(appName)) {\n            where += \" AND app_name = ? \";\n            paramList.add(appName);\n        }\n        if (startTime != null) {\n            where += \" AND gmt_modified >=? \";\n            paramList.add(startTime);\n        }\n        if (endTime != null) {\n            where += \" AND gmt_modified <=? \";\n            paramList.add(endTime);\n        }\n        return new MapperResult(\n                sqlFetchRows + where + \" AND id > \" + context.getWhereParameter(FieldConstant.LAST_MAX_ID)\n                        + \" ORDER BY id ASC\" + \" LIMIT \" + 0 + \",\" + context.getPageSize(), paramList);\n    }",
            "method_tgt": "@Override\n    public MapperResult findChangeConfigFetchRows(MapperContext context) {\n        final String tenant = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        final String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        final String group = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        final String appName = (String) context.getWhereParameter(FieldConstant.APP_NAME);\n        final String tenantTmp = StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;\n        final Timestamp startTime = (Timestamp) context.getWhereParameter(FieldConstant.START_TIME);\n        final Timestamp endTime = (Timestamp) context.getWhereParameter(FieldConstant.END_TIME);\n        \n        List<Object> paramList = new ArrayList<>();\n        \n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,app_name,type,md5,gmt_modified FROM config_info WHERE \";\n        String where = \" 1=1 \";\n        if (!StringUtils.isBlank(dataId)) {\n            where += \" AND data_id LIKE ? \";\n            paramList.add(dataId);\n        }\n        if (!StringUtils.isBlank(group)) {\n            where += \" AND group_id LIKE ? \";\n            paramList.add(group);\n        }\n        \n        if (!StringUtils.isBlank(tenantTmp)) {\n            where += \" AND tenant_id = ? \";\n            paramList.add(tenantTmp);\n        }\n        \n        if (!StringUtils.isBlank(appName)) {\n            where += \" AND app_name = ? \";\n            paramList.add(appName);\n        }\n        if (startTime != null) {\n            where += \" AND gmt_modified >=? \";\n            paramList.add(startTime);\n        }\n        if (endTime != null) {\n            where += \" AND gmt_modified <=? \";\n            paramList.add(endTime);\n        }\n        return new MapperResult(\n                sqlFetchRows + where + \" AND id > \" + context.getWhereParameter(FieldConstant.LAST_MAX_ID)\n                        + \" ORDER BY id ASC\" + \" LIMIT \" + 0 + \",\" + context.getPageSize(), paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testFindChangeConfigFetchRows() {\n        Object lastMaxId = 100;\n        context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n        MapperResult mapperResult = configInfoMapperByMySql.findChangeConfigFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT id,data_id,group_id,tenant_id,app_name,content,type,md5,gmt_modified FROM config_info \"\n                        + \"WHERE  1=1  AND tenant_id = ?  AND app_name = ?  AND gmt_modified >=?  AND gmt_modified <=?  AND id > \"\n                        + lastMaxId + \" ORDER BY id ASC LIMIT \" + startRow + \",\" + pageSize);\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(),\n                new Object[] {tenantId, appName, startTime, endTime});\n    }",
            "method_tgt": "@Test\n    public void testFindChangeConfigFetchRows() {\n        Object lastMaxId = 100;\n        context.putWhereParameter(FieldConstant.LAST_MAX_ID, lastMaxId);\n        MapperResult mapperResult = configInfoMapperByMySql.findChangeConfigFetchRows(context);\n        Assert.assertEquals(mapperResult.getSql(),\n                \"SELECT id,data_id,group_id,tenant_id,app_name,type,md5,gmt_modified FROM config_info \"\n                        + \"WHERE  1=1  AND tenant_id = ?  AND app_name = ?  AND gmt_modified >=?  AND gmt_modified <=?  AND id > \"\n                        + lastMaxId + \" ORDER BY id ASC LIMIT \" + startRow + \",\" + pageSize);\n        Assert.assertArrayEquals(mapperResult.getParamList().toArray(),\n                new Object[] {tenantId, appName, startTime, endTime});\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 65,
        "repo_name": "alibaba/nacos",
        "commit_id": "a3420b733b923940dd6aae8f129b248dff3b3771",
        "focal_db": {
            "rel_path": "plugin-default-impl/nacos-default-auth-plugin/src/main/java/com/alibaba/nacos/plugin/auth/impl/token/impl/JwtTokenManager.java",
            "method_src": "@Deprecated\n    public String createToken(Authentication authentication) {\n        return createToken(authentication.getName());\n    }",
            "method_tgt": "public String createToken(String userName) {\n        if (!authConfigs.isAuthEnabled()) {\n            return AUTH_DISABLED_TOKEN;\n        }\n        checkJwtParser();\n        return jwtParser.jwtBuilder().setUserName(userName).setExpiredTime(this.tokenValidityInSeconds).compact();\n    }"
        },
        "test_db": {
            "rel_path": "plugin-default-impl/nacos-default-auth-plugin/src/test/java/com/alibaba/nacos/plugin/auth/impl/token/impl/JwtTokenManagerTest.java",
            "method_src": "@Test\n    public void testCreateTokenWhenDisableAuth() {\n        when(authConfigs.isAuthEnabled()).thenReturn(false);\n        jwtTokenManager = new JwtTokenManager(authConfigs);\n        assertEquals(\"\", jwtTokenManager.createToken(\"nacos\"));\n    }",
            "method_tgt": "@Test\n    public void testCreateTokenWhenDisableAuth() {\n        when(authConfigs.isAuthEnabled()).thenReturn(false);\n        jwtTokenManager = new JwtTokenManager(authConfigs);\n        assertEquals(\"AUTH_DISABLED\", jwtTokenManager.createToken(\"nacos\"));\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 66,
        "repo_name": "alibaba/nacos",
        "commit_id": "5994e3739461db0d6052f6e816f309e59c0d0c4b",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/config/filter/impl/ConfigEncryptionFilter.java",
            "method_src": "@Override\n    public void doFilter(IConfigRequest request, IConfigResponse response, IConfigFilterChain filterChain)\n            throws NacosException {\n        if (Objects.nonNull(request) && request instanceof ConfigRequest && Objects.isNull(response)) {\n            \n            // Publish configuration, encrypt\n            ConfigRequest configRequest = (ConfigRequest) request;\n            String dataId = configRequest.getDataId();\n            String content = configRequest.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);\n            String secretKey = pair.getFirst();\n            String encryptContent = pair.getSecond();\n            \n            ((ConfigRequest) request).setContent(encryptContent);\n            ((ConfigRequest) request).setEncryptedDataKey(secretKey);\n        }\n        if (Objects.nonNull(response) && response instanceof ConfigResponse && Objects.isNull(request)) {\n            \n            // Get configuration, decrypt\n            ConfigResponse configResponse = (ConfigResponse) response;\n            \n            String dataId = configResponse.getDataId();\n            String encryptedDataKey = configResponse.getEncryptedDataKey();\n            String content = configResponse.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, encryptedDataKey, content);\n            String decryptContent = pair.getSecond();\n            ((ConfigResponse) response).setContent(decryptContent);\n        }\n        filterChain.doFilter(request, response);\n    }",
            "method_tgt": "@Override\n    public void doFilter(IConfigRequest request, IConfigResponse response, IConfigFilterChain filterChain)\n            throws NacosException {\n        if (Objects.nonNull(request) && request instanceof ConfigRequest && Objects.isNull(response)) {\n            \n            // Publish configuration, encrypt\n            ConfigRequest configRequest = (ConfigRequest) request;\n            String dataId = configRequest.getDataId();\n            String content = configRequest.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.encryptHandler(dataId, content);\n            String secretKey = pair.getFirst();\n            String encryptContent = pair.getSecond();\n            if (!StringUtils.isBlank(encryptContent) && !encryptContent.equals(content)) {\n                ((ConfigRequest) request).setContent(encryptContent);\n            }\n            if (!StringUtils.isBlank(secretKey) && !secretKey.equals(((ConfigRequest) request).getEncryptedDataKey())) {\n                ((ConfigRequest) request).setEncryptedDataKey(secretKey);\n            } else if (StringUtils.isBlank(((ConfigRequest) request).getEncryptedDataKey()) && StringUtils.isBlank(secretKey)) {\n                ((ConfigRequest) request).setEncryptedDataKey(\"\");\n            }\n        }\n        if (Objects.nonNull(response) && response instanceof ConfigResponse && Objects.isNull(request)) {\n            \n            // Get configuration, decrypt\n            ConfigResponse configResponse = (ConfigResponse) response;\n            \n            String dataId = configResponse.getDataId();\n            String encryptedDataKey = configResponse.getEncryptedDataKey();\n            String content = configResponse.getContent();\n            \n            Pair<String, String> pair = EncryptionHandler.decryptHandler(dataId, encryptedDataKey, content);\n            String secretKey = pair.getFirst();\n            String decryptContent = pair.getSecond();\n            if (!StringUtils.isBlank(decryptContent) && !decryptContent.equals(content)) {\n                ((ConfigResponse) response).setContent(decryptContent);\n            }\n            if (!StringUtils.isBlank(secretKey) && !secretKey.equals(((ConfigResponse) response).getEncryptedDataKey())) {\n                ((ConfigResponse) response).setEncryptedDataKey(secretKey);\n            } else if (StringUtils.isBlank(((ConfigResponse) response).getEncryptedDataKey()) && StringUtils.isBlank(secretKey)) {\n                ((ConfigResponse) response).setEncryptedDataKey(\"\");\n            }\n        }\n        filterChain.doFilter(request, response);\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/config/filter/impl/ConfigEncryptionFilterTest.java",
            "method_src": "@Test\n    public void testDoFilter() throws NacosException {\n        configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n        \n        Mockito.verify(configRequest).getDataId();\n        Mockito.verify(configRequest).getContent();\n        \n        configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n        \n        Mockito.verify(configResponse).getDataId();\n        Mockito.verify(configResponse).getContent();\n        Mockito.verify(configResponse).getEncryptedDataKey();\n    }",
            "method_tgt": "@Test\n    public void testDoFilter() throws NacosException {\n        configEncryptionFilter.doFilter(configRequest, null, iConfigFilterChain);\n        \n        Mockito.verify(configRequest, Mockito.atLeast(1)).getDataId();\n        Mockito.verify(configRequest, Mockito.atLeast(1)).getContent();\n        \n        configEncryptionFilter.doFilter(null, configResponse, iConfigFilterChain);\n        \n        Mockito.verify(configResponse, Mockito.atLeast(1)).getDataId();\n        Mockito.verify(configResponse, Mockito.atLeast(1)).getContent();\n        Mockito.verify(configResponse, Mockito.atLeast(1)).getEncryptedDataKey();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 67,
        "repo_name": "alibaba/nacos",
        "commit_id": "49f34868ff3e0c3bc8cfcd9f3b385e27ca3dae59",
        "focal_db": {
            "rel_path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java",
            "method_src": "public void destroy(final String namespace) {\n        final Object monitor = lockers.get(namespace);\n        if (monitor == null) {\n            return;\n        }\n        synchronized (monitor) {\n            Map<String, Set<ExecutorService>> subResource = resourcesManager.get(namespace);\n            if (subResource == null) {\n                return;\n            }\n            for (Map.Entry<String, Set<ExecutorService>> entry : subResource.entrySet()) {\n                for (ExecutorService executor : entry.getValue()) {\n                    ThreadUtils.shutdownThreadPool(executor);\n                }\n            }\n            resourcesManager.get(namespace).clear();\n            resourcesManager.remove(namespace);\n        }\n    }",
            "method_tgt": "public void destroy(final String namespace, final String group) {\n        resourcesManager.computeIfPresent(namespace, (namespaceKey, map) -> {\n            map.computeIfPresent(group, (groupKey, set) -> {\n                for (ExecutorService executor : set) {\n                    ThreadUtils.shutdownThreadPool(executor);\n                }\n                set.clear();\n                return null;\n            });\n            return map;\n        });\n    }"
        },
        "test_db": {
            "rel_path": "common/src/test/java/com/alibaba/nacos/common/executor/ThreadPoolManagerTest.java",
            "method_src": "@Test\n    public void test() {\n        ThreadPoolManager manager = ThreadPoolManager.getInstance();\n        ExecutorService executor = ExecutorFactory.newSingleExecutorService();\n        String namespace = \"test\";\n        String group = \"test\";\n        \n        manager.register(namespace, group, executor);\n        Assert.assertTrue(manager.getResourcesManager().containsKey(namespace));\n        Assert.assertEquals(1, manager.getResourcesManager().get(namespace).get(group).size());\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.register(namespace, group, ExecutorFactory.newSingleExecutorService());\n        Assert.assertEquals(2, manager.getResourcesManager().get(namespace).get(group).size());\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.destroy(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().get(namespace).containsKey(group));\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.register(namespace, group, executor);\n        manager.destroy(namespace);\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.register(namespace, group, executor);\n        manager.deregister(namespace, group, ExecutorFactory.newSingleExecutorService());\n        Assert.assertEquals(1, manager.getResourcesManager().get(namespace).get(group).size());\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.deregister(namespace, group, executor);\n        Assert.assertEquals(0, manager.getResourcesManager().get(namespace).get(group).size());\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.register(namespace, group, executor);\n        manager.deregister(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().get(namespace).containsKey(group));\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.register(namespace, group, executor);\n        manager.register(namespace, group, ExecutorFactory.newSingleExecutorService());\n        ThreadPoolManager.shutdown();\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n        \n        manager.destroy(namespace);\n        manager.destroy(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n        Assert.assertTrue(manager.getLockers().containsKey(namespace));\n    }",
            "method_tgt": "@Test\n    public void test() {\n        ThreadPoolManager manager = ThreadPoolManager.getInstance();\n        ExecutorService executor = ExecutorFactory.newSingleExecutorService();\n        String namespace = \"test\";\n        String group = \"test\";\n        \n        manager.register(namespace, group, executor);\n        Assert.assertTrue(manager.getResourcesManager().containsKey(namespace));\n        Assert.assertEquals(1, manager.getResourcesManager().get(namespace).get(group).size());\n        \n        manager.register(namespace, group, ExecutorFactory.newSingleExecutorService());\n        Assert.assertEquals(2, manager.getResourcesManager().get(namespace).get(group).size());\n        \n        manager.destroy(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().get(namespace).containsKey(group));\n        \n        manager.register(namespace, group, executor);\n        manager.destroy(namespace);\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n        \n        manager.register(namespace, group, executor);\n        manager.deregister(namespace, group, ExecutorFactory.newSingleExecutorService());\n        Assert.assertEquals(1, manager.getResourcesManager().get(namespace).get(group).size());\n        \n        manager.deregister(namespace, group, executor);\n        Assert.assertEquals(0, manager.getResourcesManager().get(namespace).get(group).size());\n        \n        manager.register(namespace, group, executor);\n        manager.deregister(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().get(namespace).containsKey(group));\n        \n        manager.register(namespace, group, executor);\n        manager.register(namespace, group, ExecutorFactory.newSingleExecutorService());\n        ThreadPoolManager.shutdown();\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n        \n        manager.destroy(namespace);\n        manager.destroy(namespace, group);\n        Assert.assertFalse(manager.getResourcesManager().containsKey(namespace));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 68,
        "repo_name": "alibaba/nacos",
        "commit_id": "6acabeca6774f6ea09f715e384e7d70fe20c0ac8",
        "focal_db": {
            "rel_path": "plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImpl.java",
            "method_src": "@Override\n    public void deletePermission(String role, String resource, String action) {\n        String sql = \"DELETE FROM permissions WHERE role=? AND resource=? AND action=?\";\n        EmbeddedStorageContextUtils.addSqlContext(sql, role, resource, action);\n        databaseOperate.blockUpdate();\n    }",
            "method_tgt": "@Override\n    public void deletePermission(String role, String resource, String action) {\n        String sql = \"DELETE FROM permissions WHERE role=? AND resource=? AND action=?\";\n        EmbeddedStorageContextHolder.addSqlContext(sql, role, resource, action);\n        databaseOperate.blockUpdate();\n    }"
        },
        "test_db": {
            "rel_path": "plugin-default-impl/src/test/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedPermissionPersistServiceImplTest.java",
            "method_src": "@Test\n    public void testDeletePermission() {\n        embeddedPermissionPersistService.deletePermission(\"role\", \"resource\", \"action\");\n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextUtils.getCurrentSqlContext();\n        \n        Mockito.verify(databaseOperate).blockUpdate();\n    }",
            "method_tgt": "@Test\n    public void testDeletePermission() {\n        embeddedPermissionPersistService.deletePermission(\"role\", \"resource\", \"action\");\n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextHolder.getCurrentSqlContext();\n        \n        Mockito.verify(databaseOperate).blockUpdate();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 69,
        "repo_name": "alibaba/nacos",
        "commit_id": "6acabeca6774f6ea09f715e384e7d70fe20c0ac8",
        "focal_db": {
            "rel_path": "plugin-default-impl/src/main/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImpl.java",
            "method_src": "@Override\n    public void deleteRole(String role) {\n        String sql = \"DELETE FROM roles WHERE role=?\";\n        try {\n            EmbeddedStorageContextUtils.addSqlContext(sql, role);\n            databaseOperate.update(EmbeddedStorageContextUtils.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextUtils.cleanAllContext();\n        }\n    }",
            "method_tgt": "@Override\n    public void deleteRole(String role, String username) {\n        String sql = \"DELETE FROM roles WHERE role=? AND username=?\";\n        try {\n            EmbeddedStorageContextHolder.addSqlContext(sql, role, username);\n            databaseOperate.update(EmbeddedStorageContextHolder.getCurrentSqlContext());\n        } finally {\n            EmbeddedStorageContextHolder.cleanAllContext();\n        }\n    }"
        },
        "test_db": {
            "rel_path": "plugin-default-impl/src/test/java/com/alibaba/nacos/plugin/auth/impl/persistence/EmbeddedRolePersistServiceImplTest.java",
            "method_src": "@Test\n    public void testDeleteRole() {\n        embeddedRolePersistService.deleteRole(\"role\");\n        embeddedRolePersistService.deleteRole(\"role\", \"userName\");\n        \n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextUtils.getCurrentSqlContext();\n        \n        Assert.assertEquals(currentSqlContext.size(), 0);\n    }",
            "method_tgt": "@Test\n    public void testDeleteRole() {\n        embeddedRolePersistService.deleteRole(\"role\");\n        embeddedRolePersistService.deleteRole(\"role\", \"userName\");\n        \n        List<ModifyRequest> currentSqlContext = EmbeddedStorageContextHolder.getCurrentSqlContext();\n        \n        Assert.assertEquals(currentSqlContext.size(), 0);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 70,
        "repo_name": "alibaba/nacos",
        "commit_id": "aa6144aa8056bc86166e579ae14e49d4ef3cce7c",
        "focal_db": {
            "rel_path": "console/src/main/java/com/alibaba/nacos/console/controller/NamespaceController.java",
            "method_src": "@GetMapping(params = \"show=all\")\n    public NamespaceAllInfo getNamespace(@RequestParam(\"namespaceId\") String namespaceId) throws NacosException {\n        return namespaceOperationService.getNamespace(namespaceId);\n    }",
            "method_tgt": "@GetMapping(params = \"show=all\")\n    public Namespace getNamespace(@RequestParam(\"namespaceId\") String namespaceId) throws NacosException {\n        return namespaceOperationService.getNamespace(namespaceId);\n    }"
        },
        "test_db": {
            "rel_path": "console/src/test/java/com/alibaba/nacos/console/controller/NamespaceControllerTest.java",
            "method_src": "@Test\n    public void testGetNamespaceByNamespaceId() throws Exception {\n        NamespaceAllInfo namespace = new NamespaceAllInfo(\"\", \"public\", 0, 0, 0, \"\");\n        when(namespaceOperationService.getNamespace(\"\")).thenReturn(namespace);\n        assertEquals(namespace, namespaceController.getNamespace(\"\"));\n    }",
            "method_tgt": "@Test\n    public void testGetNamespaceByNamespaceId() throws Exception {\n        Namespace namespace = new Namespace(\"\", \"public\", \"\", 0, 0, 0);\n        when(namespaceOperationService.getNamespace(\"\")).thenReturn(namespace);\n        assertEquals(namespace, namespaceController.getNamespace(\"\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 71,
        "repo_name": "alibaba/nacos",
        "commit_id": "aa6144aa8056bc86166e579ae14e49d4ef3cce7c",
        "focal_db": {
            "rel_path": "console/src/main/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2.java",
            "method_src": "@GetMapping()\n    @Secured(resource = AuthConstants.CONSOLE_RESOURCE_NAME_PREFIX\n            + \"namespaces\", action = ActionTypes.READ, signType = SignType.CONSOLE)\n    public Result<NamespaceAllInfo> getNamespace(@RequestParam(\"namespaceId\") String namespaceId)\n            throws NacosException {\n        return Result.success(namespaceOperationService.getNamespace(namespaceId));\n    }",
            "method_tgt": "@GetMapping()\n    @Secured(resource = AuthConstants.CONSOLE_RESOURCE_NAME_PREFIX\n            + \"namespaces\", action = ActionTypes.READ, signType = SignType.CONSOLE)\n    public Result<Namespace> getNamespace(@RequestParam(\"namespaceId\") String namespaceId) throws NacosException {\n        return Result.success(namespaceOperationService.getNamespace(namespaceId));\n    }"
        },
        "test_db": {
            "rel_path": "console/src/test/java/com/alibaba/nacos/console/controller/v2/NamespaceControllerV2Test.java",
            "method_src": "@Test\n    public void testGetNamespace() throws NacosException {\n        NamespaceAllInfo namespaceAllInfo = new NamespaceAllInfo(TEST_NAMESPACE_ID, TEST_NAMESPACE_NAME, 200,\n                1, NamespaceTypeEnum.GLOBAL.getType(), TEST_NAMESPACE_DESC);\n        when(namespaceOperationService.getNamespace(TEST_NAMESPACE_ID)).thenReturn(namespaceAllInfo);\n        Result<NamespaceAllInfo> result = namespaceControllerV2.getNamespace(TEST_NAMESPACE_ID);\n        verify(namespaceOperationService).getNamespace(TEST_NAMESPACE_ID);\n        assertEquals(ErrorCode.SUCCESS.getCode(), result.getCode());\n        NamespaceAllInfo namespace = result.getData();\n        assertEquals(namespaceAllInfo.getNamespace(), namespace.getNamespace());\n        assertEquals(namespaceAllInfo.getNamespaceShowName(), namespace.getNamespaceShowName());\n        assertEquals(namespaceAllInfo.getNamespaceDesc(), namespace.getNamespaceDesc());\n        assertEquals(namespaceAllInfo.getQuota(), namespace.getQuota());\n        assertEquals(namespaceAllInfo.getConfigCount(), namespace.getConfigCount());\n    }",
            "method_tgt": "@Test\n    public void testGetNamespace() throws NacosException {\n        Namespace namespaceAllInfo = new Namespace(TEST_NAMESPACE_ID, TEST_NAMESPACE_NAME, TEST_NAMESPACE_DESC, 200, 1,\n                NamespaceTypeEnum.GLOBAL.getType());\n        when(namespaceOperationService.getNamespace(TEST_NAMESPACE_ID)).thenReturn(namespaceAllInfo);\n        Result<Namespace> result = namespaceControllerV2.getNamespace(TEST_NAMESPACE_ID);\n        verify(namespaceOperationService).getNamespace(TEST_NAMESPACE_ID);\n        assertEquals(ErrorCode.SUCCESS.getCode(), result.getCode());\n        Namespace namespace = result.getData();\n        assertEquals(namespaceAllInfo.getNamespace(), namespace.getNamespace());\n        assertEquals(namespaceAllInfo.getNamespaceShowName(), namespace.getNamespaceShowName());\n        assertEquals(namespaceAllInfo.getNamespaceDesc(), namespace.getNamespaceDesc());\n        assertEquals(namespaceAllInfo.getQuota(), namespace.getQuota());\n        assertEquals(namespaceAllInfo.getConfigCount(), namespace.getConfigCount());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 72,
        "repo_name": "alibaba/nacos",
        "commit_id": "260a3e65164b2077dec25757d55591b8d3e83fad",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java",
            "method_src": "@Override\n    public String findConfigInfoAggrByPageFetchRows(int startRow, int pageSize) {\n        return \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n    }",
            "method_tgt": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow =  context.getStartRow();\n        Integer pageSize =  context.getPageSize();\n        String dataId = (String) context.getWhereParameter(FieldConstant.DATA_ID);\n        String groupId = (String) context.getWhereParameter(FieldConstant.GROUP_ID);\n        String tenantId = (String) context.getWhereParameter(FieldConstant.TENANT_ID);\n        \n        String sql =\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                        + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String sql = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n    }",
            "method_tgt": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(FieldConstant.DATA_ID, dataId);\n        context.putWhereParameter(FieldConstant.GROUP_ID, groupId);\n        context.putWhereParameter(FieldConstant.TENANT_ID, tenantId);\n        context.setStartRow(startRow);\n        context.setPageSize(pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 73,
        "repo_name": "alibaba/nacos",
        "commit_id": "08f7c9ff2ae0fa3c0ecf805a29cfb259e6b7e172",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/ConfigInfoBetaMapperByDerby.java",
            "method_src": "@Override\n    public String findAllConfigInfoBetaForDumpAllFetchRows(int startRow, int pageSize) {\n        return \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips \"\n                + \" FROM (  SELECT id FROM config_info_beta ORDER BY id OFFSET \" + startRow + \" ROWS FETCH NEXT \"\n                + pageSize + \" ROWS ONLY  )\" + \" g, config_info_beta t WHERE g.id = t.id\";\n    }",
            "method_tgt": "@Override\n    public MapperResult findAllConfigInfoBetaForDumpAllFetchRows(MapperContext context) {\n        Integer startRow = context.getStartRow();\n        int pageSize = context.getPageSize();\n        \n        String sql = \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips \"\n                + \" FROM (  SELECT id FROM config_info_beta ORDER BY id OFFSET \" + startRow + \" ROWS FETCH NEXT \"\n                + pageSize + \" ROWS ONLY  )\" + \" g, config_info_beta t WHERE g.id = t.id\";\n    \n        List<Object> paramList = new ArrayList<>();\n        paramList.add(startRow);\n        paramList.add(pageSize);\n        \n        return new MapperResult(sql, paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/ConfigInfoBetaMapperByDerbyTest.java",
            "method_src": "@Test\n    public void testFindAllConfigInfoBetaForDumpAllFetchRows() {\n        String sql = configInfoBetaMapperByDerby.findAllConfigInfoBetaForDumpAllFetchRows(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips  FROM \"\n                        + \"(  SELECT id FROM config_info_beta ORDER BY id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY  ) g, \"\n                        + \"config_info_beta t WHERE g.id = t.id\");\n    }",
            "method_tgt": "@Test\n    public void testFindAllConfigInfoBetaForDumpAllFetchRows() {\n        MapperContext context = new MapperContext();\n        context.setStartRow(0);\n        context.setPageSize(5);\n        MapperResult result = configInfoBetaMapperByDerby.findAllConfigInfoBetaForDumpAllFetchRows(context);\n        String sql = result.getSql();\n        List<Object> paramList = result.getParamList();\n        Assert.assertEquals(sql,\n                \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips  FROM \"\n                        + \"(  SELECT id FROM config_info_beta ORDER BY id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY  ) g, \"\n                        + \"config_info_beta t WHERE g.id = t.id\");\n        Assert.assertEquals(paramList, Arrays.asList(0, 5));\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 74,
        "repo_name": "alibaba/nacos",
        "commit_id": "d16023c156c5bac02afa3c1990ed91f98c8e1476",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/derby/ConfigInfoBetaMapperByDerby.java",
            "method_src": "@Override\n    public String findAllConfigInfoBetaForDumpAllFetchRows(int startRow, int pageSize) {\n        return \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips \"\n                + \" FROM (  SELECT id FROM config_info_beta ORDER BY id OFFSET \" + startRow + \" ROWS FETCH NEXT \"\n                + pageSize + \" ROWS ONLY  )\" + \" g, config_info_beta t WHERE g.id = t.id\";\n    }",
            "method_tgt": "@Override\n    public MapperResult findAllConfigInfoBetaForDumpAllFetchRows(MapperContext context) {\n        Integer startRow = context.getStartRow();\n        int pageSize = context.getPageSize();\n        \n        String sql = \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips \"\n                + \" FROM (  SELECT id FROM config_info_beta ORDER BY id OFFSET \" + startRow + \" ROWS FETCH NEXT \"\n                + pageSize + \" ROWS ONLY  )\" + \" g, config_info_beta t WHERE g.id = t.id\";\n    \n        List<Object> paramList = new ArrayList<>();\n        paramList.add(startRow);\n        paramList.add(pageSize);\n        \n        return new MapperResult(sql, paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/derby/ConfigInfoBetaMapperByDerbyTest.java",
            "method_src": "@Test\n    public void testFindAllConfigInfoBetaForDumpAllFetchRows() {\n        String sql = configInfoBetaMapperByDerby.findAllConfigInfoBetaForDumpAllFetchRows(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips  FROM \"\n                        + \"(  SELECT id FROM config_info_beta ORDER BY id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY  ) g, \"\n                        + \"config_info_beta t WHERE g.id = t.id\");\n    }",
            "method_tgt": "@Test\n    public void testFindAllConfigInfoBetaForDumpAllFetchRows() {\n        MapperContext context = new MapperContext();\n        context.setStartRow(0);\n        context.setPageSize(5);\n        MapperResult result = configInfoBetaMapperByDerby.findAllConfigInfoBetaForDumpAllFetchRows(context);\n        String sql = result.getSql();\n        List<Object> paramList = result.getParamList();\n        Assert.assertEquals(sql,\n                \"SELECT t.id,data_id,group_id,tenant_id,app_name,content,md5,gmt_modified,beta_ips  FROM \"\n                        + \"(  SELECT id FROM config_info_beta ORDER BY id OFFSET 0 ROWS FETCH NEXT 5 ROWS ONLY  ) g, \"\n                        + \"config_info_beta t WHERE g.id = t.id\");\n        Assert.assertEquals(paramList, Arrays.asList(0, 5));\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 75,
        "repo_name": "alibaba/nacos",
        "commit_id": "d16023c156c5bac02afa3c1990ed91f98c8e1476",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java",
            "method_src": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow = (Integer) context.get(\"startRow\");\n        Integer pageSize = (Integer) context.get(\"pageSize\");\n        String dataId = (String) context.get(\"data_id\");\n        String groupId = (String) context.get(\"group_id\");\n        String tenantId = (String) context.get(\"tenant_id\");\n        \n        String sql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }",
            "method_tgt": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow = (Integer) context.getWhereParameter(\"startRow\");\n        Integer pageSize = (Integer) context.getWhereParameter(\"pageSize\");\n        String dataId = (String) context.getWhereParameter(\"data_id\");\n        String groupId = (String) context.getWhereParameter(\"group_id\");\n        String tenantId = (String) context.getWhereParameter(\"tenant_id\");\n        \n        String sql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.put(\"data_id\", dataId);\n        context.put(\"group_id\", groupId);\n        context.put(\"tenant_id\", tenantId);\n        context.put(\"startRow\", startRow);\n        context.put(\"pageSize\", pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }",
            "method_tgt": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.putWhereParameter(\"data_id\", dataId);\n        context.putWhereParameter(\"group_id\", groupId);\n        context.putWhereParameter(\"tenant_id\", tenantId);\n        context.putWhereParameter(\"startRow\", startRow);\n        context.putWhereParameter(\"pageSize\", pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 76,
        "repo_name": "alibaba/nacos",
        "commit_id": "1ff7a3f6bd9fbca44c6a2ccb0adf8e4b45985d9d",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java",
            "method_src": "@Override\n    public String findConfigInfoAggrByPageFetchRows(int startRow, int pageSize) {\n        return \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n    }",
            "method_tgt": "@Override\n    public MapperResult findConfigInfoAggrByPageFetchRows(MapperContext context) {\n        Integer startRow = (Integer) context.get(\"startRow\");\n        Integer pageSize = (Integer) context.get(\"pageSize\");\n        String dataId = (String) context.get(\"data_id\");\n        String groupId = (String) context.get(\"group_id\");\n        String tenantId = (String) context.get(\"tenant_id\");\n        \n        String sql = \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE data_id= ? AND \"\n                + \"group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT \" + startRow + \",\" + pageSize;\n        List<Object> paramList = CollectionUtils.list(dataId, groupId, tenantId);\n        return new MapperResult(sql, paramList);\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String sql = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n    }",
            "method_tgt": "@Test\n    public void testFindConfigInfoAggrByPageFetchRows() {\n        String dataId = \"data-id\";\n        String groupId = \"group-id\";\n        String tenantId = \"tenant-id\";\n        Integer startRow = 0;\n        Integer pageSize = 5;\n        \n        MapperContext context = new MapperContext();\n        context.put(\"data_id\", dataId);\n        context.put(\"group_id\", groupId);\n        context.put(\"tenant_id\", tenantId);\n        context.put(\"startRow\", startRow);\n        context.put(\"pageSize\", pageSize);\n        \n        MapperResult mapperResult = configInfoAggrMapperByMySql.findConfigInfoAggrByPageFetchRows(context);\n        String sql = mapperResult.getSql();\n        List<Object> paramList = mapperResult.getParamList();\n        \n        Assert.assertEquals(sql,\n                \"SELECT data_id,group_id,tenant_id,datum_id,app_name,content FROM config_info_aggr WHERE \"\n                        + \"data_id= ? AND group_id= ? AND tenant_id= ? ORDER BY datum_id LIMIT 0,5\");\n        Assert.assertEquals(paramList, Arrays.asList(dataId, groupId, tenantId));\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 77,
        "repo_name": "alibaba/nacos",
        "commit_id": "30954dc612209e0f77ec68c2061d7154fff60c5a",
        "focal_db": {
            "rel_path": "client/src/main/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoService.java",
            "method_src": "public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        synchronized (subscribes) {\n            subscribes.remove(ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster));\n        }\n    }",
            "method_tgt": "public void removeSubscriberForRedo(String serviceName, String groupName, String cluster) {\n        String key = ServiceInfo.getKey(NamingUtils.getGroupedName(serviceName, groupName), cluster);\n        synchronized (subscribes) {\n            SubscriberRedoData redoData = subscribes.get(key);\n            if (null != redoData && !redoData.isExpectedRegistered()) {\n                subscribes.remove(key);\n            }\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/com/alibaba/nacos/client/naming/remote/gprc/redo/NamingGrpcRedoServiceTest.java",
            "method_src": "@Test\n    public void testRemoveSubscriberForRedo() {\n        ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n        assertTrue(subscribes.isEmpty());\n        redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertFalse(subscribes.isEmpty());\n        redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertTrue(subscribes.isEmpty());\n    }",
            "method_tgt": "@Test\n    public void testRemoveSubscriberForRedo() {\n        ConcurrentMap<String, SubscriberRedoData> subscribes = getSubscriberRedoDataMap();\n        assertTrue(subscribes.isEmpty());\n        redoService.cacheSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertFalse(subscribes.isEmpty());\n        redoService.subscriberDeregister(SERVICE, GROUP, CLUSTER);\n        redoService.removeSubscriberForRedo(SERVICE, GROUP, CLUSTER);\n        assertTrue(subscribes.isEmpty());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 78,
        "repo_name": "alibaba/nacos",
        "commit_id": "41f03fea0f0ab5cd2c3df85a6a0a889bee5360ce",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySql.java",
            "method_src": "@Override\n    public String findConfigInfoBaseLikeFetchRows(Map<String, String> params, int startRow, int pageSize) {\n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,content FROM config_info WHERE \";\n        String where = \" 1=1 AND tenant_id='' \";\n        if (!StringUtils.isBlank(params.get(DATA_ID))) {\n            where += \" AND data_id LIKE ? \";\n        }\n        if (!StringUtils.isBlank(params.get(GROUP))) {\n            where += \" AND group_id LIKE \";\n        }\n        if (!StringUtils.isBlank(params.get(CONTENT))) {\n            where += \" AND content LIKE ? \";\n        }\n        return sqlFetchRows + where + \" LIMIT \" + startRow + \",\" + pageSize;\n    }",
            "method_tgt": "@Override\n    public String findConfigInfoBaseLikeFetchRows(Map<String, String> params, int startRow, int pageSize) {\n        final String sqlFetchRows = \"SELECT id,data_id,group_id,tenant_id,content FROM config_info WHERE \";\n        String where = \" 1=1 AND tenant_id='\" + NamespaceUtil.getNamespaceDefaultId() + \"' \";\n        if (!StringUtils.isBlank(params.get(DATA_ID))) {\n            where += \" AND data_id LIKE ? \";\n        }\n        if (!StringUtils.isBlank(params.get(GROUP))) {\n            where += \" AND group_id LIKE \";\n        }\n        if (!StringUtils.isBlank(params.get(CONTENT))) {\n            where += \" AND content LIKE ? \";\n        }\n        return sqlFetchRows + where + \" LIMIT \" + startRow + \",\" + pageSize;\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testGetTenantIdList() {\n        String sql = configInfoMapperByMySql.getTenantIdList(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT tenant_id FROM config_info WHERE tenant_id != '' GROUP BY tenant_id LIMIT 0,5\");\n    }",
            "method_tgt": "@Test\n    public void testGetTenantIdList() {\n        String sql = configInfoMapperByMySql.getTenantIdList(0, 5);\n        Assert.assertEquals(sql,\n                \"SELECT tenant_id FROM config_info WHERE tenant_id != '\"\n                        + NamespaceUtil.getNamespaceDefaultId() + \"' GROUP BY tenant_id LIMIT 0,5\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 79,
        "repo_name": "alibaba/nacos",
        "commit_id": "60528cd21bc607cc9de2934b02a7fe2532ea3af3",
        "focal_db": {
            "rel_path": "plugin/datasource/src/main/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySql.java",
            "method_src": "@Override\n    public String batchRemoveAggr(List<String> datumList) {\n        final StringBuilder datumString = new StringBuilder();\n        for (String datum : datumList) {\n            datumString.append('\\'').append(datum).append(\"',\");\n        }\n        datumString.deleteCharAt(datumString.length() - 1);\n        return \"DELETE FROM config_info_aggr WHERE data_id = ? AND group_id = ? AND tenant_id = ? AND datum_id IN (\"\n                + datumString + \")\";\n    }",
            "method_tgt": "@Override\n    public String batchRemoveAggr(int datumSize) {\n        final StringBuilder placeholderString = new StringBuilder();\n        for (int i = 0; i < datumSize; i++) {\n            if (i != 0) {\n                placeholderString.append(\", \");\n            }\n            placeholderString.append('?');\n        }\n        return \"DELETE FROM config_info_aggr WHERE data_id = ? AND group_id = ? AND tenant_id = ? AND datum_id IN (\"\n                + placeholderString + \")\";\n    }"
        },
        "test_db": {
            "rel_path": "plugin/datasource/src/test/java/com/alibaba/nacos/plugin/datasource/impl/mysql/ConfigInfoAggrMapperByMySqlTest.java",
            "method_src": "@Test\n    public void testBatchRemoveAggr() {\n        String sql = configInfoAggrMapperByMySql.batchRemoveAggr(Arrays.asList(\"1\", \"2\"));\n        Assert.assertEquals(sql, \"DELETE FROM config_info_aggr WHERE data_id = ? AND group_id = ? AND tenant_id = ? \"\n                + \"AND datum_id IN ('1','2')\");\n    }",
            "method_tgt": "@Test\n    public void testBatchRemoveAggr() {\n        String sql = configInfoAggrMapperByMySql.batchRemoveAggr(5);\n        Assert.assertEquals(sql, \"DELETE FROM config_info_aggr WHERE data_id = ? AND group_id = ? AND tenant_id = ? \"\n                + \"AND datum_id IN (?, ?, ?, ?, ?)\");\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 80,
        "repo_name": "apache/rocketmq",
        "commit_id": "b5cf3ca90aba1765519ccd3244dc31e3852051ea",
        "focal_db": {
            "rel_path": "broker/src/main/java/org/apache/rocketmq/broker/client/net/Broker2Client.java",
            "method_src": "public RemotingCommand resetOffset(String topic, String group, long timeStamp, boolean isForce) throws RemotingCommandException {\n        return resetOffset(topic, group, timeStamp, isForce, false);\n    }",
            "method_tgt": "public RemotingCommand resetOffset(String topic, String group, long timeStamp, boolean isForce,\n        boolean isC) throws RemotingCommandException {\n        final RemotingCommand response = RemotingCommand.createResponseCommand(null);\n\n        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(topic);\n        if (null == topicConfig) {\n            log.error(\"[reset-offset] reset offset failed, no topic in this broker. topic={}\", topic);\n            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n            response.setRemark(\"[reset-offset] reset offset failed, no topic in this broker. topic=\" + topic);\n            return response;\n        }\n\n        Map<MessageQueue, Long> offsetTable = new HashMap<>();\n\n        for (int i = 0; i < topicConfig.getWriteQueueNums(); i++) {\n            MessageQueue mq = new MessageQueue();\n            mq.setBrokerName(this.brokerController.getBrokerConfig().getBrokerName());\n            mq.setTopic(topic);\n            mq.setQueueId(i);\n\n            long consumerOffset =\n                this.brokerController.getConsumerOffsetManager().queryOffset(group, topic, i);\n            if (-1 == consumerOffset) {\n                response.setCode(ResponseCode.SYSTEM_ERROR);\n                response.setRemark(String.format(\"THe consumer group <%s> not exist\", group));\n                return response;\n            }\n\n            long timeStampOffset;\n            if (timeStamp == -1) {\n                try {\n                    timeStampOffset = this.brokerController.getMessageStore().getMaxOffsetInQueue(topic, i);\n                } catch (ConsumeQueueException e) {\n                    throw new RemotingCommandException(\"Failed to get max offset in queue\", e);\n                }\n            } else {\n                timeStampOffset = this.brokerController.getMessageStore().getOffsetInQueueByTime(topic, i, timeStamp);\n            }\n\n            if (timeStampOffset < 0) {\n                log.warn(\"reset offset is invalid. topic={}, queueId={}, timeStampOffset={}\", topic, i, timeStampOffset);\n                timeStampOffset = 0;\n            }\n\n            if (isForce || timeStampOffset < consumerOffset) {\n                offsetTable.put(mq, timeStampOffset);\n            } else {\n                offsetTable.put(mq, consumerOffset);\n            }\n        }\n\n        ResetOffsetRequestHeader requestHeader = new ResetOffsetRequestHeader();\n        requestHeader.setTopic(topic);\n        requestHeader.setGroup(group);\n        requestHeader.setTimestamp(timeStamp);\n        RemotingCommand request =\n            RemotingCommand.createRequestCommand(RequestCode.RESET_CONSUMER_CLIENT_OFFSET, requestHeader);\n        if (isC) {\n            // c++ language\n            ResetOffsetBodyForC body = new ResetOffsetBodyForC();\n            List<MessageQueueForC> offsetList = convertOffsetTable2OffsetList(offsetTable);\n            body.setOffsetTable(offsetList);\n            request.setBody(body.encode());\n        } else {\n            // other language\n            ResetOffsetBody body = new ResetOffsetBody();\n            body.setOffsetTable(offsetTable);\n            request.setBody(body.encode());\n        }\n\n        ConsumerGroupInfo consumerGroupInfo =\n            this.brokerController.getConsumerManager().getConsumerGroupInfo(group);\n\n        if (consumerGroupInfo != null && !consumerGroupInfo.getAllChannel().isEmpty()) {\n            ConcurrentMap<Channel, ClientChannelInfo> channelInfoTable =\n                consumerGroupInfo.getChannelInfoTable();\n            for (Map.Entry<Channel, ClientChannelInfo> entry : channelInfoTable.entrySet()) {\n                int version = entry.getValue().getVersion();\n                if (version >= MQVersion.Version.V3_0_7_SNAPSHOT.ordinal()) {\n                    try {\n                        this.brokerController.getRemotingServer().invokeOneway(entry.getKey(), request, 5000);\n                        log.info(\"[reset-offset] reset offset success. topic={}, group={}, clientId={}\",\n                            topic, group, entry.getValue().getClientId());\n                    } catch (Exception e) {\n                        log.error(\"[reset-offset] reset offset exception. topic={}, group={} ,error={}\",\n                            topic, group, e.toString());\n                    }\n                } else {\n                    response.setCode(ResponseCode.SYSTEM_ERROR);\n                    response.setRemark(\"the client does not support this feature. version=\"\n                        + MQVersion.getVersionDesc(version));\n                    log.warn(\"[reset-offset] the client does not support this feature. channel={}, version={}\",\n                        RemotingHelper.parseChannelRemoteAddr(entry.getKey()), MQVersion.getVersionDesc(version));\n                    return response;\n                }\n            }\n        } else {\n            String errorInfo =\n                String.format(\"Consumer not online, so can not reset offset, Group: %s Topic: %s Timestamp: %d\",\n                    requestHeader.getGroup(),\n                    requestHeader.getTopic(),\n                    requestHeader.getTimestamp());\n            log.error(errorInfo);\n            response.setCode(ResponseCode.CONSUMER_NOT_ONLINE);\n            response.setRemark(errorInfo);\n            return response;\n        }\n        response.setCode(ResponseCode.SUCCESS);\n        ResetOffsetBody resBody = new ResetOffsetBody();\n        resBody.setOffsetTable(offsetTable);\n        response.setBody(resBody.encode());\n        return response;\n    }"
        },
        "test_db": {
            "rel_path": "broker/src/test/java/org/apache/rocketmq/broker/client/net/Broker2ClientTest.java",
            "method_src": "@Test\n    public void testResetOffsetNoTopicConfig() throws RemotingCommandException {\n        when(topicConfigManager.selectTopicConfig(defaultTopic)).thenReturn(null);\n        RemotingCommand response = broker2Client.resetOffset(defaultTopic, defaultGroup, timestamp, isForce);\n        assertEquals(ResponseCode.SYSTEM_ERROR, response.getCode());\n    }",
            "method_tgt": "@Test\n    public void testResetOffsetNoTopicConfig() throws RemotingCommandException {\n        when(topicConfigManager.selectTopicConfig(defaultTopic)).thenReturn(null);\n        RemotingCommand response = broker2Client.resetOffset(defaultTopic, defaultGroup, timestamp, isForce);\n        assertEquals(ResponseCode.TOPIC_NOT_EXIST, response.getCode());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 81,
        "repo_name": "apache/rocketmq",
        "commit_id": "b5cf3ca90aba1765519ccd3244dc31e3852051ea",
        "focal_db": {
            "rel_path": "broker/src/main/java/org/apache/rocketmq/broker/processor/PeekMessageProcessor.java",
            "method_src": "@Override\n    public RemotingCommand processRequest(final ChannelHandlerContext ctx,\n        RemotingCommand request) throws RemotingCommandException {\n        return this.processRequest(ctx.channel(), request, true);\n    }",
            "method_tgt": "private RemotingCommand processRequest(final Channel channel, RemotingCommand request, boolean brokerAllowSuspend)\n        throws RemotingCommandException {\n        final long beginTimeMills = this.brokerController.getMessageStore().now();\n        RemotingCommand response = RemotingCommand.createResponseCommand(PopMessageResponseHeader.class);\n        final PopMessageResponseHeader responseHeader = (PopMessageResponseHeader) response.readCustomHeader();\n        final PeekMessageRequestHeader requestHeader =\n            (PeekMessageRequestHeader) request.decodeCommandCustomHeader(PeekMessageRequestHeader.class);\n\n        response.setOpaque(request.getOpaque());\n\n        if (!PermName.isReadable(this.brokerController.getBrokerConfig().getBrokerPermission())) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark(String.format(\"the broker[%s] peeking message is forbidden\", this.brokerController.getBrokerConfig().getBrokerIP1()));\n            return response;\n        }\n\n        TopicConfig topicConfig = this.brokerController.getTopicConfigManager().selectTopicConfig(requestHeader.getTopic());\n        if (null == topicConfig) {\n            LOG.error(\"The topic {} not exist, consumer: {} \", requestHeader.getTopic(), RemotingHelper.parseChannelRemoteAddr(channel));\n            response.setCode(ResponseCode.TOPIC_NOT_EXIST);\n            response.setRemark(String.format(\"topic[%s] not exist, apply first please! %s\", requestHeader.getTopic(), FAQUrl.suggestTodo(FAQUrl.APPLY_TOPIC_URL)));\n            return response;\n        }\n\n        if (!PermName.isReadable(topicConfig.getPerm())) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark(\"the topic[\" + requestHeader.getTopic() + \"] peeking message is forbidden\");\n            return response;\n        }\n\n        if (requestHeader.getQueueId() >= topicConfig.getReadQueueNums()) {\n            String errorInfo = String.format(\"queueId[%d] is illegal, topic:[%s] topicConfig.readQueueNums:[%d] consumer:[%s]\",\n                requestHeader.getQueueId(), requestHeader.getTopic(), topicConfig.getReadQueueNums(), channel.remoteAddress());\n            LOG.warn(errorInfo);\n            response.setCode(ResponseCode.INVALID_PARAMETER);\n            response.setRemark(errorInfo);\n            return response;\n        }\n        SubscriptionGroupConfig subscriptionGroupConfig = this.brokerController.getSubscriptionGroupManager().findSubscriptionGroupConfig(requestHeader.getConsumerGroup());\n        if (null == subscriptionGroupConfig) {\n            response.setCode(ResponseCode.SUBSCRIPTION_GROUP_NOT_EXIST);\n            response.setRemark(String.format(\"subscription group [%s] does not exist, %s\", requestHeader.getConsumerGroup(), FAQUrl.suggestTodo(FAQUrl.SUBSCRIPTION_GROUP_NOT_EXIST)));\n            return response;\n        }\n\n        if (!subscriptionGroupConfig.isConsumeEnable()) {\n            response.setCode(ResponseCode.NO_PERMISSION);\n            response.setRemark(\"subscription group no permission, \" + requestHeader.getConsumerGroup());\n            return response;\n        }\n        int randomQ = random.nextInt(100);\n        int reviveQid = randomQ % this.brokerController.getBrokerConfig().getReviveQueueNum();\n        GetMessageResult getMessageResult = new GetMessageResult(requestHeader.getMaxMsgNums());\n        boolean needRetry = randomQ % 5 == 0;\n        long popTime = System.currentTimeMillis();\n        long restNum = 0;\n        BrokerConfig brokerConfig = brokerController.getBrokerConfig();\n        if (needRetry) {\n            TopicConfig retryTopicConfig = this.brokerController.getTopicConfigManager()\n                .selectTopicConfig(KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2()));\n            if (retryTopicConfig != null) {\n                for (int i = 0; i < retryTopicConfig.getReadQueueNums(); i++) {\n                    int queueId = (randomQ + i) % retryTopicConfig.getReadQueueNums();\n                    restNum = peekMsgFromQueue(true, getMessageResult, requestHeader, queueId, restNum, reviveQid, channel, popTime);\n                }\n            }\n        }\n        if (requestHeader.getQueueId() < 0) {\n            // read all queue\n            for (int i = 0; i < topicConfig.getReadQueueNums(); i++) {\n                int queueId = (randomQ + i) % topicConfig.getReadQueueNums();\n                restNum = peekMsgFromQueue(false, getMessageResult, requestHeader, queueId, restNum, reviveQid, channel, popTime);\n            }\n        } else {\n            int queueId = requestHeader.getQueueId();\n            restNum = peekMsgFromQueue(false, getMessageResult, requestHeader, queueId, restNum, reviveQid, channel, popTime);\n        }\n        // if not full , fetch retry again\n        if (!needRetry && getMessageResult.getMessageMapedList().size() < requestHeader.getMaxMsgNums()) {\n            TopicConfig retryTopicConfig = this.brokerController.getTopicConfigManager()\n                .selectTopicConfig(KeyBuilder.buildPopRetryTopic(requestHeader.getTopic(), requestHeader.getConsumerGroup(), brokerConfig.isEnableRetryTopicV2()));\n            if (retryTopicConfig != null) {\n                for (int i = 0; i < retryTopicConfig.getReadQueueNums(); i++) {\n                    int queueId = (randomQ + i) % retryTopicConfig.getReadQueueNums();\n                    restNum = peekMsgFromQueue(true, getMessageResult, requestHeader, queueId, restNum, reviveQid, channel, popTime);\n                }\n            }\n        }\n        if (!getMessageResult.getMessageBufferList().isEmpty()) {\n            response.setCode(ResponseCode.SUCCESS);\n            getMessageResult.setStatus(GetMessageStatus.FOUND);\n        } else {\n            response.setCode(ResponseCode.PULL_NOT_FOUND);\n            getMessageResult.setStatus(GetMessageStatus.NO_MESSAGE_IN_QUEUE);\n\n        }\n        responseHeader.setRestNum(restNum);\n        response.setRemark(getMessageResult.getStatus().name());\n        switch (response.getCode()) {\n            case ResponseCode.SUCCESS:\n\n                this.brokerController.getBrokerStatsManager().incGroupGetNums(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n                    getMessageResult.getMessageCount());\n\n                this.brokerController.getBrokerStatsManager().incGroupGetSize(requestHeader.getConsumerGroup(), requestHeader.getTopic(),\n                    getMessageResult.getBufferTotalSize());\n\n                this.brokerController.getBrokerStatsManager().incBrokerGetNums(requestHeader.getTopic(), getMessageResult.getMessageCount());\n\n                if (this.brokerController.getBrokerConfig().isTransferMsgByHeap()) {\n                    final byte[] r = this.readGetMessageResult(getMessageResult, requestHeader.getConsumerGroup(), requestHeader.getTopic(), requestHeader.getQueueId());\n                    this.brokerController.getBrokerStatsManager().incGroupGetLatency(requestHeader.getConsumerGroup(),\n                        requestHeader.getTopic(), requestHeader.getQueueId(),\n                        (int) (this.brokerController.getMessageStore().now() - beginTimeMills));\n                    response.setBody(r);\n                } else {\n                    final GetMessageResult tmpGetMessageResult = getMessageResult;\n                    try {\n                        FileRegion fileRegion =\n                            new ManyMessageTransfer(response.encodeHeader(getMessageResult.getBufferTotalSize()), getMessageResult);\n                        RemotingCommand finalResponse = response;\n                        channel.writeAndFlush(fileRegion)\n                            .addListener((ChannelFutureListener) future -> {\n                                tmpGetMessageResult.release();\n                                Attributes attributes = RemotingMetricsManager.newAttributesBuilder()\n                                    .put(LABEL_REQUEST_CODE, RemotingHelper.getRequestCodeDesc(request.getCode()))\n                                    .put(LABEL_RESPONSE_CODE, RemotingHelper.getResponseCodeDesc(finalResponse.getCode()))\n                                    .put(LABEL_RESULT, RemotingMetricsManager.getWriteAndFlushResult(future))\n                                    .build();\n                                RemotingMetricsManager.rpcLatency.record(request.getProcessTimer().elapsed(TimeUnit.MILLISECONDS), attributes);\n                                if (!future.isSuccess()) {\n                                    LOG.error(\"Fail to transfer messages from page cache to {}\", channel.remoteAddress(), future.cause());\n                                }\n                            });\n                    } catch (Throwable e) {\n                        LOG.error(\"Error occurred when transferring messages from page cache\", e);\n                        getMessageResult.release();\n                    }\n\n                    response = null;\n                }\n                break;\n            default:\n                assert false;\n        }\n        return response;\n    }"
        },
        "test_db": {
            "rel_path": "broker/src/test/java/org/apache/rocketmq/broker/processor/PeekMessageProcessorTest.java",
            "method_src": "@Test\n    public void testProcessRequest_QueueIdError() throws RemotingCommandException {\n        RemotingCommand request = createPeekMessageRequest(\"group\",\"topic\",17);\n        RemotingCommand response = peekMessageProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.SYSTEM_ERROR);\n    }",
            "method_tgt": "@Test\n    public void testProcessRequest_QueueIdError() throws RemotingCommandException {\n        RemotingCommand request = createPeekMessageRequest(\"group\",\"topic\",17);\n        RemotingCommand response = peekMessageProcessor.processRequest(handlerContext, request);\n        assertThat(response.getCode()).isEqualTo(ResponseCode.INVALID_PARAMETER);\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 82,
        "repo_name": "apache/rocketmq",
        "commit_id": "87b97f271c96bdbb320b1e127cbeaaa4e83c4c2a",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java",
            "method_src": "protected List<MessageQueue> genMessageQueueFromQueueData(QueueData queueData, Resource topic,\n        TopicMessageType topicMessageType, Broker broker) {\n        List<MessageQueue> messageQueueList = new ArrayList<>();\n\n        int r = 0;\n        int w = 0;\n        int rw = 0;\n        if (PermName.isWriteable(queueData.getPerm()) && PermName.isReadable(queueData.getPerm())) {\n            rw = Math.min(queueData.getWriteQueueNums(), queueData.getReadQueueNums());\n            r = queueData.getReadQueueNums() - rw;\n            w = queueData.getWriteQueueNums() - rw;\n        } else if (PermName.isWriteable(queueData.getPerm())) {\n            w = queueData.getWriteQueueNums();\n        } else if (PermName.isReadable(queueData.getPerm())) {\n            r = queueData.getReadQueueNums();\n        }\n\n        // r here means readOnly queue nums, w means writeOnly queue nums, while rw means both readable and writable queue nums.\n        int queueIdIndex = 0;\n        for (int i = 0; i < r; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.READ)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        for (int i = 0; i < w; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.WRITE)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        for (int i = 0; i < rw; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.READ_WRITE)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        return messageQueueList;\n    }",
            "method_tgt": "protected List<MessageQueue> genMessageQueueFromQueueData(QueueData queueData, Resource topic,\n        TopicMessageType topicMessageType, Broker broker) {\n        List<MessageQueue> messageQueueList = new ArrayList<>();\n\n        int r = 0;\n        int w = 0;\n        int rw = 0;\n        int n = 0;\n        if (PermName.isWriteable(queueData.getPerm()) && PermName.isReadable(queueData.getPerm())) {\n            rw = Math.min(queueData.getWriteQueueNums(), queueData.getReadQueueNums());\n            r = queueData.getReadQueueNums() - rw;\n            w = queueData.getWriteQueueNums() - rw;\n        } else if (PermName.isWriteable(queueData.getPerm())) {\n            w = queueData.getWriteQueueNums();\n        } else if (PermName.isReadable(queueData.getPerm())) {\n            r = queueData.getReadQueueNums();\n        } else if (!PermName.isAccessible(queueData.getPerm())) {\n            n = Math.max(1, Math.max(queueData.getWriteQueueNums(), queueData.getReadQueueNums()));\n        }\n\n        // r here means readOnly queue nums, w means writeOnly queue nums, while rw means both readable and writable queue nums.\n        int queueIdIndex = 0;\n        for (int i = 0; i < r; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.READ)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        for (int i = 0; i < w; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.WRITE)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        for (int i = 0; i < rw; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.READ_WRITE)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        for (int i = 0; i < n; i++) {\n            MessageQueue messageQueue = MessageQueue.newBuilder().setBroker(broker).setTopic(topic)\n                .setId(queueIdIndex++)\n                .setPermission(Permission.NONE)\n                .addAllAcceptMessageTypes(parseTopicMessageType(topicMessageType))\n                .build();\n            messageQueueList.add(messageQueue);\n        }\n\n        return messageQueueList;\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
            "method_src": "@Test\n    public void testGenPartitionFromQueueData() throws Exception {\n        // test queueData with 8 read queues, 8 write queues, and rw permission, expect 8 rw queues.\n        QueueData queueDataWith8R8WPermRW = createQueueData(8, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermRW, GRPC_TOPIC, TopicMessageType.NORMAL, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermRW.size());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.NORMAL.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and read only permission, expect 8 read only queues.\n        QueueData queueDataWith8R8WPermR = createQueueData(8, 8, PermName.PERM_READ);\n        List<MessageQueue> partitionWith8R8WPermR = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermR, GRPC_TOPIC, TopicMessageType.FIFO, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermR.size());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.FIFO.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and write only permission, expect 8 write only queues.\n        QueueData queueDataWith8R8WPermW = createQueueData(8, 8, PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermW, GRPC_TOPIC, TopicMessageType.TRANSACTION, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermW.size());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.TRANSACTION.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 8 read queues, 0 write queues, and rw permission, expect 8 read only queues.\n        QueueData queueDataWith8R0WPermRW = createQueueData(8, 0, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R0WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R0WPermRW, GRPC_TOPIC, TopicMessageType.DELAY, GRPC_BROKER);\n        assertEquals(8, partitionWith8R0WPermRW.size());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.DELAY.getNumber()).count());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 4 read queues, 8 write queues, and rw permission, expect 4 rw queues and  4 write only queues.\n        QueueData queueDataWith4R8WPermRW = createQueueData(4, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(8, partitionWith4R8WPermRW.size());\n        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n    }",
            "method_tgt": "@Test\n    public void testGenPartitionFromQueueData() throws Exception {\n        // test queueData with 8 read queues, 8 write queues, and rw permission, expect 8 rw queues.\n        QueueData queueDataWith8R8WPermRW = createQueueData(8, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermRW, GRPC_TOPIC, TopicMessageType.NORMAL, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermRW.size());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.NORMAL.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and read only permission, expect 8 read only queues.\n        QueueData queueDataWith8R8WPermR = createQueueData(8, 8, PermName.PERM_READ);\n        List<MessageQueue> partitionWith8R8WPermR = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermR, GRPC_TOPIC, TopicMessageType.FIFO, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermR.size());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.FIFO.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermR.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 8 read queues, 8 write queues, and write only permission, expect 8 write only queues.\n        QueueData queueDataWith8R8WPermW = createQueueData(8, 8, PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R8WPermW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R8WPermW, GRPC_TOPIC, TopicMessageType.TRANSACTION, GRPC_BROKER);\n        assertEquals(8, partitionWith8R8WPermW.size());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.TRANSACTION.getNumber()).count());\n        assertEquals(8, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R8WPermW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 8 read queues, 0 write queues, and rw permission, expect 8 read only queues.\n        QueueData queueDataWith8R0WPermRW = createQueueData(8, 0, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith8R0WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith8R0WPermRW, GRPC_TOPIC, TopicMessageType.DELAY, GRPC_BROKER);\n        assertEquals(8, partitionWith8R0WPermRW.size());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.DELAY.getNumber()).count());\n        assertEquals(8, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith8R0WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n\n        // test queueData with 4 read queues, 8 write queues, and rw permission, expect 4 rw queues and  4 write only queues.\n        QueueData queueDataWith4R8WPermRW = createQueueData(4, 8, PermName.PERM_READ | PermName.PERM_WRITE);\n        List<MessageQueue> partitionWith4R8WPermRW = this.routeActivity.genMessageQueueFromQueueData(queueDataWith4R8WPermRW, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(8, partitionWith4R8WPermRW.size());\n        assertEquals(8, partitionWith4R8WPermRW.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(4, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith4R8WPermRW.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 2 read queues, 2 write queues, and no permission, expect 2 no permission queues.\n        QueueData queueDataWith2R2WNoPerm = createQueueData(2, 2, 0);\n        List<MessageQueue> partitionWith2R2WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith2R2WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(2, partitionWith2R2WNoPerm.size());\n        assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(2, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith2R2WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());\n\n        // test queueData with 0 read queues, 0 write queues, and no permission, expect 1 no permission queue.\n        QueueData queueDataWith0R0WNoPerm = createQueueData(0, 0, 0);\n        List<MessageQueue> partitionWith0R0WNoPerm = this.routeActivity.genMessageQueueFromQueueData(queueDataWith0R0WNoPerm, GRPC_TOPIC, TopicMessageType.UNSPECIFIED, GRPC_BROKER);\n        assertEquals(1, partitionWith0R0WNoPerm.size());\n        assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getAcceptMessageTypesValue(0) == MessageType.MESSAGE_TYPE_UNSPECIFIED.getNumber()).count());\n        assertEquals(1, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.NONE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.WRITE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ_WRITE).count());\n        assertEquals(0, partitionWith0R0WNoPerm.stream().filter(a -> a.getPermission() == Permission.READ).count());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 83,
        "repo_name": "apache/rocketmq",
        "commit_id": "b6efbb11ca599cdf0c0899479d1221d9cc65eeea",
        "focal_db": {
            "rel_path": "tieredstore/src/main/java/org/apache/rocketmq/tieredstore/file/FlatMessageFile.java",
            "method_src": "@Override\n    public CompletableFuture<Long> getQueueOffsetByTimeAsync(long timestamp, BoundaryType boundaryType) {\n        long cqMin = getConsumeQueueMinOffset();\n        long cqMax = getConsumeQueueCommitOffset() - 1;\n        if (cqMax == -1 || cqMax < cqMin) {\n            return CompletableFuture.completedFuture(cqMin);\n        }\n\n        long minOffset = cqMin;\n        long maxOffset = cqMax;\n        List<String> queryLog = new ArrayList<>();\n        while (minOffset < maxOffset) {\n            long middle = minOffset + (maxOffset - minOffset) / 2;\n            ByteBuffer buffer = this.getMessageAsync(middle).join();\n            long storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n            queryLog.add(String.format(\n                \"(range=%d-%d, middle=%d, timestamp=%d)\", minOffset, maxOffset, middle, storeTime));\n            if (storeTime == timestamp) {\n                minOffset = middle;\n                break;\n            } else if (storeTime < timestamp) {\n                minOffset = middle + 1;\n            } else {\n                maxOffset = middle - 1;\n            }\n        }\n\n        long offset = minOffset;\n        while (true) {\n            long next = boundaryType == BoundaryType.LOWER ? offset - 1 : offset + 1;\n            if (next < cqMin || next > cqMax) {\n                break;\n            }\n            ByteBuffer buffer = this.getMessageAsync(next).join();\n            long storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n            if (storeTime == timestamp) {\n                offset = next;\n                continue;\n            }\n            break;\n        }\n\n        log.info(\"FlatMessageFile getQueueOffsetByTimeAsync, filePath={}, timestamp={}, result={}, log={}\",\n            filePath, timestamp, offset, JSON.toJSONString(queryLog));\n        return CompletableFuture.completedFuture(offset);\n    }",
            "method_tgt": "@Override\n    public CompletableFuture<Long> getQueueOffsetByTimeAsync(long timestamp, BoundaryType boundaryType) {\n        long cqMin = getConsumeQueueMinOffset();\n        long cqMax = getConsumeQueueCommitOffset() - 1;\n        if (cqMax == -1 || cqMax < cqMin) {\n            return CompletableFuture.completedFuture(cqMin);\n        }\n\n        ByteBuffer buffer = getMessageAsync(cqMax).join();\n        long storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n        if (storeTime < timestamp) {\n            log.info(\"FlatMessageFile getQueueOffsetByTimeAsync, exceeded maximum time, \" +\n                \"filePath={}, timestamp={}, result={}\", filePath, timestamp, cqMax + 1);\n            return CompletableFuture.completedFuture(cqMax + 1);\n        }\n\n        buffer = getMessageAsync(cqMin).join();\n        storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n        if (storeTime > timestamp) {\n            log.info(\"FlatMessageFile getQueueOffsetByTimeAsync, less than minimum time, \" +\n                \"filePath={}, timestamp={}, result={}\", filePath, timestamp, cqMin);\n            return CompletableFuture.completedFuture(cqMin);\n        }\n\n        // binary search lower bound index in a sorted array\n        long minOffset = cqMin;\n        long maxOffset = cqMax;\n        List<String> queryLog = new ArrayList<>();\n        while (minOffset < maxOffset) {\n            long middle = minOffset + (maxOffset - minOffset) / 2;\n            buffer = this.getMessageAsync(middle).join();\n            storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n            queryLog.add(String.format(\"(range=%d-%d, middle=%d, timestamp=%d, diff=%dms)\",\n                minOffset, maxOffset, middle, storeTime, timestamp - storeTime));\n            if (storeTime < timestamp) {\n                minOffset = middle + 1;\n            } else {\n                maxOffset = middle;\n            }\n        }\n\n        long offset = minOffset;\n        if (boundaryType == BoundaryType.UPPER) {\n            while (true) {\n                long next = offset + 1;\n                if (next > cqMax) {\n                    break;\n                }\n                buffer = this.getMessageAsync(next).join();\n                storeTime = MessageFormatUtil.getStoreTimeStamp(buffer);\n                if (storeTime == timestamp) {\n                    offset = next;\n                } else {\n                    break;\n                }\n            }\n        }\n\n        log.info(\"FlatMessageFile getQueueOffsetByTimeAsync, filePath={}, timestamp={}, result={}, log={}\",\n            filePath, timestamp, offset, JSON.toJSONString(queryLog));\n        return CompletableFuture.completedFuture(offset);\n    }"
        },
        "test_db": {
            "rel_path": "tieredstore/src/test/java/org/apache/rocketmq/tieredstore/file/FlatMessageFileTest.java",
            "method_src": "@Test\n    public void testBinarySearchInQueueByTime() {\n\n        // replace provider, need new factory again\n        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());\n        flatFileFactory = new FlatFileFactory(metadataStore, storeConfig);\n\n        // inject store time: 0, +100, +100, +100, +200\n        MessageQueue mq = new MessageQueue(\"TopicTest\", \"BrokerName\", 1);\n        FlatMessageFile flatFile = new FlatMessageFile(flatFileFactory, MessageStoreUtil.toFilePath(mq));\n        flatFile.initOffset(50);\n        long timestamp1 = 1000;\n        ByteBuffer buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 50);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp1);\n        flatFile.appendCommitLog(buffer);\n\n        long timestamp2 = timestamp1 + 100;\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 51);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 52);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 53);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n\n        long timestamp3 = timestamp2 + 100;\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 54);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp3);\n        flatFile.appendCommitLog(buffer);\n\n        // append message to consume queue\n        flatFile.consumeQueue.initOffset(50 * ConsumeQueue.CQ_STORE_UNIT_SIZE);\n\n        for (int i = 0; i < 5; i++) {\n            AppendResult appendResult = flatFile.appendConsumeQueue(new DispatchRequest(\n                mq.getTopic(), mq.getQueueId(), MessageFormatUtilTest.MSG_LEN * i,\n                MessageFormatUtilTest.MSG_LEN, 0, timestamp1, 50 + i,\n                \"\", \"\", 0, 0, null));\n            Assert.assertEquals(AppendResult.SUCCESS, appendResult);\n        }\n\n        // commit message will increase max consume queue offset\n        Assert.assertTrue(flatFile.commitAsync().join());\n\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3 + 1, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1 - 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1, BoundaryType.LOWER).join().longValue());\n\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp1 + 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp2, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp2 + 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3, BoundaryType.LOWER).join().longValue());\n\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp1 + 1, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(53, flatFile.getQueueOffsetByTimeAsync(timestamp2, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp2 + 1, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1 - 1, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3 + 1, BoundaryType.LOWER).join().longValue());\n\n        flatFile.destroy();\n    }",
            "method_tgt": "@Test\n    public void testBinarySearchInQueueByTime() {\n\n        // replace provider, need new factory again\n        storeConfig.setTieredBackendServiceProvider(PosixFileSegment.class.getName());\n        flatFileFactory = new FlatFileFactory(metadataStore, storeConfig);\n\n        // inject store time: 0, +100, +100, +100, +200\n        MessageQueue mq = new MessageQueue(\"TopicTest\", \"BrokerName\", 1);\n        FlatMessageFile flatFile = new FlatMessageFile(flatFileFactory, MessageStoreUtil.toFilePath(mq));\n        flatFile.initOffset(50);\n        long timestamp1 = 1000;\n        ByteBuffer buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 50);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp1);\n        flatFile.appendCommitLog(buffer);\n\n        long timestamp2 = timestamp1 + 100;\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 51);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 52);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 53);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp2);\n        flatFile.appendCommitLog(buffer);\n\n        long timestamp3 = timestamp2 + 100;\n        buffer = MessageFormatUtilTest.buildMockedMessageBuffer();\n        buffer.putLong(MessageFormatUtil.QUEUE_OFFSET_POSITION, 54);\n        buffer.putLong(MessageFormatUtil.STORE_TIMESTAMP_POSITION, timestamp3);\n        flatFile.appendCommitLog(buffer);\n\n        // append message to consume queue\n        flatFile.consumeQueue.initOffset(50 * ConsumeQueue.CQ_STORE_UNIT_SIZE);\n\n        for (int i = 0; i < 5; i++) {\n            AppendResult appendResult = flatFile.appendConsumeQueue(new DispatchRequest(\n                mq.getTopic(), mq.getQueueId(), MessageFormatUtilTest.MSG_LEN * i,\n                MessageFormatUtilTest.MSG_LEN, 0, timestamp1, 50 + i,\n                \"\", \"\", 0, 0, null));\n            Assert.assertEquals(AppendResult.SUCCESS, appendResult);\n        }\n\n        // commit message will increase max consume queue offset\n        Assert.assertTrue(flatFile.commitAsync().join());\n\n        // offset:            50,  51,   52,   53,   54\n        // inject store time: 0, +100, +100, +100, +200\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(0, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(0, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1 - 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1 - 1, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(50, flatFile.getQueueOffsetByTimeAsync(timestamp1, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp1 + 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp1 + 1, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(51, flatFile.getQueueOffsetByTimeAsync(timestamp2, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(53, flatFile.getQueueOffsetByTimeAsync(timestamp2, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp2 + 1, BoundaryType.UPPER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp2 + 1, BoundaryType.LOWER).join().longValue());\n\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(54, flatFile.getQueueOffsetByTimeAsync(timestamp3, BoundaryType.UPPER).join().longValue());\n\n        Assert.assertEquals(55, flatFile.getQueueOffsetByTimeAsync(timestamp3 + 1, BoundaryType.LOWER).join().longValue());\n        Assert.assertEquals(55, flatFile.getQueueOffsetByTimeAsync(timestamp3 + 1, BoundaryType.UPPER).join().longValue());\n\n        flatFile.destroy();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 84,
        "repo_name": "apache/rocketmq",
        "commit_id": "5262358140bcf7b283754a71dd16c2a5c6dbf821",
        "focal_db": {
            "rel_path": "client/src/main/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHook.java",
            "method_src": "@Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        CommandCustomHeader customHeader = request.readCustomHeader();\n        if (customHeader instanceof RpcRequestHeader) {\n            RpcRequestHeader requestHeader = (RpcRequestHeader) customHeader;\n            if (StringUtils.isNotEmpty(clientConfig.getNamespaceV2())) {\n                requestHeader.setNamespaced(true);\n                requestHeader.setNamespace(clientConfig.getNamespaceV2());\n            }\n        }\n    }",
            "method_tgt": "@Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        if (StringUtils.isNotEmpty(clientConfig.getNamespaceV2())) {\n            request.addExtField(MixAll.RPC_REQUEST_HEADER_NAMESPACED_FIELD, \"true\");\n            request.addExtField(MixAll.RPC_REQUEST_HEADER_NAMESPACE_FIELD, clientConfig.getNamespaceV2());\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
            "method_src": "@Test\n    public void testDoBeforeRequestWithNamespace() {\n        clientConfig = new ClientConfig();\n        clientConfig.setNamespaceV2(namespace);\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(pullMessageRequestHeader.getNamespaced()).isTrue();\n        assertThat(pullMessageRequestHeader.getNamespace()).isEqualTo(namespace);\n    }",
            "method_tgt": "@Test\n    public void testDoBeforeRequestWithNamespace() {\n        clientConfig = new ClientConfig();\n        clientConfig.setNamespaceV2(namespace);\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACED_FIELD)).isEqualTo(\"true\");\n        assertThat(request.getExtFields().get(MixAll.RPC_REQUEST_HEADER_NAMESPACE_FIELD)).isEqualTo(namespace);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 85,
        "repo_name": "apache/rocketmq",
        "commit_id": "5262358140bcf7b283754a71dd16c2a5c6dbf821",
        "focal_db": {
            "rel_path": "client/src/main/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHook.java",
            "method_src": "@Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        CommandCustomHeader customHeader = request.readCustomHeader();\n        if (customHeader instanceof RpcRequestHeader) {\n            RpcRequestHeader requestHeader = (RpcRequestHeader) customHeader;\n            if (StringUtils.isNotEmpty(clientConfig.getNamespaceV2())) {\n                requestHeader.setNamespaced(true);\n                requestHeader.setNamespace(clientConfig.getNamespaceV2());\n            }\n        }\n    }",
            "method_tgt": "@Override\n    public void doBeforeRequest(String remoteAddr, RemotingCommand request) {\n        if (StringUtils.isNotEmpty(clientConfig.getNamespaceV2())) {\n            request.addExtField(MixAll.RPC_REQUEST_HEADER_NAMESPACED_FIELD, \"true\");\n            request.addExtField(MixAll.RPC_REQUEST_HEADER_NAMESPACE_FIELD, clientConfig.getNamespaceV2());\n        }\n    }"
        },
        "test_db": {
            "rel_path": "client/src/test/java/org/apache/rocketmq/client/rpchook/NamespaceRpcHookTest.java",
            "method_src": "@Test\n    public void testDoBeforeRequestWithoutNamespace() {\n        clientConfig = new ClientConfig();\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(pullMessageRequestHeader.getNamespaced()).isNull();\n        assertThat(pullMessageRequestHeader.getNamespace()).isNull();\n    }",
            "method_tgt": "@Test\n    public void testDoBeforeRequestWithoutNamespace() {\n        clientConfig = new ClientConfig();\n        namespaceRpcHook = new NamespaceRpcHook(clientConfig);\n        PullMessageRequestHeader pullMessageRequestHeader = new PullMessageRequestHeader();\n        RemotingCommand request = RemotingCommand.createRequestCommand(RequestCode.PULL_MESSAGE, pullMessageRequestHeader);\n        namespaceRpcHook.doBeforeRequest(\"\", request);\n        assertThat(request.getExtFields()).isNull();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 86,
        "repo_name": "apache/rocketmq",
        "commit_id": "56e886bf70669befd7b9e7380e68751fe67f05b2",
        "focal_db": {
            "rel_path": "common/src/main/java/org/apache/rocketmq/common/UtilAll.java",
            "method_src": "public static void cleanBuffer(final ByteBuffer buffer) {\n        if (null == buffer) {\n            return;\n        }\n        PlatformDependent.freeDirectBuffer(buffer);\n    }",
            "method_tgt": "public static void cleanBuffer(final ByteBuffer buffer) {\n        if (null == buffer) {\n            return;\n        }\n\n        if (!buffer.isDirect()) {\n            return;\n        }\n\n        PlatformDependent.freeDirectBuffer(buffer);\n    }"
        },
        "test_db": {
            "rel_path": "common/src/test/java/org/apache/rocketmq/common/UtilAllTest.java",
            "method_src": "@Test\n    public void testCleanBuffer() {\n        UtilAll.cleanBuffer(null);\n        UtilAll.cleanBuffer(ByteBuffer.allocate(10));\n        UtilAll.cleanBuffer(ByteBuffer.allocate(0));\n    }",
            "method_tgt": "@Test\n    public void testCleanBuffer() {\n        UtilAll.cleanBuffer(null);\n        UtilAll.cleanBuffer(ByteBuffer.allocateDirect(10));\n        UtilAll.cleanBuffer(ByteBuffer.allocateDirect(0));\n        UtilAll.cleanBuffer(ByteBuffer.allocate(10));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 87,
        "repo_name": "apache/rocketmq",
        "commit_id": "7996ec3b3f7ccea01f66951ac639b48303bbf7a6",
        "focal_db": {
            "rel_path": "common/src/main/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtils.java",
            "method_src": "public static <K, V> V computeIfAbsent(ConcurrentMap<K, V> map, K key, Function<? super K, ? extends V> func) {\n        if (isJdk8) {\n            V v = map.get(key);\n            if (null == v) {\n                v = map.computeIfAbsent(key, func);\n            }\n            return v;\n        } else {\n            return map.computeIfAbsent(key, func);\n        }\n    }",
            "method_tgt": "public static <K, V> V computeIfAbsent(ConcurrentMap<K, V> map, K key, Function<? super K, ? extends V> func) {\n        Objects.requireNonNull(func);\n        if (isJdk8) {\n            V v = map.get(key);\n            if (null == v) {\n//                v = map.computeIfAbsent(key, func);\n\n                // this bug fix methods maybe cause `func.apply` multiple calls.\n                v = func.apply(key);\n                if (null == v) {\n                    return null;\n                }\n                final V res = map.putIfAbsent(key, v);\n                if (null != res) {\n                    // if pre value present, means other thread put value already, and putIfAbsent not effect\n                    // return exist value\n                    return res;\n                }\n            }\n            return v;\n        } else {\n            return map.computeIfAbsent(key, func);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "common/src/test/java/org/apache/rocketmq/common/utils/ConcurrentHashMapUtilsTest.java",
            "method_src": "@Test\n    public void computeIfAbsent() {\n\n        ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();\n        map.put(\"123\", \"1111\");\n        String value = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"234\");\n        assertEquals(\"1111\", value);\n        String value1 = ConcurrentHashMapUtils.computeIfAbsent(map, \"1232\", k -> \"2342\");\n        assertEquals(\"2342\", value1);\n        String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"2342\");\n        assertEquals(\"1111\", value2);\n    }",
            "method_tgt": "@Test\n    public void computeIfAbsent() {\n\n        ConcurrentHashMap<String, String> map = new ConcurrentHashMap<>();\n        map.put(\"123\", \"1111\");\n        String value = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"234\");\n        assertEquals(\"1111\", value);\n        String value1 = ConcurrentHashMapUtils.computeIfAbsent(map, \"1232\", k -> \"2342\");\n        assertEquals(\"2342\", value1);\n        String value2 = ConcurrentHashMapUtils.computeIfAbsent(map, \"123\", k -> \"2342\");\n        assertEquals(\"1111\", value2);\n//        map.computeIfAbsent(\"AaAa\", key->map.computeIfAbsent(\"BBBB\",key2->\"42\"));\n        ConcurrentHashMapUtils.computeIfAbsent(map, \"AaAa\", key -> map.computeIfAbsent(\"BBBB\", key2 -> \"42\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 88,
        "repo_name": "apache/rocketmq",
        "commit_id": "15c6889bb0abd014c06ef1452f791db9daa1ea08",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java",
            "method_src": "public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,\n        StreamObserver<ReceiveMessageResponse> responseObserver) {\n        ReceiveMessageResponseStreamWriter writer = createWriter(ctx, responseObserver);\n\n        try {\n            Settings settings = this.grpcClientSettingsManager.getClientSettings(ctx);\n            Subscription subscription = settings.getSubscription();\n            boolean fifo = subscription.getFifo();\n            int maxAttempts = settings.getBackoffPolicy().getMaxAttempts();\n            ProxyConfig config = ConfigurationManager.getProxyConfig();\n\n            Long timeRemaining = ctx.getRemainingMs();\n            long pollingTime;\n            if (request.hasLongPollingTimeout()) {\n                pollingTime = Durations.toMillis(request.getLongPollingTimeout());\n            } else {\n                pollingTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;\n            }\n            if (pollingTime < config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMinLongPollingTimeoutMillis();\n            }\n            if (pollingTime > config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMaxLongPollingTimeoutMillis();\n            }\n\n            if (pollingTime > timeRemaining) {\n                if (timeRemaining >= config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                    pollingTime = timeRemaining;\n                } else {\n                    final String clientVersion = ctx.getClientVersion();\n                    Code code =\n                        null == clientVersion || ILLEGAL_POLLING_TIME_INTRODUCED_CLIENT_VERSION.compareTo(clientVersion) > 0 ?\n                        Code.BAD_REQUEST : Code.ILLEGAL_POLLING_TIME;\n                    writer.writeAndComplete(ctx, code, \"The deadline time remaining is not enough\" +\n                        \" for polling, please check network condition\");\n                    return;\n                }\n            }\n\n            validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());\n            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());\n            ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();\n            if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                actualInvisibleTime = proxyConfig.getDefaultInvisibleTimeMills();\n            } else {\n                validateInvisibleTime(actualInvisibleTime,\n                    ConfigurationManager.getProxyConfig().getMinInvisibleTimeMillsForRecv());\n            }\n\n            FilterExpression filterExpression = request.getFilterExpression();\n            SubscriptionData subscriptionData;\n            try {\n                subscriptionData = FilterAPI.build(topic, filterExpression.getExpression(),\n                    GrpcConverter.getInstance().buildExpressionType(filterExpression.getType()));\n            } catch (Exception e) {\n                writer.writeAndComplete(ctx, Code.ILLEGAL_FILTER_EXPRESSION, e.getMessage());\n                return;\n            }\n\n            this.messagingProcessor.popMessage(\n                    ctx,\n                    new ReceiveMessageQueueSelector(\n                        request.getMessageQueue().getBroker().getName()\n                    ),\n                    group,\n                    topic,\n                    request.getBatchSize(),\n                    actualInvisibleTime,\n                    pollingTime,\n                    ConsumeInitMode.MAX,\n                    subscriptionData,\n                    fifo,\n                    new PopMessageResultFilterImpl(maxAttempts),\n                    request.getAttemptId(),\n                    timeRemaining\n                ).thenAccept(popResult -> {\n                    if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                        if (PopStatus.FOUND.equals(popResult.getPopStatus())) {\n                            List<MessageExt> messageExtList = popResult.getMsgFoundList();\n                            for (MessageExt messageExt : messageExtList) {\n                                String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);\n                                if (receiptHandle != null) {\n                                    MessageReceiptHandle messageReceiptHandle =\n                                        new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),\n                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());\n                                    messagingProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), messageReceiptHandle);\n                                }\n                            }\n                        }\n                    }\n                    writer.writeAndComplete(ctx, request, popResult);\n                })\n                .exceptionally(t -> {\n                    writer.writeAndComplete(ctx, request, t);\n                    return null;\n                });\n        } catch (Throwable t) {\n            writer.writeAndComplete(ctx, request, t);\n        }\n    }",
            "method_tgt": "public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,\n        StreamObserver<ReceiveMessageResponse> responseObserver) {\n        ReceiveMessageResponseStreamWriter writer = createWriter(ctx, responseObserver);\n\n        try {\n            Settings settings = this.grpcClientSettingsManager.getClientSettings(ctx);\n            Subscription subscription = settings.getSubscription();\n            boolean fifo = subscription.getFifo();\n            int maxAttempts = settings.getBackoffPolicy().getMaxAttempts();\n            ProxyConfig config = ConfigurationManager.getProxyConfig();\n\n            Long timeRemaining = ctx.getRemainingMs();\n            long pollingTime;\n            if (request.hasLongPollingTimeout()) {\n                pollingTime = Durations.toMillis(request.getLongPollingTimeout());\n            } else {\n                pollingTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;\n            }\n            if (pollingTime < config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMinLongPollingTimeoutMillis();\n            }\n            if (pollingTime > config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMaxLongPollingTimeoutMillis();\n            }\n\n            if (pollingTime > timeRemaining) {\n                if (timeRemaining >= config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                    pollingTime = timeRemaining;\n                } else {\n                    final String clientVersion = ctx.getClientVersion();\n                    Code code =\n                        null == clientVersion || ILLEGAL_POLLING_TIME_INTRODUCED_CLIENT_VERSION.compareTo(clientVersion) > 0 ?\n                        Code.BAD_REQUEST : Code.ILLEGAL_POLLING_TIME;\n                    writer.writeAndComplete(ctx, code, \"The deadline time remaining is not enough\" +\n                        \" for polling, please check network condition\");\n                    return;\n                }\n            }\n\n            validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());\n            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());\n            ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();\n            if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                actualInvisibleTime = proxyConfig.getDefaultInvisibleTimeMills();\n            } else {\n                validateInvisibleTime(actualInvisibleTime,\n                    ConfigurationManager.getProxyConfig().getMinInvisibleTimeMillsForRecv());\n            }\n\n            FilterExpression filterExpression = request.getFilterExpression();\n            SubscriptionData subscriptionData;\n            try {\n                subscriptionData = FilterAPI.build(topic, filterExpression.getExpression(),\n                    GrpcConverter.getInstance().buildExpressionType(filterExpression.getType()));\n            } catch (Exception e) {\n                writer.writeAndComplete(ctx, Code.ILLEGAL_FILTER_EXPRESSION, e.getMessage());\n                return;\n            }\n\n            this.messagingProcessor.popMessage(\n                    ctx,\n                    new ReceiveMessageQueueSelector(\n                        request.getMessageQueue().getBroker().getName()\n                    ),\n                    group,\n                    topic,\n                    request.getBatchSize(),\n                    actualInvisibleTime,\n                    pollingTime,\n                    ConsumeInitMode.MAX,\n                    subscriptionData,\n                    fifo,\n                    new PopMessageResultFilterImpl(maxAttempts),\n                    request.hasAttemptId() ? request.getAttemptId() : null,\n                    timeRemaining\n                ).thenAccept(popResult -> {\n                    if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                        if (PopStatus.FOUND.equals(popResult.getPopStatus())) {\n                            List<MessageExt> messageExtList = popResult.getMsgFoundList();\n                            for (MessageExt messageExt : messageExtList) {\n                                String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);\n                                if (receiptHandle != null) {\n                                    MessageReceiptHandle messageReceiptHandle =\n                                        new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),\n                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());\n                                    messagingProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), messageReceiptHandle);\n                                }\n                            }\n                        }\n                    }\n                    writer.writeAndComplete(ctx, request, popResult);\n                })\n                .exceptionally(t -> {\n                    writer.writeAndComplete(ctx, request, t);\n                    return null;\n                });\n        } catch (Throwable t) {\n            writer.writeAndComplete(ctx, request, t);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
            "method_src": "@Test\n    public void testReceiveMessagePollingTime() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        ArgumentCaptor<Long> pollTimeCaptor = ArgumentCaptor.forClass(Long.class);\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder()\n            .setRequestTimeout(Durations.fromSeconds(3))\n            .build());\n        when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),\n            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), anyString(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));\n\n\n        ProxyContext context = createContext();\n        context.setRemainingMs(1L);\n        this.receiveMessageActivity.receiveMessage(\n            context,\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n        assertEquals(0L, pollTimeCaptor.getValue().longValue());\n    }",
            "method_tgt": "@Test\n    public void testReceiveMessagePollingTime() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        ArgumentCaptor<Long> pollTimeCaptor = ArgumentCaptor.forClass(Long.class);\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder()\n            .setRequestTimeout(Durations.fromSeconds(3))\n            .build());\n        when(this.messagingProcessor.popMessage(any(), any(), anyString(), anyString(), anyInt(), anyLong(),\n            pollTimeCaptor.capture(), anyInt(), any(), anyBoolean(), any(), isNull(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(new PopResult(PopStatus.NO_NEW_MSG, Collections.emptyList())));\n\n\n        ProxyContext context = createContext();\n        context.setRemainingMs(1L);\n        this.receiveMessageActivity.receiveMessage(\n            context,\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n        assertEquals(0L, pollTimeCaptor.getValue().longValue());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 89,
        "repo_name": "apache/rocketmq",
        "commit_id": "15c6889bb0abd014c06ef1452f791db9daa1ea08",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivity.java",
            "method_src": "public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,\n        StreamObserver<ReceiveMessageResponse> responseObserver) {\n        ReceiveMessageResponseStreamWriter writer = createWriter(ctx, responseObserver);\n\n        try {\n            Settings settings = this.grpcClientSettingsManager.getClientSettings(ctx);\n            Subscription subscription = settings.getSubscription();\n            boolean fifo = subscription.getFifo();\n            int maxAttempts = settings.getBackoffPolicy().getMaxAttempts();\n            ProxyConfig config = ConfigurationManager.getProxyConfig();\n\n            Long timeRemaining = ctx.getRemainingMs();\n            long pollingTime;\n            if (request.hasLongPollingTimeout()) {\n                pollingTime = Durations.toMillis(request.getLongPollingTimeout());\n            } else {\n                pollingTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;\n            }\n            if (pollingTime < config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMinLongPollingTimeoutMillis();\n            }\n            if (pollingTime > config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMaxLongPollingTimeoutMillis();\n            }\n\n            if (pollingTime > timeRemaining) {\n                if (timeRemaining >= config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                    pollingTime = timeRemaining;\n                } else {\n                    final String clientVersion = ctx.getClientVersion();\n                    Code code =\n                        null == clientVersion || ILLEGAL_POLLING_TIME_INTRODUCED_CLIENT_VERSION.compareTo(clientVersion) > 0 ?\n                        Code.BAD_REQUEST : Code.ILLEGAL_POLLING_TIME;\n                    writer.writeAndComplete(ctx, code, \"The deadline time remaining is not enough\" +\n                        \" for polling, please check network condition\");\n                    return;\n                }\n            }\n\n            validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());\n            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());\n            ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();\n            if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                actualInvisibleTime = proxyConfig.getDefaultInvisibleTimeMills();\n            } else {\n                validateInvisibleTime(actualInvisibleTime,\n                    ConfigurationManager.getProxyConfig().getMinInvisibleTimeMillsForRecv());\n            }\n\n            FilterExpression filterExpression = request.getFilterExpression();\n            SubscriptionData subscriptionData;\n            try {\n                subscriptionData = FilterAPI.build(topic, filterExpression.getExpression(),\n                    GrpcConverter.getInstance().buildExpressionType(filterExpression.getType()));\n            } catch (Exception e) {\n                writer.writeAndComplete(ctx, Code.ILLEGAL_FILTER_EXPRESSION, e.getMessage());\n                return;\n            }\n\n            this.messagingProcessor.popMessage(\n                    ctx,\n                    new ReceiveMessageQueueSelector(\n                        request.getMessageQueue().getBroker().getName()\n                    ),\n                    group,\n                    topic,\n                    request.getBatchSize(),\n                    actualInvisibleTime,\n                    pollingTime,\n                    ConsumeInitMode.MAX,\n                    subscriptionData,\n                    fifo,\n                    new PopMessageResultFilterImpl(maxAttempts),\n                    request.getAttemptId(),\n                    timeRemaining\n                ).thenAccept(popResult -> {\n                    if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                        if (PopStatus.FOUND.equals(popResult.getPopStatus())) {\n                            List<MessageExt> messageExtList = popResult.getMsgFoundList();\n                            for (MessageExt messageExt : messageExtList) {\n                                String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);\n                                if (receiptHandle != null) {\n                                    MessageReceiptHandle messageReceiptHandle =\n                                        new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),\n                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());\n                                    messagingProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), messageReceiptHandle);\n                                }\n                            }\n                        }\n                    }\n                    writer.writeAndComplete(ctx, request, popResult);\n                })\n                .exceptionally(t -> {\n                    writer.writeAndComplete(ctx, request, t);\n                    return null;\n                });\n        } catch (Throwable t) {\n            writer.writeAndComplete(ctx, request, t);\n        }\n    }",
            "method_tgt": "public void receiveMessage(ProxyContext ctx, ReceiveMessageRequest request,\n        StreamObserver<ReceiveMessageResponse> responseObserver) {\n        ReceiveMessageResponseStreamWriter writer = createWriter(ctx, responseObserver);\n\n        try {\n            Settings settings = this.grpcClientSettingsManager.getClientSettings(ctx);\n            Subscription subscription = settings.getSubscription();\n            boolean fifo = subscription.getFifo();\n            int maxAttempts = settings.getBackoffPolicy().getMaxAttempts();\n            ProxyConfig config = ConfigurationManager.getProxyConfig();\n\n            Long timeRemaining = ctx.getRemainingMs();\n            long pollingTime;\n            if (request.hasLongPollingTimeout()) {\n                pollingTime = Durations.toMillis(request.getLongPollingTimeout());\n            } else {\n                pollingTime = timeRemaining - Durations.toMillis(settings.getRequestTimeout()) / 2;\n            }\n            if (pollingTime < config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMinLongPollingTimeoutMillis();\n            }\n            if (pollingTime > config.getGrpcClientConsumerMaxLongPollingTimeoutMillis()) {\n                pollingTime = config.getGrpcClientConsumerMaxLongPollingTimeoutMillis();\n            }\n\n            if (pollingTime > timeRemaining) {\n                if (timeRemaining >= config.getGrpcClientConsumerMinLongPollingTimeoutMillis()) {\n                    pollingTime = timeRemaining;\n                } else {\n                    final String clientVersion = ctx.getClientVersion();\n                    Code code =\n                        null == clientVersion || ILLEGAL_POLLING_TIME_INTRODUCED_CLIENT_VERSION.compareTo(clientVersion) > 0 ?\n                        Code.BAD_REQUEST : Code.ILLEGAL_POLLING_TIME;\n                    writer.writeAndComplete(ctx, code, \"The deadline time remaining is not enough\" +\n                        \" for polling, please check network condition\");\n                    return;\n                }\n            }\n\n            validateTopicAndConsumerGroup(request.getMessageQueue().getTopic(), request.getGroup());\n            String topic = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getMessageQueue().getTopic());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            long actualInvisibleTime = Durations.toMillis(request.getInvisibleDuration());\n            ProxyConfig proxyConfig = ConfigurationManager.getProxyConfig();\n            if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                actualInvisibleTime = proxyConfig.getDefaultInvisibleTimeMills();\n            } else {\n                validateInvisibleTime(actualInvisibleTime,\n                    ConfigurationManager.getProxyConfig().getMinInvisibleTimeMillsForRecv());\n            }\n\n            FilterExpression filterExpression = request.getFilterExpression();\n            SubscriptionData subscriptionData;\n            try {\n                subscriptionData = FilterAPI.build(topic, filterExpression.getExpression(),\n                    GrpcConverter.getInstance().buildExpressionType(filterExpression.getType()));\n            } catch (Exception e) {\n                writer.writeAndComplete(ctx, Code.ILLEGAL_FILTER_EXPRESSION, e.getMessage());\n                return;\n            }\n\n            this.messagingProcessor.popMessage(\n                    ctx,\n                    new ReceiveMessageQueueSelector(\n                        request.getMessageQueue().getBroker().getName()\n                    ),\n                    group,\n                    topic,\n                    request.getBatchSize(),\n                    actualInvisibleTime,\n                    pollingTime,\n                    ConsumeInitMode.MAX,\n                    subscriptionData,\n                    fifo,\n                    new PopMessageResultFilterImpl(maxAttempts),\n                    request.hasAttemptId() ? request.getAttemptId() : null,\n                    timeRemaining\n                ).thenAccept(popResult -> {\n                    if (proxyConfig.isEnableProxyAutoRenew() && request.getAutoRenew()) {\n                        if (PopStatus.FOUND.equals(popResult.getPopStatus())) {\n                            List<MessageExt> messageExtList = popResult.getMsgFoundList();\n                            for (MessageExt messageExt : messageExtList) {\n                                String receiptHandle = messageExt.getProperty(MessageConst.PROPERTY_POP_CK);\n                                if (receiptHandle != null) {\n                                    MessageReceiptHandle messageReceiptHandle =\n                                        new MessageReceiptHandle(group, topic, messageExt.getQueueId(), receiptHandle, messageExt.getMsgId(),\n                                            messageExt.getQueueOffset(), messageExt.getReconsumeTimes());\n                                    messagingProcessor.addReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, messageExt.getMsgId(), messageReceiptHandle);\n                                }\n                            }\n                        }\n                    }\n                    writer.writeAndComplete(ctx, request, popResult);\n                })\n                .exceptionally(t -> {\n                    writer.writeAndComplete(ctx, request, t);\n                    return null;\n                });\n        } catch (Throwable t) {\n            writer.writeAndComplete(ctx, request, t);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ReceiveMessageActivityTest.java",
            "method_src": "@Test\n    public void testReceiveMessage() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder().getDefaultInstanceForType());\n\n        PopResult popResult = new PopResult(PopStatus.NO_NEW_MSG, new ArrayList<>());\n        when(this.messagingProcessor.popMessage(\n            any(),\n            any(),\n            anyString(),\n            anyString(),\n            anyInt(),\n            anyLong(),\n            anyLong(),\n            anyInt(),\n            any(),\n            anyBoolean(),\n            any(),\n            anyString(),\n            anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));\n\n        this.receiveMessageActivity.receiveMessage(\n            createContext(),\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n    }",
            "method_tgt": "@Test\n    public void testReceiveMessage() {\n        StreamObserver<ReceiveMessageResponse> receiveStreamObserver = mock(ServerCallStreamObserver.class);\n        ArgumentCaptor<ReceiveMessageResponse> responseArgumentCaptor = ArgumentCaptor.forClass(ReceiveMessageResponse.class);\n        doNothing().when(receiveStreamObserver).onNext(responseArgumentCaptor.capture());\n\n        when(this.grpcClientSettingsManager.getClientSettings(any())).thenReturn(Settings.newBuilder().getDefaultInstanceForType());\n\n        PopResult popResult = new PopResult(PopStatus.NO_NEW_MSG, new ArrayList<>());\n        when(this.messagingProcessor.popMessage(\n            any(),\n            any(),\n            anyString(),\n            anyString(),\n            anyInt(),\n            anyLong(),\n            anyLong(),\n            anyInt(),\n            any(),\n            anyBoolean(),\n            any(),\n            isNull(),\n            anyLong())).thenReturn(CompletableFuture.completedFuture(popResult));\n\n        this.receiveMessageActivity.receiveMessage(\n            createContext(),\n            ReceiveMessageRequest.newBuilder()\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageQueue(MessageQueue.newBuilder().setTopic(Resource.newBuilder().setName(TOPIC).build()).build())\n                .setAutoRenew(true)\n                .setFilterExpression(FilterExpression.newBuilder()\n                    .setType(FilterType.TAG)\n                    .setExpression(\"*\")\n                    .build())\n                .build(),\n            receiveStreamObserver\n        );\n        assertEquals(Code.MESSAGE_NOT_FOUND, getResponseCodeFromReceiveMessageResponseList(responseArgumentCaptor.getAllValues()));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 90,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivity.java",
            "method_src": "public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuration(ProxyContext ctx,\n        ChangeInvisibleDurationRequest request) {\n        CompletableFuture<ChangeInvisibleDurationResponse> future = new CompletableFuture<>();\n\n        try {\n            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());\n            validateInvisibleTime(Durations.toMillis(request.getInvisibleDuration()));\n\n            ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());\n            if (messageReceiptHandle != null) {\n                receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());\n            }\n            return this.messagingProcessor.changeInvisibleTime(\n                ctx,\n                receiptHandle,\n                request.getMessageId(),\n                group,\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),\n                Durations.toMillis(request.getInvisibleDuration())\n            ).thenApply(ackResult -> convertToChangeInvisibleDurationResponse(ctx, request, ackResult));\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }",
            "method_tgt": "public CompletableFuture<ChangeInvisibleDurationResponse> changeInvisibleDuration(ProxyContext ctx,\n        ChangeInvisibleDurationRequest request) {\n        CompletableFuture<ChangeInvisibleDurationResponse> future = new CompletableFuture<>();\n\n        try {\n            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());\n            validateInvisibleTime(Durations.toMillis(request.getInvisibleDuration()));\n\n            ReceiptHandle receiptHandle = ReceiptHandle.decode(request.getReceiptHandle());\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n\n            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), receiptHandle.getReceiptHandle());\n            if (messageReceiptHandle != null) {\n                receiptHandle = ReceiptHandle.decode(messageReceiptHandle.getReceiptHandleStr());\n            }\n            return this.messagingProcessor.changeInvisibleTime(\n                ctx,\n                receiptHandle,\n                request.getMessageId(),\n                group,\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic()),\n                Durations.toMillis(request.getInvisibleDuration())\n            ).thenApply(ackResult -> convertToChangeInvisibleDurationResponse(ctx, request, ackResult));\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/consumer/ChangeInvisibleDurationActivityTest.java",
            "method_src": "@Test\n    public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Throwable {\n        String newHandle = \"newHandle\";\n        ArgumentCaptor<Long> invisibleTimeArgumentCaptor = ArgumentCaptor.forClass(Long.class);\n        AckResult ackResult = new AckResult();\n        ackResult.setExtraInfo(newHandle);\n        ackResult.setStatus(AckStatus.OK);\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.changeInvisibleTime(\n            any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()\n        )).thenReturn(CompletableFuture.completedFuture(ackResult));\n        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(\n            createContext(),\n            ChangeInvisibleDurationRequest.newBuilder()\n                .setInvisibleDuration(Durations.fromSeconds(3))\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageId(\"msgId\")\n                .setReceiptHandle(buildReceiptHandle(TOPIC, System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(TimeUnit.SECONDS.toMillis(3), invisibleTimeArgumentCaptor.getValue().longValue());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n        assertEquals(newHandle, response.getReceiptHandle());\n    }",
            "method_tgt": "@Test\n    public void testChangeInvisibleDurationActivityWhenHasMappingHandle() throws Throwable {\n        String newHandle = \"newHandle\";\n        ArgumentCaptor<Long> invisibleTimeArgumentCaptor = ArgumentCaptor.forClass(Long.class);\n        AckResult ackResult = new AckResult();\n        ackResult.setExtraInfo(newHandle);\n        ackResult.setStatus(AckStatus.OK);\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.changeInvisibleTime(\n            any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString(), invisibleTimeArgumentCaptor.capture()\n        )).thenReturn(CompletableFuture.completedFuture(ackResult));\n        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ChangeInvisibleDurationResponse response = this.changeInvisibleDurationActivity.changeInvisibleDuration(\n            createContext(),\n            ChangeInvisibleDurationRequest.newBuilder()\n                .setInvisibleDuration(Durations.fromSeconds(3))\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .setGroup(Resource.newBuilder().setName(CONSUMER_GROUP).build())\n                .setMessageId(\"msgId\")\n                .setReceiptHandle(buildReceiptHandle(TOPIC, System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(TimeUnit.SECONDS.toMillis(3), invisibleTimeArgumentCaptor.getValue().longValue());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n        assertEquals(newHandle, response.getReceiptHandle());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 91,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivity.java",
            "method_src": "public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessageToDeadLetterQueue(ProxyContext ctx,\n        ForwardMessageToDeadLetterQueueRequest request) {\n        CompletableFuture<ForwardMessageToDeadLetterQueueResponse> future = new CompletableFuture<>();\n        try {\n            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());\n\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n            String handleString = request.getReceiptHandle();\n            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), request.getReceiptHandle());\n            if (messageReceiptHandle != null) {\n                handleString = messageReceiptHandle.getReceiptHandleStr();\n            }\n            ReceiptHandle receiptHandle = ReceiptHandle.decode(handleString);\n\n            return this.messagingProcessor.forwardMessageToDeadLetterQueue(\n                ctx,\n                receiptHandle,\n                request.getMessageId(),\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup()),\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic())\n            ).thenApply(result -> convertToForwardMessageToDeadLetterQueueResponse(ctx, result));\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }",
            "method_tgt": "public CompletableFuture<ForwardMessageToDeadLetterQueueResponse> forwardMessageToDeadLetterQueue(ProxyContext ctx,\n        ForwardMessageToDeadLetterQueueRequest request) {\n        CompletableFuture<ForwardMessageToDeadLetterQueueResponse> future = new CompletableFuture<>();\n        try {\n            validateTopicAndConsumerGroup(request.getTopic(), request.getGroup());\n\n            String group = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup());\n            String handleString = request.getReceiptHandle();\n            MessageReceiptHandle messageReceiptHandle = receiptHandleProcessor.removeReceiptHandle(ctx, grpcChannelManager.getChannel(ctx.getClientID()), group, request.getMessageId(), request.getReceiptHandle());\n            if (messageReceiptHandle != null) {\n                handleString = messageReceiptHandle.getReceiptHandleStr();\n            }\n            ReceiptHandle receiptHandle = ReceiptHandle.decode(handleString);\n\n            return this.messagingProcessor.forwardMessageToDeadLetterQueue(\n                ctx,\n                receiptHandle,\n                request.getMessageId(),\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getGroup()),\n                GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic())\n            ).thenApply(result -> convertToForwardMessageToDeadLetterQueueResponse(ctx, result));\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/producer/ForwardMessageToDLQActivityTest.java",
            "method_src": "@Test\n    public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Throwable {\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString()))\n            .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, \"\")));\n\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        when(receiptHandleProcessor.removeReceiptHandle(any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(\n            createContext(),\n            ForwardMessageToDeadLetterQueueRequest.newBuilder()\n                .setTopic(Resource.newBuilder().setName(\"topic\").build())\n                .setGroup(Resource.newBuilder().setName(\"group\").build())\n                .setMessageId(MessageClientIDSetter.createUniqID())\n                .setReceiptHandle(buildReceiptHandle(\"topic\", System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n    }",
            "method_tgt": "@Test\n    public void testForwardMessageToDeadLetterQueueWhenHasMappingHandle() throws Throwable {\n        ArgumentCaptor<ReceiptHandle> receiptHandleCaptor = ArgumentCaptor.forClass(ReceiptHandle.class);\n        when(this.messagingProcessor.forwardMessageToDeadLetterQueue(any(), receiptHandleCaptor.capture(), anyString(), anyString(), anyString()))\n            .thenReturn(CompletableFuture.completedFuture(RemotingCommand.createResponseCommand(ResponseCode.SUCCESS, \"\")));\n\n        String savedHandleStr = buildReceiptHandle(\"topic\", System.currentTimeMillis(),3000);\n        when(receiptHandleProcessor.removeReceiptHandle(any(), any(), anyString(), anyString(), anyString()))\n            .thenReturn(new MessageReceiptHandle(\"group\", \"topic\", 0, savedHandleStr, \"msgId\", 0, 0));\n\n        ForwardMessageToDeadLetterQueueResponse response = this.forwardMessageToDLQActivity.forwardMessageToDeadLetterQueue(\n            createContext(),\n            ForwardMessageToDeadLetterQueueRequest.newBuilder()\n                .setTopic(Resource.newBuilder().setName(\"topic\").build())\n                .setGroup(Resource.newBuilder().setName(\"group\").build())\n                .setMessageId(MessageClientIDSetter.createUniqID())\n                .setReceiptHandle(buildReceiptHandle(\"topic\", System.currentTimeMillis(), 3000))\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(savedHandleStr, receiptHandleCaptor.getValue().getReceiptHandle());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 92,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivity.java",
            "method_src": "public CompletableFuture<QueryRouteResponse> queryRoute(ProxyContext ctx, QueryRouteRequest request) {\n        CompletableFuture<QueryRouteResponse> future = new CompletableFuture<>();\n        try {\n            validateTopic(request.getTopic());\n            List<org.apache.rocketmq.proxy.common.Address> addressList = this.convertToAddressList(request.getEndpoints());\n\n            String topicName = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic());\n            ProxyTopicRouteData proxyTopicRouteData = this.messagingProcessor.getTopicRouteDataForProxy(\n                ctx, addressList, topicName);\n\n            List<MessageQueue> messageQueueList = new ArrayList<>();\n            Map<String, Map<Long, Broker>> brokerMap = buildBrokerMap(proxyTopicRouteData.getBrokerDatas());\n\n            TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(topicName);\n            for (QueueData queueData : proxyTopicRouteData.getQueueDatas()) {\n                String brokerName = queueData.getBrokerName();\n                Map<Long, Broker> brokerIdMap = brokerMap.get(brokerName);\n                if (brokerIdMap == null) {\n                    break;\n                }\n                for (Broker broker : brokerIdMap.values()) {\n                    messageQueueList.addAll(this.genMessageQueueFromQueueData(queueData, request.getTopic(), topicMessageType, broker));\n                }\n            }\n\n            QueryRouteResponse response = QueryRouteResponse.newBuilder()\n                .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))\n                .addAllMessageQueues(messageQueueList)\n                .build();\n            future.complete(response);\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }",
            "method_tgt": "public CompletableFuture<QueryRouteResponse> queryRoute(ProxyContext ctx, QueryRouteRequest request) {\n        CompletableFuture<QueryRouteResponse> future = new CompletableFuture<>();\n        try {\n            validateTopic(request.getTopic());\n            List<org.apache.rocketmq.proxy.common.Address> addressList = this.convertToAddressList(request.getEndpoints());\n\n            String topicName = GrpcConverter.getInstance().wrapResourceWithNamespace(request.getTopic());\n            ProxyTopicRouteData proxyTopicRouteData = this.messagingProcessor.getTopicRouteDataForProxy(\n                ctx, addressList, topicName);\n\n            List<MessageQueue> messageQueueList = new ArrayList<>();\n            Map<String, Map<Long, Broker>> brokerMap = buildBrokerMap(proxyTopicRouteData.getBrokerDatas());\n\n            TopicMessageType topicMessageType = messagingProcessor.getMetadataService().getTopicMessageType(ctx, topicName);\n            for (QueueData queueData : proxyTopicRouteData.getQueueDatas()) {\n                String brokerName = queueData.getBrokerName();\n                Map<Long, Broker> brokerIdMap = brokerMap.get(brokerName);\n                if (brokerIdMap == null) {\n                    break;\n                }\n                for (Broker broker : brokerIdMap.values()) {\n                    messageQueueList.addAll(this.genMessageQueueFromQueueData(queueData, request.getTopic(), topicMessageType, broker));\n                }\n            }\n\n            QueryRouteResponse response = QueryRouteResponse.newBuilder()\n                .setStatus(ResponseBuilder.getInstance().buildStatus(Code.OK, Code.OK.name()))\n                .addAllMessageQueues(messageQueueList)\n                .build();\n            future.complete(response);\n        } catch (Throwable t) {\n            future.completeExceptionally(t);\n        }\n        return future;\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/grpc/v2/route/RouteActivityTest.java",
            "method_src": "@Test\n    public void testQueryRoute() throws Throwable {\n        ConfigurationManager.getProxyConfig().setGrpcServerPort(8080);\n        ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);\n        when(this.messagingProcessor.getTopicRouteDataForProxy(any(), addressListCaptor.capture(), anyString()))\n            .thenReturn(createProxyTopicRouteData(2, 2, 6));\n        MetadataService metadataService = Mockito.mock(LocalMetadataService.class);\n        when(this.messagingProcessor.getMetadataService()).thenReturn(metadataService);\n        when(metadataService.getTopicMessageType(anyString())).thenReturn(TopicMessageType.NORMAL);\n\n        QueryRouteResponse response = this.routeActivity.queryRoute(\n            createContext(),\n            QueryRouteRequest.newBuilder()\n                .setEndpoints(grpcEndpoints)\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(4, response.getMessageQueuesCount());\n        for (MessageQueue messageQueue : response.getMessageQueuesList()) {\n            assertEquals(grpcEndpoints, messageQueue.getBroker().getEndpoints());\n            assertEquals(Permission.READ_WRITE, messageQueue.getPermission());\n        }\n    }",
            "method_tgt": "@Test\n    public void testQueryRoute() throws Throwable {\n        ConfigurationManager.getProxyConfig().setGrpcServerPort(8080);\n        ArgumentCaptor<List<org.apache.rocketmq.proxy.common.Address>> addressListCaptor = ArgumentCaptor.forClass(List.class);\n        when(this.messagingProcessor.getTopicRouteDataForProxy(any(), addressListCaptor.capture(), anyString()))\n            .thenReturn(createProxyTopicRouteData(2, 2, 6));\n        MetadataService metadataService = Mockito.mock(LocalMetadataService.class);\n        when(this.messagingProcessor.getMetadataService()).thenReturn(metadataService);\n        when(metadataService.getTopicMessageType(any(), anyString())).thenReturn(TopicMessageType.NORMAL);\n\n        QueryRouteResponse response = this.routeActivity.queryRoute(\n            createContext(),\n            QueryRouteRequest.newBuilder()\n                .setEndpoints(grpcEndpoints)\n                .setTopic(Resource.newBuilder().setName(TOPIC).build())\n                .build()\n        ).get();\n\n        assertEquals(Code.OK, response.getStatus().getCode());\n        assertEquals(4, response.getMessageQueuesCount());\n        for (MessageQueue messageQueue : response.getMessageQueuesList()) {\n            assertEquals(grpcEndpoints, messageQueue.getBroker().getEndpoints());\n            assertEquals(Permission.READ_WRITE, messageQueue.getPermission());\n        }\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 93,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java",
            "method_src": "protected Set<AddressableMessageQueue> buildAddressableSet(Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }",
            "method_tgt": "protected Set<AddressableMessageQueue> buildAddressableSet(ProxyContext ctx, Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(ctx, mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java",
            "method_src": "@Test\n    public void testLockBatch() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[0], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq2)));\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(null, mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(mqSet);\n    }",
            "method_tgt": "@Test\n    public void testLockBatch() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq2)));\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(ProxyContext.create(), mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(mqSet);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 94,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java",
            "method_src": "protected Set<AddressableMessageQueue> buildAddressableSet(Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }",
            "method_tgt": "protected Set<AddressableMessageQueue> buildAddressableSet(ProxyContext ctx, Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(ctx, mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java",
            "method_src": "@Test\n    public void testLockBatchPartialSuccess() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[0], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet()));\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(null, mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(Sets.newHashSet(mq1));\n    }",
            "method_tgt": "@Test\n    public void testLockBatchPartialSuccess() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet()));\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(ProxyContext.create(), mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(Sets.newHashSet(mq1));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 95,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/processor/ConsumerProcessor.java",
            "method_src": "protected Set<AddressableMessageQueue> buildAddressableSet(Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }",
            "method_tgt": "protected Set<AddressableMessageQueue> buildAddressableSet(ProxyContext ctx, Set<MessageQueue> mqSet) {\n        return mqSet.stream().map(mq -> {\n            try {\n                return serviceManager.getTopicRouteService().buildAddressableMessageQueue(ctx, mq);\n            } catch (Exception e) {\n                return null;\n            }\n        }).collect(Collectors.toSet());\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ConsumerProcessorTest.java",
            "method_src": "@Test\n    public void testLockBatchPartialSuccessWithException() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[0], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        CompletableFuture<Set<MessageQueue>> future = new CompletableFuture<>();\n        future.completeExceptionally(new MQBrokerException(1, \"err\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(future);\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(null, mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(Sets.newHashSet(mq1));\n    }",
            "method_tgt": "@Test\n    public void testLockBatchPartialSuccessWithException() throws Throwable {\n        Set<MessageQueue> mqSet = new HashSet<>();\n        MessageQueue mq1 = new MessageQueue(TOPIC, \"broker1\", 0);\n        AddressableMessageQueue addressableMessageQueue1 = new AddressableMessageQueue(mq1, \"127.0.0.1\");\n        MessageQueue mq2 = new MessageQueue(TOPIC, \"broker2\", 0);\n        AddressableMessageQueue addressableMessageQueue2 = new AddressableMessageQueue(mq2, \"127.0.0.1\");\n        mqSet.add(mq1);\n        mqSet.add(mq2);\n        when(this.topicRouteService.buildAddressableMessageQueue(any(), any())).thenAnswer(i -> new AddressableMessageQueue((MessageQueue) i.getArguments()[1], \"127.0.0.1\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue1), any(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Sets.newHashSet(mq1)));\n        CompletableFuture<Set<MessageQueue>> future = new CompletableFuture<>();\n        future.completeExceptionally(new MQBrokerException(1, \"err\"));\n        when(this.messageService.lockBatchMQ(any(), eq(addressableMessageQueue2), any(), anyLong()))\n            .thenReturn(future);\n        Set<MessageQueue> result = this.consumerProcessor.lockBatchMQ(ProxyContext.create(), mqSet, CONSUMER_GROUP, CLIENT_ID, 1000)\n            .get();\n        assertThat(result).isEqualTo(Sets.newHashSet(mq1));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 96,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java",
            "method_src": "protected void fillTransactionData(String producerGroup, AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {\n        try {\n            MessageId id;\n            if (sendResult.getOffsetMsgId() != null) {\n                id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());\n            } else {\n                id = MessageDecoder.decodeMessageId(sendResult.getMsgId());\n            }\n            this.serviceManager.getTransactionService().addTransactionDataByBrokerName(\n                messageQueue.getBrokerName(),\n                producerGroup,\n                sendResult.getQueueOffset(),\n                id.getOffset(),\n                sendResult.getTransactionId(),\n                messageList.get(0)\n            );\n        } catch (Throwable t) {\n            log.warn(\"fillTransactionData failed. messageQueue: {}, sendResult: {}\", messageQueue, sendResult, t);\n        }\n    }",
            "method_tgt": "protected void fillTransactionData(ProxyContext ctx, String producerGroup, AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {\n        try {\n            MessageId id;\n            if (sendResult.getOffsetMsgId() != null) {\n                id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());\n            } else {\n                id = MessageDecoder.decodeMessageId(sendResult.getMsgId());\n            }\n            this.serviceManager.getTransactionService().addTransactionDataByBrokerName(\n                ctx,\n                messageQueue.getBrokerName(),\n                producerGroup,\n                sendResult.getQueueOffset(),\n                id.getOffset(),\n                sendResult.getTransactionId(),\n                messageList.get(0)\n            );\n        } catch (Throwable t) {\n            log.warn(\"fillTransactionData failed. messageQueue: {}, sendResult: {}\", messageQueue, sendResult, t);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java",
            "method_src": "@Test\n    public void testSendMessage() throws Throwable {\n        when(metadataService.getTopicMessageType(eq(TOPIC))).thenReturn(TopicMessageType.NORMAL);\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageList = new ArrayList<>();\n        Message messageExt = createMessageExt(TOPIC, \"tag\", 0, 0);\n        messageList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(TOPIC, requestHeader.getTopic());\n    }",
            "method_tgt": "@Test\n    public void testSendMessage() throws Throwable {\n        when(metadataService.getTopicMessageType(any(), eq(TOPIC))).thenReturn(TopicMessageType.NORMAL);\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageList = new ArrayList<>();\n        Message messageExt = createMessageExt(TOPIC, \"tag\", 0, 0);\n        messageList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            any(),\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(TOPIC, requestHeader.getTopic());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 97,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/processor/ProducerProcessor.java",
            "method_src": "protected void fillTransactionData(String producerGroup, AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {\n        try {\n            MessageId id;\n            if (sendResult.getOffsetMsgId() != null) {\n                id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());\n            } else {\n                id = MessageDecoder.decodeMessageId(sendResult.getMsgId());\n            }\n            this.serviceManager.getTransactionService().addTransactionDataByBrokerName(\n                messageQueue.getBrokerName(),\n                producerGroup,\n                sendResult.getQueueOffset(),\n                id.getOffset(),\n                sendResult.getTransactionId(),\n                messageList.get(0)\n            );\n        } catch (Throwable t) {\n            log.warn(\"fillTransactionData failed. messageQueue: {}, sendResult: {}\", messageQueue, sendResult, t);\n        }\n    }",
            "method_tgt": "protected void fillTransactionData(ProxyContext ctx, String producerGroup, AddressableMessageQueue messageQueue, SendResult sendResult, List<Message> messageList) {\n        try {\n            MessageId id;\n            if (sendResult.getOffsetMsgId() != null) {\n                id = MessageDecoder.decodeMessageId(sendResult.getOffsetMsgId());\n            } else {\n                id = MessageDecoder.decodeMessageId(sendResult.getMsgId());\n            }\n            this.serviceManager.getTransactionService().addTransactionDataByBrokerName(\n                ctx,\n                messageQueue.getBrokerName(),\n                producerGroup,\n                sendResult.getQueueOffset(),\n                id.getOffset(),\n                sendResult.getTransactionId(),\n                messageList.get(0)\n            );\n        } catch (Throwable t) {\n            log.warn(\"fillTransactionData failed. messageQueue: {}, sendResult: {}\", messageQueue, sendResult, t);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/processor/ProducerProcessorTest.java",
            "method_src": "@Test\n    public void testSendRetryMessage() throws Throwable {\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageExtList = new ArrayList<>();\n        Message messageExt = createMessageExt(MixAll.getRetryTopic(CONSUMER_GROUP), \"tag\", 0, 0);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_RECONSUME_TIME, \"1\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_MAX_RECONSUME_TIMES, \"16\");\n        messageExtList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageExtList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(MixAll.getRetryTopic(CONSUMER_GROUP), requestHeader.getTopic());\n        assertEquals(1, requestHeader.getReconsumeTimes().intValue());\n        assertEquals(16, requestHeader.getMaxReconsumeTimes().intValue());\n    }",
            "method_tgt": "@Test\n    public void testSendRetryMessage() throws Throwable {\n        String txId = MessageClientIDSetter.createUniqID();\n        String msgId = MessageClientIDSetter.createUniqID();\n        long commitLogOffset = 1000L;\n        long queueOffset = 100L;\n\n        SendResult sendResult = new SendResult();\n        sendResult.setSendStatus(SendStatus.SEND_OK);\n        sendResult.setTransactionId(txId);\n        sendResult.setMsgId(msgId);\n        sendResult.setOffsetMsgId(createOffsetMsgId(commitLogOffset));\n        sendResult.setQueueOffset(queueOffset);\n        ArgumentCaptor<SendMessageRequestHeader> requestHeaderArgumentCaptor = ArgumentCaptor.forClass(SendMessageRequestHeader.class);\n        when(this.messageService.sendMessage(any(), any(), any(), requestHeaderArgumentCaptor.capture(), anyLong()))\n            .thenReturn(CompletableFuture.completedFuture(Lists.newArrayList(sendResult)));\n\n        List<Message> messageExtList = new ArrayList<>();\n        Message messageExt = createMessageExt(MixAll.getRetryTopic(CONSUMER_GROUP), \"tag\", 0, 0);\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_RECONSUME_TIME, \"1\");\n        MessageAccessor.putProperty(messageExt, MessageConst.PROPERTY_MAX_RECONSUME_TIMES, \"16\");\n        messageExtList.add(messageExt);\n        AddressableMessageQueue messageQueue = mock(AddressableMessageQueue.class);\n        when(messageQueue.getBrokerName()).thenReturn(\"mockBroker\");\n\n        ArgumentCaptor<String> brokerNameCaptor = ArgumentCaptor.forClass(String.class);\n        ArgumentCaptor<Long> tranStateTableOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        ArgumentCaptor<Long> commitLogOffsetCaptor = ArgumentCaptor.forClass(Long.class);\n        when(transactionService.addTransactionDataByBrokerName(\n            any(),\n            brokerNameCaptor.capture(),\n            anyString(),\n            tranStateTableOffsetCaptor.capture(),\n            commitLogOffsetCaptor.capture(),\n            anyString(), any())).thenReturn(mock(TransactionData.class));\n\n        List<SendResult> sendResultList = this.producerProcessor.sendMessage(\n            createContext(),\n            (ctx, messageQueueView) -> messageQueue,\n            PRODUCER_GROUP,\n            MessageSysFlag.TRANSACTION_PREPARED_TYPE,\n            messageExtList,\n            3000\n        ).get();\n\n        assertNotNull(sendResultList);\n        assertEquals(\"mockBroker\", brokerNameCaptor.getValue());\n        assertEquals(queueOffset, tranStateTableOffsetCaptor.getValue().longValue());\n        assertEquals(commitLogOffset, commitLogOffsetCaptor.getValue().longValue());\n\n        SendMessageRequestHeader requestHeader = requestHeaderArgumentCaptor.getValue();\n        assertEquals(PRODUCER_GROUP, requestHeader.getProducerGroup());\n        assertEquals(MixAll.getRetryTopic(CONSUMER_GROUP), requestHeader.getTopic());\n        assertEquals(1, requestHeader.getReconsumeTimes().intValue());\n        assertEquals(16, requestHeader.getMaxReconsumeTimes().intValue());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 98,
        "repo_name": "apache/rocketmq",
        "commit_id": "a325d144b24a1acdc92a5ac308865080532325d9",
        "focal_db": {
            "rel_path": "proxy/src/main/java/org/apache/rocketmq/proxy/service/message/ClusterMessageService.java",
            "method_src": "protected String resolveBrokerAddr(String brokerName) {\n        try {\n            return this.topicRouteService.getBrokerAddr(brokerName);\n        } catch (Throwable t) {\n            throw new ProxyException(ProxyExceptionCode.INVALID_BROKER_NAME, \"cannot find broker \" + brokerName, t);\n        }\n    }",
            "method_tgt": "protected String resolveBrokerAddr(ProxyContext ctx, String brokerName) {\n        try {\n            return this.topicRouteService.getBrokerAddr(ctx, brokerName);\n        } catch (Throwable t) {\n            throw new ProxyException(ProxyExceptionCode.INVALID_BROKER_NAME, \"cannot find broker \" + brokerName, t);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "proxy/src/test/java/org/apache/rocketmq/proxy/service/message/ClusterMessageServiceTest.java",
            "method_src": "@Test\n    public void testAckMessageByInvalidBrokerNameHandle() throws Exception {\n        when(topicRouteService.getBrokerAddr(anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));\n        try {\n            this.clusterMessageService.ackMessage(\n                ProxyContext.create(),\n                ReceiptHandle.builder()\n                    .startOffset(0L)\n                    .retrieveTime(System.currentTimeMillis())\n                    .invisibleTime(3000)\n                    .reviveQueueId(1)\n                    .topicType(ReceiptHandle.NORMAL_TOPIC)\n                    .brokerName(\"notExistBroker\")\n                    .queueId(0)\n                    .offset(123)\n                    .commitLogOffset(0L)\n                    .build(),\n                MessageClientIDSetter.createUniqID(),\n                new AckMessageRequestHeader(),\n                3000);\n            fail();\n        } catch (Exception e) {\n            assertTrue(e instanceof ProxyException);\n            ProxyException proxyException = (ProxyException) e;\n            assertEquals(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, proxyException.getCode());\n        }\n    }",
            "method_tgt": "@Test\n    public void testAckMessageByInvalidBrokerNameHandle() throws Exception {\n        when(topicRouteService.getBrokerAddr(any(), anyString())).thenThrow(new MQClientException(ResponseCode.TOPIC_NOT_EXIST, \"\"));\n        try {\n            this.clusterMessageService.ackMessage(\n                ProxyContext.create(),\n                ReceiptHandle.builder()\n                    .startOffset(0L)\n                    .retrieveTime(System.currentTimeMillis())\n                    .invisibleTime(3000)\n                    .reviveQueueId(1)\n                    .topicType(ReceiptHandle.NORMAL_TOPIC)\n                    .brokerName(\"notExistBroker\")\n                    .queueId(0)\n                    .offset(123)\n                    .commitLogOffset(0L)\n                    .build(),\n                MessageClientIDSetter.createUniqID(),\n                new AckMessageRequestHeader(),\n                3000);\n            fail();\n        } catch (Exception e) {\n            assertTrue(e instanceof ProxyException);\n            ProxyException proxyException = (ProxyException) e;\n            assertEquals(ProxyExceptionCode.INVALID_RECEIPT_HANDLE, proxyException.getCode());\n        }\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 99,
        "repo_name": "apache/rocketmq",
        "commit_id": "5894332918e7158d6ff4cc35b126a1b82a1f6b0c",
        "focal_db": {
            "rel_path": "tools/src/main/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommand.java",
            "method_src": "@Override\n    public Options buildCommandlineOptions(Options options) {\n        Option opt = new Option(\"b\", \"brokerAddr\", true, \"Broker address\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        opt = new Option(\"c\", \"clusterName\", true, \"which cluster\");\n        opt.setRequired(false);\n        options.addOption(opt);\n\n        return options;\n    }",
            "method_tgt": "@Override\n    public Options buildCommandlineOptions(Options options) {\n        OptionGroup optionGroup = new OptionGroup();\n        Option opt = new Option(\"b\", \"brokerAddr\", true, \"Broker address\");\n        optionGroup.addOption(opt);\n\n        opt = new Option(\"c\", \"clusterName\", true, \"which cluster\");\n        optionGroup.addOption(opt);\n\n        optionGroup.setRequired(true);\n        options.addOptionGroup(optionGroup);\n\n        return options;\n    }"
        },
        "test_db": {
            "rel_path": "tools/src/test/java/org/apache/rocketmq/tools/command/broker/BrokerStatusSubCommandTest.java",
            "method_src": "@Test\n    public void testExecute() throws SubCommandException {\n        BrokerStatusSubCommand cmd = new BrokerStatusSubCommand();\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort(), \"-c default-cluster\"};\n        final CommandLine commandLine =\n            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs,\n                cmd.buildCommandlineOptions(options), new DefaultParser());\n\n        cmd.execute(commandLine, options, null);\n    }",
            "method_tgt": "@Test\n    public void testExecute() throws SubCommandException {\n        BrokerStatusSubCommand cmd = new BrokerStatusSubCommand();\n        Options options = ServerUtil.buildCommandlineOptions(new Options());\n        String[] subargs = new String[] {\"-b 127.0.0.1:\" + listenPort()};\n        final CommandLine commandLine =\n            ServerUtil.parseCmdLine(\"mqadmin \" + cmd.commandName(), subargs,\n                cmd.buildCommandlineOptions(options), new DefaultParser());\n\n        cmd.execute(commandLine, options, null);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 100,
        "repo_name": "apache/shenyu",
        "commit_id": "e27a26b8ca3de5c167dc676f22d280f217cd1e5f",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/main/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecorator.java",
            "method_src": "@Override\n    public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {\n        String path = shenyuContext.getPath();\n        shenyuContext.setMethod(path);\n        shenyuContext.setRealUrl(path);\n        shenyuContext.setRpcType(RpcTypeEnum.SPRING_CLOUD.getName());\n        shenyuContext.setModule(String.format(\"%s-%s\", PluginEnum.DIVIDE.getName(), shenyuContext.getRpcType()));\n        return shenyuContext;\n    }",
            "method_tgt": "@Override\n    public ShenyuContext decorator(final ShenyuContext shenyuContext, final MetaData metaData) {\n        String path = shenyuContext.getPath();\n        shenyuContext.setMethod(path);\n        shenyuContext.setRealUrl(path);\n        shenyuContext.setRpcType(RpcTypeEnum.SPRING_CLOUD.getName());\n        shenyuContext.setModule(Optional.ofNullable(metaData).map(MetaData::getAppName)\n                .orElse(String.format(\"%s-%s\", PluginEnum.SPRING_CLOUD.getName(), shenyuContext.getRpcType())));\n        return shenyuContext;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-springcloud/src/test/java/org/apache/shenyu/plugin/springcloud/context/SpringCloudShenyuContextDecoratorTest.java",
            "method_src": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"divide-springCloud\");\n    }",
            "method_tgt": "@Test\n    public void testDecorator() {\n        MetaData metaData = null;\n        ShenyuContext shenyuContext = new ShenyuContext();\n        springCloudShenyuContextDecorator.decorator(shenyuContext, metaData);\n        Assertions.assertNull(shenyuContext.getMethod());\n        Assertions.assertNull(shenyuContext.getRealUrl());\n        Assertions.assertEquals(shenyuContext.getRpcType(), \"springCloud\");\n        Assertions.assertEquals(shenyuContext.getModule(), \"springCloud-springCloud\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 101,
        "repo_name": "apache/shenyu",
        "commit_id": "fc2bc20aa989317fe34fb6d181b6f890a90f6b6d",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImpl.java",
            "method_src": "protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {\n        List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);\n        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))\n                .collect(Collectors.toList()).stream().findAny().orElse(false);\n    }",
            "method_tgt": "protected boolean doSubmit(final String selectorId, final List<? extends CommonUpstream> upstreamList) {\n        List<CommonUpstream> commonUpstreamList = CommonUpstreamUtils.convertCommonUpstreamList(upstreamList);\n        if (CollectionUtils.isEmpty(upstreamList)) {\n            return true;\n        }\n        return commonUpstreamList.stream().map(upstream -> upstreamCheckService.checkAndSubmit(selectorId, upstream))\n                .collect(Collectors.toList()).stream().findAny().orElse(false);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/AbstractShenyuClientRegisterServiceImplTest.java",
            "method_src": "@Test\n    public void testDoSubmit() {\n        assertFalse(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }",
            "method_tgt": "@Test\n    public void testDoSubmit() {\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", new ArrayList<>()));\n\n        CommonUpstream commonUpstream = new CommonUpstream();\n        when(upstreamCheckService.checkAndSubmit(any(), any())).thenReturn(true);\n        assertTrue(abstractShenyuClientRegisterService.doSubmit(\"Selector_Id\", Collections.singletonList(commonUpstream)));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 102,
        "repo_name": "apache/shenyu",
        "commit_id": "6f90d1a121dbad7b748a1a14b4669d369b6f7bc6",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/listener/etcd/EtcdClient.java",
            "method_src": "public void deleteEtcdPathRecursive(final String path) {\n        DeleteOption option = DeleteOption.newBuilder()\n                .withPrefix(ByteSequence.from(path, StandardCharsets.UTF_8))\n                .build();\n        client.getKVClient().delete(ByteSequence.from(path, StandardCharsets.UTF_8), option);\n    }",
            "method_tgt": "public void deleteEtcdPathRecursive(final String path) {\n        DeleteOption option = DeleteOption.newBuilder()\n                .withPrefix(ByteSequence.from(path, StandardCharsets.UTF_8))\n                .build();\n        try {\n            client.getKVClient().delete(ByteSequence.from(path, StandardCharsets.UTF_8), option).get(10, TimeUnit.SECONDS);\n        } catch (Exception e) {\n            LOG.error(\"delete node of recursive error.\", e);\n            throw new ShenyuException(e.getMessage());\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/listener/etcd/EtcdClientTest.java",
            "method_src": "@Test\n    public void deleteEtcdPathRecursive() {\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }",
            "method_tgt": "@Test\n    public void deleteEtcdPathRecursive() {\n        when(client.getKVClient().delete(any(ByteSequence.class), any(DeleteOption.class))).thenReturn(mock(CompletableFuture.class));\n        etcdClient.deleteEtcdPathRecursive(TEST_KEY);\n        verify(client.getKVClient(), times(1)).delete(any(ByteSequence.class), any(DeleteOption.class));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 103,
        "repo_name": "apache/shenyu",
        "commit_id": "7667c46dc1955843f8f5cca998a0d93dea96ba32",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataSyncConfiguration.java",
            "method_src": "@Bean\n        public ConsulClient consulClient(final ConsulProperties consulProperties) {\n            return new ConsulClient(consulProperties.getUrl());\n        }",
            "method_tgt": "@Bean\n        public ConsulClient consulClient(final ConsulProperties consulProperties) {\n            String url = consulProperties.getUrl();\n            if (StringUtils.isBlank(url)) {\n                throw new ShenyuException(\"sync.consul.url can not be null.\");\n            }\n            try {\n                URL consulUrl = new URL(url);\n                return consulUrl.getPort() < 0 ? new ConsulClient(consulUrl.getHost()) : new ConsulClient(consulUrl.getHost(), consulUrl.getPort());\n            } catch (MalformedURLException e) {\n                throw new ShenyuException(\"sync.consul.url formatter is not incorrect.\");\n            }\n        }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataSyncConfigurationTest.java",
            "method_src": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"127.0.0.1\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }",
            "method_tgt": "@Test\n    public void testConsulClient() {\n        DataSyncConfiguration.ConsulListener consulListener = new DataSyncConfiguration.ConsulListener();\n        ConsulProperties consulProperties = mock(ConsulProperties.class);\n        when(consulProperties.getUrl()).thenReturn(\"http://127.0.0.1:8500\");\n        assertNotNull(consulListener.consulClient(consulProperties));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 104,
        "repo_name": "apache/shenyu",
        "commit_id": "4ea79fa2f6401e401b65412dc63c2978f193ac00",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/ConsulServerConfiguration.java",
            "method_src": "@Bean(name = \"registerConsulClient\")\n    public ConsulClient consulClient(final ShenyuRegisterCenterConfig config) {\n        return new ConsulClient(config.getServerLists());\n    }",
            "method_tgt": "@Bean(name = \"registerConsulClient\")\n    public ConsulClient consulClient(final ShenyuRegisterCenterConfig config) {\n        final String serverList = config.getServerLists();\n        if (StringUtils.isBlank(serverList)) {\n            throw new ShenyuException(\"serverList can not be null.\");\n        }\n        final String[] addresses = serverList.split(\":\");\n        if (addresses.length != 2) {\n            throw new ShenyuException(\"serverList formatter is not incorrect.\");\n        }\n        return new ConsulClient(addresses[0], Integer.parseInt(addresses[1]));\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/ConsulServerConfigurationTest.java",
            "method_src": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }",
            "method_tgt": "@Test\n    public void consulClientTest() {\n        try (MockedConstruction<ConsulClient> consulClientMockedConstruction = mockConstruction(ConsulClient.class)) {\n            ConsulServerConfiguration configuration = new ConsulServerConfiguration();\n            ShenyuRegisterCenterConfig config = mock(ShenyuRegisterCenterConfig.class);\n            Properties properties = mock(Properties.class);\n            when(config.getProps()).thenReturn(properties);\n            when(config.getProps().getProperty(any(), any())).thenReturn(\"1\", \"30\", \"mocked valued\");\n            when(config.getServerLists()).thenReturn(\"127.0.0.1:8500\");\n            ConsulClient consulClient = configuration.consulClient(config);\n            assertNotNull(consulClient);\n        }\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 105,
        "repo_name": "apache/shenyu",
        "commit_id": "f36157ce300bfaba985c9cd77c5290277fa99ee1",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/main/java/org/apache/shenyu/plugin/dubbo/common/handler/AbstractDubboPluginDataHandler.java",
            "method_src": "@Override\n    public void handlerSelector(final SelectorData selectorData) {\n        if (!selectorData.getContinued()) {\n            RULE_CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(selectorData.getId(), Constants.DEFAULT_RULE), DubboRuleHandle.newInstance());\n        }\n        List<DubboUpstream> dubboUpstreams = GsonUtils.getInstance().fromList(selectorData.getHandle(), DubboUpstream.class);\n        if (CollectionUtils.isEmpty(dubboUpstreams)) {\n            return;\n        }\n        List<DubboUpstream> graySelectorHandle = new ArrayList<>();\n        for (DubboUpstream each : dubboUpstreams) {\n            if (StringUtils.isNotBlank(each.getUpstreamUrl()) && Objects.nonNull(each.isGray()) && Boolean.TRUE.equals(each.isGray())) {\n                graySelectorHandle.add(each);\n            }\n        }\n        if (CollectionUtils.isNotEmpty(graySelectorHandle)) {\n            SELECTOR_CACHED_HANDLE.get().cachedHandle(selectorData.getId(), graySelectorHandle);\n            UpstreamCacheManager.getInstance().submit(selectorData.getId(), convertUpstreamList(graySelectorHandle));\n        }\n    }",
            "method_tgt": "@Override\n    public void handlerSelector(final SelectorData selectorData) {\n        if (!selectorData.getContinued()) {\n            RULE_CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(selectorData.getId(), Constants.DEFAULT_RULE), DubboRuleHandle.newInstance());\n        }\n        List<DubboUpstream> dubboUpstreams = GsonUtils.getInstance().fromList(selectorData.getHandle(), DubboUpstream.class);\n        if (CollectionUtils.isEmpty(dubboUpstreams)) {\n            return;\n        }\n        List<DubboUpstream> graySelectorHandle = new ArrayList<>();\n        for (DubboUpstream each : dubboUpstreams) {\n            if (StringUtils.isNotBlank(each.getUpstreamUrl()) && Objects.nonNull(each.isGray()) && Boolean.TRUE.equals(each.isGray())) {\n                graySelectorHandle.add(each);\n            }\n        }\n        if (CollectionUtils.isNotEmpty(graySelectorHandle)) {\n            SELECTOR_CACHED_HANDLE.get().cachedHandle(selectorData.getId(), graySelectorHandle);\n            UpstreamCacheManager.getInstance().submit(selectorData.getId(), convertUpstreamList(graySelectorHandle));\n        } else {\n            // if update gray selector is empty, remove cache\n            removeSelector(selectorData);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-proxy/shenyu-plugin-rpc/shenyu-plugin-dubbo/shenyu-plugin-dubbo-common/src/test/java/org/apache/shenyu/plugin/dubbo/common/handler/AbstractDubboPluginDataHandlerTest.java",
            "method_src": "@Test\n    public void selectorTest() {\n        SelectorData selectorData = new SelectorData();\n        handler.handlerSelector(selectorData);\n        selectorData.setId(\"1\");\n        selectorData.setHandle(\"[{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.113/dubbo\\\", \\\"gray\\\":true}]\");\n        handler.handlerSelector(selectorData);\n        handler.removeSelector(selectorData);\n    }",
            "method_tgt": "@Test\n    public void selectorTest() {\n        SelectorData selectorData = new SelectorData();\n        handler.handlerSelector(selectorData);\n        selectorData.setId(\"1\");\n        selectorData.setHandle(\"[{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.113/dubbo\\\", \\\"gray\\\":true}]\");\n        handler.handlerSelector(selectorData);\n        assertEquals(AbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(\"1\").size(), 1);\n\n        selectorData.setHandle(\"[{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.113/dubbo\\\", \\\"gray\\\":false}]\");\n        handler.handlerSelector(selectorData);\n        assertNull(AbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(\"1\"));\n        // when gray update false\n        selectorData.setHandle(\"[{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.113/dubbo\\\", \\\"gray\\\":true},{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.114/dubbo\\\", \\\"gray\\\":true}]\");\n        handler.handlerSelector(selectorData);\n        assertEquals(AbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(\"1\").size(), 2);\n\n        selectorData.setHandle(\"[{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.113/dubbo\\\", \\\"gray\\\":true},{\\\"appName\\\": \\\"name\\\", \\\"upstreamUrl\\\": \\\"http://192.168.55.114/dubbo\\\", \\\"gray\\\":false}]\");\n        handler.handlerSelector(selectorData);\n        assertEquals(AbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(\"1\").size(), 1);\n\n        handler.removeSelector(selectorData);\n        assertNull(AbstractDubboPluginDataHandler.SELECTOR_CACHED_HANDLE.get().obtainHandle(\"1\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 106,
        "repo_name": "apache/shenyu",
        "commit_id": "3cb2debaf04955740cc0b88632e4440e21b958df",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-brpc/src/main/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCache.java",
            "method_src": "public void setParamTypes(final List<Pair<String, String>> paramTypes) {\n            this.paramTypes = paramTypes;\n        }",
            "method_tgt": "public void setParamTypes(final String[] paramTypes) {\n            this.paramTypes = paramTypes;\n        }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-brpc/src/test/java/org/apache/shenyu/plugin/brpc/cache/ApplicationConfigCacheTest.java",
            "method_src": "@Test\n    public void testBrpcParamInfo() {\n        ApplicationConfigCache.BrpcParamInfo paramInfo = new ApplicationConfigCache.BrpcParamInfo(null, null);\n        paramInfo.setParamNames(new String[]{\"test\"});\n        paramInfo.setParamTypes(new Class<?>[]{ApplicationConfigCache.class});\n        Assertions.assertEquals(paramInfo.getParamNames()[0], \"test\");\n        Assertions.assertEquals(paramInfo.getParamTypes()[0], ApplicationConfigCache.class);\n    }",
            "method_tgt": "@Test\n    public void testBrpcParamInfo() {\n        ApplicationConfigCache.BrpcParamInfo paramInfo = new ApplicationConfigCache.BrpcParamInfo(null, null);\n        paramInfo.setParamNames(new String[]{\"test\"});\n        paramInfo.setParamTypes(new String[]{\"org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache\"});\n        Assertions.assertEquals(paramInfo.getParamNames()[0], \"test\");\n        Assertions.assertEquals(paramInfo.getParamTypes()[0], \"org.apache.shenyu.plugin.brpc.cache.ApplicationConfigCache\");\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 107,
        "repo_name": "apache/shenyu",
        "commit_id": "846ec64bd61dacb7c7a89aca4e0c86c4e9226663",
        "focal_db": {
            "rel_path": "shenyu-client/shenyu-client-sofa/src/main/java/org/apache/shenyu/client/sofa/SofaServiceEventListener.java",
            "method_src": "@Override\n    protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,\n                                                 final Map<String, ServiceFactoryBean> beans) {\n        return URIRegisterDTO.builder()\n                .contextPath(this.getContextPath())\n                .appName(this.getAppName())\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .host(super.getHost())\n                .port(Integer.parseInt(getPort()))\n                .build();\n    }",
            "method_tgt": "@Override\n    protected URIRegisterDTO buildURIRegisterDTO(final ApplicationContext context,\n                                                 final Map<String, ServiceFactoryBean> beans) {\n        return URIRegisterDTO.builder()\n                .contextPath(this.getContextPath())\n                .appName(this.getAppName())\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .eventType(EventType.REGISTER)\n                .host(super.getHost())\n                .port(Integer.parseInt(getPort()))\n                .build();\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-client/shenyu-client-sofa/src/test/java/org/apache/shenyu/client/sofa/SofaServiceEventListenerTest.java",
            "method_src": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }",
            "method_tgt": "@Test\n    public void testBuildURIRegisterDTO() {\n        URIRegisterDTO expectedURIRegisterDTO = URIRegisterDTO.builder()\n                .contextPath(CONTEXT_PATH)\n                .appName(APP_NAME)\n                .rpcType(RpcTypeEnum.SOFA.getName())\n                .eventType(EventType.REGISTER)\n                .host(HOST)\n                .port(Integer.parseInt(PORT))\n                .build();\n        Map<String, ServiceFactoryBean> beans = new HashMap<>();\n        URIRegisterDTO realURIRegisterDTO = sofaServiceEventListener.buildURIRegisterDTO(applicationContext, beans);\n\n        assertEquals(expectedURIRegisterDTO, realURIRegisterDTO);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 108,
        "repo_name": "apache/shenyu",
        "commit_id": "347b4064439049f029496901a820c35e0c97bb83",
        "focal_db": {
            "rel_path": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandle.java",
            "method_src": "public void checkData(final SentinelHandle sentinelHandle) {\n        sentinelHandle.setFlowRuleEnable((sentinelHandle.getFlowRuleEnable() == 1 || sentinelHandle.getFlowRuleEnable() == 0)\n                ? sentinelHandle.getFlowRuleEnable() : Constants.SENTINEL_ENABLE_FLOW_RULE);\n        sentinelHandle.setDegradeRuleEnable((sentinelHandle.getDegradeRuleEnable() == 1 || sentinelHandle.getDegradeRuleEnable() == 0)\n                ? sentinelHandle.getDegradeRuleEnable() : Constants.SENTINEL_ENABLE_DEGRADE_RULE);\n    }",
            "method_tgt": "public void checkData() {\n        this.setFlowRuleEnable((this.getFlowRuleEnable() == Constants.FLOW_RULE_ENABLE_ON || this.getFlowRuleEnable() == Constants.FLOW_RULE_ENABLE_OFF)\n                ? this.getFlowRuleEnable() : Constants.SENTINEL_ENABLE_FLOW_RULE);\n        this.setDegradeRuleEnable((this.getDegradeRuleEnable() == Constants.DEGRADE_RULE_ENABLE_ON || this.getDegradeRuleEnable() == Constants.DEGRADE_RULE_ENABLE_OFF)\n                ? this.getDegradeRuleEnable() : Constants.SENTINEL_ENABLE_DEGRADE_RULE);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/SentinelHandleTest.java",
            "method_src": "@Test\n    public void testCheckData() {\n        SentinelHandle handle = new SentinelHandle();\n        handle.setFlowRuleEnable(0);\n        handle.setDegradeRuleEnable(1);\n        \n        handle.checkData(handle);\n        \n        assertThat(handle.getFlowRuleEnable(), is(0));\n        assertThat(handle.getDegradeRuleEnable(), is(1));\n    \n        handle.setFlowRuleEnable(-1);\n        handle.setDegradeRuleEnable(3);\n    \n        handle.checkData(handle);\n        \n        assertThat(handle.getFlowRuleEnable(), is(Constants.SENTINEL_ENABLE_FLOW_RULE));\n        assertThat(handle.getDegradeRuleEnable(), is(Constants.SENTINEL_ENABLE_DEGRADE_RULE));\n    }",
            "method_tgt": "@Test\n    public void testCheckData() {\n        SentinelHandle handle = new SentinelHandle();\n        handle.setFlowRuleEnable(0);\n        handle.setDegradeRuleEnable(1);\n        \n        handle.checkData();\n        \n        assertThat(handle.getFlowRuleEnable(), is(0));\n        assertThat(handle.getDegradeRuleEnable(), is(1));\n    \n        handle.setFlowRuleEnable(-1);\n        handle.setDegradeRuleEnable(3);\n    \n        handle.checkData();\n        \n        assertThat(handle.getFlowRuleEnable(), is(Constants.SENTINEL_ENABLE_FLOW_RULE));\n        assertThat(handle.getDegradeRuleEnable(), is(Constants.SENTINEL_ENABLE_DEGRADE_RULE));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 109,
        "repo_name": "apache/shenyu",
        "commit_id": "09b236e16bca76c394696cb049569c57eff94f90",
        "focal_db": {
            "rel_path": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/main/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClient.java",
            "method_src": "public List<String> getChildren(final String key) {\n        try {\n            return client.getChildren().forPath(key);\n        } catch (Exception e) {\n            throw new ShenyuException(e);\n        }\n    }",
            "method_tgt": "public List<String> getChildren(final String key) {\n        try {\n            return client.getChildren().forPath(key);\n        } catch (Exception e) {\n            LOGGER.error(\"zookeeper get child error=\", e);\n            return Collections.emptyList();\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-sync-data-center/shenyu-sync-data-zookeeper/src/test/java/org/apache/shenyu/sync/data/zookeeper/ZookeeperClientTest.java",
            "method_src": "@Test\n    void getChildren() throws Exception {\n        assertThrows(ShenyuException.class, () -> client.getChildren(\"/test\"));\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }",
            "method_tgt": "@Test\n    void getChildren() throws Exception {\n        assertTrue(client.getChildren(\"/test\").isEmpty());\n        GetChildrenBuilder getChildrenBuilder = mock(GetChildrenBuilder.class);\n        when(curatorFramework.getChildren()).thenReturn(getChildrenBuilder);\n        when(getChildrenBuilder.forPath(anyString())).thenReturn(new ArrayList<>());\n        List<String> children = client.getChildren(\"/test\");\n        assertEquals(0, children.size());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 110,
        "repo_name": "apache/shenyu",
        "commit_id": "b5bc26d219a9f4d1353b6e0a9e40acfcbbec5af5",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/shiro/config/ShiroRealm.java",
            "method_src": "@Override\n    public boolean supports(final AuthenticationToken token) {\n        return token instanceof StatelessToken;\n    }",
            "method_tgt": "@Override\n    public boolean supports(final AuthenticationToken token) {\n        return token instanceof BearerToken;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/shiro/config/ShiroRealmTest.java",
            "method_src": "@Test\n    public void testSupports() {\n        StatelessToken token = mock(StatelessToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }",
            "method_tgt": "@Test\n    public void testSupports() {\n        BearerToken token = mock(BearerToken.class);\n        assertEquals(true, shiroRealm.supports(token));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 111,
        "repo_name": "apache/shenyu",
        "commit_id": "d8ece536e290ecc6b0e310711aed0c332ce26acb",
        "focal_db": {
            "rel_path": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/main/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepository.java",
            "method_src": "private InstanceRegisterDTO convertFromInstance(final Instance instance) {\n        InstanceRegisterDTO instanceRegisterDTO = new InstanceRegisterDTO();\n        instanceRegisterDTO.setPort(instance.getPort());\n        instanceRegisterDTO.setHost(instance.getInstanceId());\n        instanceRegisterDTO.setAppName(instance.getServiceName());\n        return instanceRegisterDTO;\n    }",
            "method_tgt": "private InstanceEntity convertFromInstance(final Instance instance) {\n        InstanceEntity instanceEntity = new InstanceEntity();\n        instanceEntity.setPort(instance.getPort());\n        instanceEntity.setHost(instance.getInstanceId());\n        instanceEntity.setAppName(instance.getServiceName());\n        return instanceEntity;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-register-center/shenyu-register-instance/shenyu-register-instance-nacos/src/test/java/org/apache/shenyu/register/instance/nacos/NacosInstanceRegisterRepositoryTest.java",
            "method_src": "@Test\n    public void testPersistInstance() {\n        InstanceRegisterDTO data = InstanceRegisterDTO.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }",
            "method_tgt": "@Test\n    public void testPersistInstance() {\n        InstanceEntity data = InstanceEntity.builder()\n                .appName(\"shenyu-test\")\n                .host(\"shenyu-host\")\n                .port(9195)\n                .build();\n\n        final String key = \"shenyu-test-group\";\n        repository.persistInstance(data);\n        assertTrue(storage.containsKey(key));\n\n        final Instance instance = storage.get(key);\n        assertEquals(data.getHost(), instance.getIp());\n        assertEquals(data.getPort(), instance.getPort());\n        assertEquals(data.getAppName(), instance.getServiceName());\n        repository.close();\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 112,
        "repo_name": "apache/shenyu",
        "commit_id": "942435610cc40554ceb4bd1a802b2d5d6cd0d9f0",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/SentinelPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        String resourceName = CacheKeyUtils.INST.getKey(rule);\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        return chain.execute(exchange).doOnSuccess(v -> {\n            HttpStatus status = exchange.getResponse().getStatusCode();\n            if (status == null || !status.is2xxSuccessful()) {\n                exchange.getResponse().setStatusCode(null);\n                throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);\n            }\n        }).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->\n                fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        String resourceName = CacheKeyUtils.INST.getKey(rule);\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(rule.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        exchange.getAttributes().put(Constants.WATCHER_HTTP_STATUS, (Consumer<HttpStatus>) status -> {\n            if (status == null || !status.is2xxSuccessful()) {\n                throw new SentinelFallbackException(status == null ? HttpStatus.INTERNAL_SERVER_ERROR : status);\n            }\n        });\n        return chain.execute(exchange).transform(new SentinelReactorTransformer<>(resourceName)).onErrorResume(throwable ->\n                fallbackHandler.fallback(exchange, UriUtils.createUri(sentinelHandle.getFallbackUri()), throwable));\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/SentinelPluginTest.java",
            "method_src": "@Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data))\n                .expectError(HttpStatusCodeException.class).verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }",
            "method_tgt": "@Test\n    public void testSentinelPluginNotHttpStatusOK() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"testSentinelPluginNullPointException\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleEnable(1);\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(2d);\n        sentinelHandle.setDegradeRuleGrade(2);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n\n        Mono mono = Mono.empty().doOnSuccess(v -> exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS));\n        when(chain.execute(exchange)).thenReturn(mono);\n        StepVerifier.create(sentinelPlugin.doExecute(exchange, chain, selectorData, data)).expectComplete().verify();\n\n        // remove rule\n        sentinelRuleHandle.removeRule(data);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 113,
        "repo_name": "apache/shenyu",
        "commit_id": "ccd8d6c57613737381f82c7be81a6af8999a0314",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-base/src/main/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtils.java",
            "method_src": "public String getKey(final RuleData ruleData) {\n        return ruleData.getSelectorId() + \"_\" + ruleData.getName();\n    }",
            "method_tgt": "public String getKey(final RuleData ruleData) {\n        return String.join(\"_\", ruleData.getSelectorId(), ruleData.getId());\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-base/src/test/java/org/apache/shenyu/plugin/base/utils/CacheKeyUtilsTest.java",
            "method_src": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).name(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }",
            "method_tgt": "@Test\n    public void getKey() {\n        RuleData ruleData = RuleData.builder().selectorId(MOCK_SELECTOR_ID).id(MOCK_NAME).build();\n        assert MOCK_CACHE_KEY_UTILS_GET_KEY_RESULT.equals(CacheKeyUtils.INST.getKey(ruleData));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 114,
        "repo_name": "apache/shenyu",
        "commit_id": "6fee634e61daab93404665443b68257809f529a2",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/MapperConfig.java",
            "method_src": "@Bean\n    @ConditionalOnProperty(name = \"shenyu.database.dialect\", havingValue = \"oracle\")\n    public PostgreSqlUpdateInterceptor oracleSqlUpdateInterceptor() {\n        return new PostgreSqlUpdateInterceptor();\n    }",
            "method_tgt": "@Bean\n        @ConditionalOnMissingBean(OracleSQLUpdateInterceptor.class)\n        public OracleSQLUpdateInterceptor oracleSqlUpdateInterceptor() {\n            return new OracleSQLUpdateInterceptor();\n        }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/MapperConfigTest.java",
            "method_src": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(mapperConfig.oracleSqlUpdateInterceptor());\n    }",
            "method_tgt": "@Test\n    public void oracleSqlUpdateInterceptorTest() {\n        assertNotNull(oracleSQLConfig.oracleSqlUpdateInterceptor());\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 115,
        "repo_name": "apache/shenyu",
        "commit_id": "fe4bfaf014f3058d4b0264d3492cd5c2d25c8ef1",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-ratelimiter/src/main/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        RateLimiterHandle limiterHandle = RateLimiterPluginDataHandler.CACHED_HANDLE.get()\n                .obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        String resolverKey = Optional.ofNullable(limiterHandle.getKeyResolverName())\n                .flatMap(name -> Optional.of(\"-\" + RateLimiterKeyResolverFactory.newInstance(name).resolve(exchange)))\n                .orElse(\"\");\n        return redisRateLimiter.isAllowed(rule.getId() + resolverKey, limiterHandle)\n                .flatMap(response -> {\n                    if (!response.isAllowed()) {\n                        exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);\n                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);\n                        return WebFluxResultUtils.result(exchange, error);\n                    }\n                    return chain.execute(exchange);\n                });\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        RateLimiterHandle limiterHandle = RateLimiterPluginDataHandler.CACHED_HANDLE.get()\n                .obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        String resolverKey = Optional.ofNullable(limiterHandle.getKeyResolverName())\n                .flatMap(name -> Optional.of(\"-\" + RateLimiterKeyResolverFactory.newInstance(name).resolve(exchange)))\n                .orElse(\"\");\n        return redisRateLimiter.isAllowed(rule.getId() + resolverKey, limiterHandle)\n                .flatMap(response -> {\n                    if (!response.isAllowed()) {\n                        exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);\n                        Object error = ShenyuResultWrap.error(exchange, ShenyuResultEnum.TOO_MANY_REQUESTS);\n                        return WebFluxResultUtils.result(exchange, error);\n                    }\n                    return chain.execute(exchange).doFinally(signalType -> {\n                        RateLimiterAlgorithm<?> rateLimiterAlgorithm = RateLimiterAlgorithmFactory.newInstance(limiterHandle.getAlgorithmName());\n                        rateLimiterAlgorithm.callback(rateLimiterAlgorithm.getScript(), response.getKeys(), null);\n                    });\n                });\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-ratelimiter/src/test/java/org/apache/shenyu/plugin/ratelimiter/RateLimiterPluginTest.java",
            "method_src": "@Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test\n    public void doExecuteAllowedTest() {\n        doExecutePreInit();\n        when(redisRateLimiter.isAllowed(anyString(), any(RateLimiterHandle.class))).thenReturn(\n                Mono.just(new RateLimiterResponse(true, 1, null)));\n        Mono<Void> result = rateLimiterPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 116,
        "repo_name": "apache/shenyu",
        "commit_id": "e73262931a648c6d7d98eec2679741aa913a8d29",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImpl.java",
            "method_src": "@Override\n    protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {\n        MetaDataService metaDataService = getMetaDataService();\n        metaDataDTO.setPath(PathUtils.decoratorPath(metaDataDTO.getContextPath()));\n        MetaDataDO metaDataDO = metaDataService.findByPath(metaDataDTO.getPath());\n        metaDataService.saveOrUpdateMetaData(metaDataDO, metaDataDTO);\n    }",
            "method_tgt": "@Override\n    protected void registerMetadata(final MetaDataRegisterDTO metaDataDTO) {\n        MetaDataService metaDataService = getMetaDataService();\n        MetaDataDO metaDataDO = metaDataService.findByPath(metaDataDTO.getPath());\n        metaDataService.saveOrUpdateMetaData(metaDataDO, metaDataDTO);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/register/ShenyuClientRegisterSpringCloudServiceImplTest.java",
            "method_src": "@Test\n    public void testRegisterMetadata() {\n        MetaDataDO metaDataDO = MetaDataDO.builder().build();\n        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);\n        MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().contextPath(\"/contextPath\").build();\n        shenyuClientRegisterSpringCloudService.registerMetadata(metaDataDTO);\n        verify(metaDataService).findByPath(\"/contextPath/**\");\n        verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);\n    }",
            "method_tgt": "@Test\n    public void testRegisterMetadata() {\n        MetaDataDO metaDataDO = MetaDataDO.builder().build();\n        when(metaDataService.findByPath(any())).thenReturn(metaDataDO);\n        MetaDataRegisterDTO metaDataDTO = MetaDataRegisterDTO.builder().path(\"/contextPath/test\").build();\n        shenyuClientRegisterSpringCloudService.registerMetadata(metaDataDTO);\n        verify(metaDataService).findByPath(\"/contextPath/test\");\n        verify(metaDataService).saveOrUpdateMetaData(metaDataDO, metaDataDTO);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 117,
        "repo_name": "apache/shenyu",
        "commit_id": "a651e69251d5ecd8c1da258f1e5a28276b4494cc",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/ShaUtils.java",
            "method_src": "public static String shaEncryption(final String src) {\n        return Optional.ofNullable(src).map(item -> {\n            if (StringUtils.isEmpty(src)) {\n                return null;\n            }\n            try {\n                MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n                messageDigest.update(item.getBytes());\n                byte[] byteBuffer = messageDigest.digest();\n                StringBuffer strHexString = new StringBuffer();\n                for (byte b:byteBuffer) {\n                    String hex = Integer.toHexString(0xff & b);\n                    strHexString.append(hex);\n                }\n                return strHexString.toString();\n            } catch (Exception e) {\n                throw new ShenyuException(e);\n            }\n        }).orElse(null);\n    }",
            "method_tgt": "public static String shaEncryption(final String src) {\n        return Optional.ofNullable(src).map(item -> {\n            if (StringUtils.isEmpty(src)) {\n                return null;\n            }\n            try {\n                MessageDigest messageDigest = MessageDigest.getInstance(\"SHA-512\");\n                messageDigest.update(item.getBytes());\n                byte[] byteBuffer = messageDigest.digest();\n                StringBuffer strHexString = new StringBuffer();\n                for (byte b:byteBuffer) {\n                    String hex = Integer.toHexString(0xff & b);\n                    if (hex.length() == 1) {\n                        strHexString.append('0');\n                    }\n                    strHexString.append(hex);\n                }\n                return strHexString.toString();\n            } catch (Exception e) {\n                throw new ShenyuException(e);\n            }\n        }).orElse(null);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/ShaUtilsTest.java",
            "method_src": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d846c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }",
            "method_tgt": "@Test\n    public void testShaEncryption() {\n        assertThat(ShaUtils.shaEncryption(\"123456\"), is(\"ba3253876aed6bc22d4a6ff53d8406c6ad864195ed144ab5c87621b6c233b548baeae6956df346ec8c17f5ea10f35ee3cbc514797ed7ddd3145464e2a0bab413\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 118,
        "repo_name": "apache/shenyu",
        "commit_id": "88f203b6a12ecf412387b638364159a1719b425f",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-general-context/src/main/java/org/apache/shenyu/plugin/general/context/GeneralContextPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        Map<String, List<GeneralContextHandle>> generalContextHandleMap = GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        Map<String, Map<String, String>> generalContextMap = new HashMap<>();\n        HttpHeaders headers = exchange.getRequest().getHeaders();\n        generalContextHandleMap.forEach((k, v) -> {\n            Map<String, String> generalContextMapWithRpcType = new HashMap<>();\n            if (CollectionUtils.isEmpty(v)) {\n                return;\n            }\n            v.forEach(each -> {\n                if (StringUtils.isBlank(each.getGeneralContextType()) || StringUtils.isBlank(each.getGeneralContextKey())) {\n                    return;\n                }\n                switch (each.getGeneralContextType()) {\n                    case Constants.ADD_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(each.getGeneralContextKey(), each.getGeneralContextValue());\n                        break;\n                    case Constants.TRANSMIT_HEADER_TO_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(StringUtils.isBlank(each.getGeneralContextValue()) ? each.getGeneralContextKey() : each.getGeneralContextValue(),\n                                headers.getFirst(each.getGeneralContextKey()));\n                        break;\n                    default:\n                        break;\n                }\n            });\n            generalContextMap.put(k, generalContextMapWithRpcType);\n        });\n        exchange.getAttributes().put(Constants.GENERAL_CONTEXT, generalContextMap);\n        return chain.execute(exchange);\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        Map<String, List<GeneralContextHandle>> generalContextHandleMap = GeneralContextPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        Map<String, Map<String, String>> generalContextMap = new HashMap<>();\n        HttpHeaders headers = exchange.getRequest().getHeaders();\n        generalContextHandleMap.forEach((rpcType, v) -> {\n            if (CollectionUtils.isEmpty(v)) {\n                return;\n            }\n            Map<String, String> generalContextMapWithRpcType = new HashMap<>();\n            v.forEach(each -> {\n                if (StringUtils.isBlank(each.getGeneralContextType()) || StringUtils.isBlank(each.getGeneralContextKey())) {\n                    return;\n                }\n                switch (each.getGeneralContextType()) {\n                    case Constants.ADD_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(each.getGeneralContextKey(), each.getGeneralContextValue());\n                        break;\n                    case Constants.TRANSMIT_HEADER_TO_GENERAL_CONTEXT_TYPE:\n                        generalContextMapWithRpcType.put(StringUtils.isBlank(each.getGeneralContextValue()) ? each.getGeneralContextKey() : each.getGeneralContextValue(),\n                                headers.getFirst(each.getGeneralContextKey()));\n                        break;\n                    default:\n                        break;\n                }\n            });\n            generalContextMap.put(rpcType, generalContextMapWithRpcType);\n        });\n        exchange.getAttributes().put(Constants.GENERAL_CONTEXT, generalContextMap);\n        return chain.execute(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-general-context/src/test/java/org/apache/shenyu/plugin/general/context/GeneralContextPluginTest.java",
            "method_src": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n    }",
            "method_tgt": "@Test\n    public void testDoExecute() {\n        SelectorData selectorData = mock(SelectorData.class);\n        when(this.chain.execute(any())).thenReturn(Mono.empty());\n\n        StepVerifier.create(generalContextPlugin.doExecute(this.exchange, this.chain, selectorData, this.ruleData)).expectSubscription().verifyComplete();\n\n        ArgumentCaptor<ServerWebExchange> newExchange = ArgumentCaptor.forClass(ServerWebExchange.class);\n        Mockito.verify(this.chain, times(1)).execute(newExchange.capture());\n\n        Map<String, String> shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.DUBBO.getName());\n\n        assertTrue(shenyuGeneralContext.containsKey(\"addGeneralContextKey\"));\n        assertTrue(shenyuGeneralContext.containsKey(\"shenyuTestHeaderNewKey\"));\n\n        assertEquals(shenyuGeneralContext.get(\"addGeneralContextKey\"), \"addGeneralContextValue\");\n        assertEquals(shenyuGeneralContext.get(\"shenyuTestHeaderNewKey\"), \"shenyuTestHeaderValue\");\n        shenyuGeneralContext = ((Map<String, Map<String, String>>) newExchange.getValue().getAttributes().get(Constants.GENERAL_CONTEXT)).get(PluginEnum.SOFA.getName());\n        assertNull(shenyuGeneralContext);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 119,
        "repo_name": "apache/shenyu",
        "commit_id": "4441f48adccbcf66c853eb42ee343b104f03e332",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-context-path/src/main/java/org/apache/shenyu/plugin/context/path/ContextPathPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        ContextMappingRuleHandle contextMappingRuleHandle = ContextPathPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(contextMappingRuleHandle)) {\n            LOG.error(\"context path rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        String contextPath = contextMappingRuleHandle.getContextPath();\n        if (StringUtils.isNoneBlank(contextPath)) {\n            if (!shenyuContext.getPath().startsWith(contextPath)) {\n                LOG.error(\"the context path '{}' is invalid.\", contextPath);\n                Object error = ShenyuResultWrap.error(ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),\n                        String.format(\"%s [invalid context path:'%s']\", ShenyuResultEnum.CONTEXT_PATH_ERROR.getMsg(), contextPath), null);\n                return WebFluxResultUtils.result(exchange, error);\n            }\n        }\n        buildContextPath(shenyuContext, contextMappingRuleHandle);\n        return chain.execute(exchange);\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        ContextMappingRuleHandle contextMappingRuleHandle = ContextPathPluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(contextMappingRuleHandle)) {\n            LOG.error(\"context path rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        String contextPath = contextMappingRuleHandle.getContextPath();\n        if (StringUtils.isNoneBlank(contextPath) && !shenyuContext.getPath().startsWith(contextPath)) {\n            LOG.error(\"the context path '{}' is invalid.\", contextPath);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CONTEXT_PATH_ERROR.getCode(),\n                    String.format(\"%s [invalid context path:'%s']\", ShenyuResultEnum.CONTEXT_PATH_ERROR.getMsg(), contextPath), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        buildContextPath(shenyuContext, contextMappingRuleHandle);\n        return chain.execute(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-context-path/src/test/java/org/apache/shenyu/plugin/context/path/ContextPathPluginTest.java",
            "method_src": "@Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(shenyuContext.getRealUrl(), \"/order/findById\");\n    }",
            "method_tgt": "@Test\n    public void executeTest() {\n        shenyuContext.setPath(\"/http/context/order/findById\");\n        ContextMappingRuleHandle contextMappingRuleHandle = new ContextMappingRuleHandle();\n        contextMappingRuleHandle.setContextPath(\"/http/context\");\n        CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(ruleData), contextMappingRuleHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingRuleHandle));\n        contextPathPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(\"/order/findById\", shenyuContext.getRealUrl());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 120,
        "repo_name": "apache/shenyu",
        "commit_id": "b017c784bc37ad048c0c7df76c7aa3dbba27f8cd",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/service/impl/UpstreamCheckService.java",
            "method_src": "public void fetchUpstreamData() {\n        final List<PluginDO> pluginDOList = pluginMapper.selectByNames(PluginEnum.getUpstreamNames());\n        if (CollectionUtils.isEmpty(pluginDOList)) {\n            return;\n        }\n        pluginDOList.stream().filter(Objects::nonNull).forEach(pluginDO -> {\n            final List<SelectorDO> selectorDOList = selectorMapper.findByPluginId(pluginDO.getId());\n            for (SelectorDO selectorDO : selectorDOList) {\n                if (Objects.isNull(selectorDO) || StringUtils.isBlank(selectorDO.getHandle())) {\n                    continue;\n                }\n                List<CommonUpstream> commonUpstreams = converterFactor.newInstance(pluginDO.getName()).convertUpstream(selectorDO.getHandle());\n                if (CollectionUtils.isNotEmpty(commonUpstreams)) {\n                    UPSTREAM_MAP.put(selectorDO.getId(), commonUpstreams);\n                }\n            }\n        });\n    }",
            "method_tgt": "public void fetchUpstreamData() {\n\n        final List<PluginDO> pluginDOList = pluginMapper.selectByNames(PluginEnum.getUpstreamNames());\n        if (CollectionUtils.isEmpty(pluginDOList)) {\n            return;\n        }\n        Map<String, String> pluginMap = pluginDOList.stream().filter(Objects::nonNull)\n                .collect(Collectors.toMap(PluginDO::getId, PluginDO::getName, (value1, value2) -> value1));\n        final List<SelectorDO> selectorDOList = selectorMapper.findByPluginIds(new ArrayList<>(pluginMap.keySet()));\n        Optional.ofNullable(selectorDOList).orElseGet(ArrayList::new).stream()\n                .filter(selectorDO -> Objects.nonNull(selectorDO) && StringUtils.isNotEmpty(selectorDO.getHandle()))\n                .forEach(selectorDO -> {\n                    String name = pluginMap.get(selectorDO.getPluginId());\n                    List<CommonUpstream> commonUpstreams = converterFactor.newInstance(name).convertUpstream(selectorDO.getHandle());\n                    if (CollectionUtils.isNotEmpty(commonUpstreams)) {\n                        UPSTREAM_MAP.put(selectorDO.getId(), commonUpstreams);\n                    }\n                });\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/service/UpstreamCheckServiceTest.java",
            "method_src": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginId(anyString())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }",
            "method_tgt": "@Test\n    public void testFetchUpstreamData() {\n        PluginDO pluginDO = PluginDO.builder()\n                .name(PluginEnum.DIVIDE.getName())\n                .id(MOCK_PLUGIN_ID)\n                .build();\n        SelectorDO selectorDOWithUrlError = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME)\n                .name(MOCK_SELECTOR_NAME)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"upstreamUrl\\\":\\\"divide-upstream-50\\\",\\\"weight\\\":50}]\")\n                .build();\n        SelectorDO selectorDOWithUrlReachable = SelectorDO.builder()\n                .pluginId(MOCK_PLUGIN_ID)\n                .id(MOCK_SELECTOR_NAME_OTHER)\n                .name(MOCK_SELECTOR_NAME_OTHER)\n                .handle(\"[{\\\"upstreamHost\\\":\\\"localhost\\\",\\\"protocol\\\":\\\"http://\\\",\\\"localhost\\\":\\\"divide-upstream-60\\\",\\\"weight\\\":60}]\")\n                .build();\n        when(pluginMapper.selectByNames(anyList())).thenReturn(Lists.newArrayList(pluginDO));\n        when(selectorMapper.findByPluginIds(anyList())).thenReturn(Lists.newArrayList(selectorDOWithUrlError, selectorDOWithUrlReachable));\n        upstreamCheckService.fetchUpstreamData();\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME));\n        assertTrue(upstreamMap.containsKey(MOCK_SELECTOR_NAME_OTHER));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 121,
        "repo_name": "apache/shenyu",
        "commit_id": "dc31e2ae16d4f687b3e7ff6148eab418f7c614e9",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutor.java",
            "method_src": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n        if (Objects.nonNull(fallback)) {\n            return to.onErrorResume(fallback);\n        }\n        return to;\n    }",
            "method_tgt": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n\n        return Optional.ofNullable(fallback)\n                .map(to::onErrorResume)\n                .orElse(to);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutorTest.java",
            "method_src": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }",
            "method_tgt": "@Test\n    public void normalTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        Mono<String> mono = Mono.just(\"ERROR\");\n        StepVerifier.create(ratelimiterExecutor.run(Mono.just(\"SHENYU\"), throwable -> mono, conf))\n                .expectSubscription().expectNext(\"SHENYU\")\n                .verifyComplete();\n\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 122,
        "repo_name": "apache/shenyu",
        "commit_id": "dc31e2ae16d4f687b3e7ff6148eab418f7c614e9",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-resilience4j/src/main/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutor.java",
            "method_src": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n        if (Objects.nonNull(fallback)) {\n            return to.onErrorResume(fallback);\n        }\n        return to;\n    }",
            "method_tgt": "@Override\n    public <T> Mono<T> run(final Mono<T> toRun, final Function<Throwable, Mono<T>> fallback, final Resilience4JConf conf) {\n        RateLimiter rateLimiter = Resilience4JRegistryFactory.rateLimiter(conf.getId(), conf.getRateLimiterConfig());\n        Mono<T> to = toRun.transformDeferred(RateLimiterOperator.of(rateLimiter));\n\n        return Optional.ofNullable(fallback)\n                .map(to::onErrorResume)\n                .orElse(to);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-resilience4j/src/test/java/org/apache/shenyu/plugin/resilience4j/executor/RateLimiterExecutorTest.java",
            "method_src": "@Test\n    public void errorTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        StepVerifier.create(ratelimiterExecutor.run(Mono.error(new RuntimeException()), throwable -> Mono.error(throwable), conf))\n                .expectSubscription()\n                .expectError(RuntimeException.class);\n    }",
            "method_tgt": "@Test\n    public void errorTest() {\n        Resilience4JConf conf = mock(Resilience4JConf.class);\n        when(conf.getId()).thenReturn(\"SHENYU\");\n        when(conf.getRateLimiterConfig()).thenReturn(RateLimiterConfig.ofDefaults());\n        StepVerifier.create(ratelimiterExecutor.run(Mono.error(new RuntimeException()), Mono::error, conf))\n                .expectSubscription()\n                .expectError(RuntimeException.class)\n                .verify();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 123,
        "repo_name": "apache/shenyu",
        "commit_id": "45da0168d933899595a215a09aa3c79ab88be3ce",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-cryptor/src/main/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        CryptorRuleHandle ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(ruleHandle)) {\n            LOG.error(\"Cryptor response rule configuration is null :{}\", rule.getId());\n            return chain.execute(exchange);\n        }\n        if (JsonUtil.checkParam(ruleHandle)) {\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),\n                    ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + \"[\" + JsonUtil.getErrorCollector() + \"]\", null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        return chain.execute(exchange.mutate()\n                .response(new ResponseDecorator(exchange, ruleHandle)).build());\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        CryptorRuleHandle ruleHandle = CryptorResponsePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(ruleHandle)) {\n            LOG.error(\"Cryptor response rule configuration is null :{}\", rule.getId());\n            return chain.execute(exchange);\n        }\n        if (JsonUtil.checkParam(ruleHandle)) {\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getCode(),\n                    ShenyuResultEnum.CRYPTOR_RESPONSE_ERROR_CONFIGURATION.getMsg() + \"[\" + JsonUtil.getErrorCollector() + \"]\", null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        return chain.execute(exchange.mutate()\n                .response(new CryptorResponseDecorator(exchange, ruleHandle)).build());\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-cryptor/src/test/java/org/apache/shenyu/plugin/cryptor/response/CryptorResponsePluginTest.java",
            "method_src": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(ResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test\n    public void multiJsonDecryptTest() {\n        MockServerHttpRequest request = MockServerHttpRequest\n                .post(\"/test\")\n                .remoteAddress(new InetSocketAddress(8090))\n                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)\n                .body(\"{\\\"code\\\":200,\\\"msg\\\":\\\"success\\\",\\\"data\\\":{\\\"shenyu\\\":\"\n                        + \"\\\"kYPZgOAR2pEipskl5WURW/r3CMxNQJwbs4jbTAOfZNV39L4WkaTOqAeolV+rlKCKiXKvhfHWaxQOTMm9hQBxLA==\\\"}}\");\n        this.exchange = spy(MockServerWebExchange.from(request));\n        this.ruleData.setHandle(\"{\\\"strategyName\\\":\\\"rsa\\\",\"\n                + \"\\\"fieldNames\\\":\\\"data.shenyu\\\",\"\n                + \"\\\"decryptKey\\\":\\\"MIIBVQIBADANBgkqhkiG9w0BAQEFAASCAT8wggE7AgEAAkEAtrfolGUtLhZVSpd5L/oAXbGW9Rn54mD96Ny\"\n                + \"uWsxp/KCscDoeFScN7uSc3LwKk14wrC4X0+fSDxm0kMPTvgNBywIDAQABAkBFPvt4ycNOlQ4r364A3akn2PbR2s9V2NZBW\"\n                + \"ukE5jVAlOvgCn6L/+tsVDSQgeVtOPd6rwM2a24iASDsNEbnVrwBAiEA34DwAmsa1phE5aGKM1bPHJiGgM8yolIYDWBaBCu\"\n                + \"PTgECIQDRSOWA8rLJWP+Vijm/QB8C41Gw1V7WXC2Kuj07Jv5nywIgTDKCIODw8m5RNtRe8GfNDlu1p158TbidOJo7tiY/og\"\n                + \"ECIQCaj0tvP83qBWA8AClFpQVCDL936RxxEwJPQduWo+WeoQIhAN7HKEW0E97il2RvCsgeArdt83WjZh7OhMhW6MLPrMjs\\\",\"\n                + \"\\\"encryptKey\\\":\\\"MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALa36JRlLS4WVUqXeS/6AF2xlvUZ+eJg/ejcrlrMafygrHA6Hh\"\n                + \"UnDe7knNy8CpNeMKwuF9Pn0g8ZtJDD074DQcsCAwEAAQ\\\\u003d\\\\u003d\\\",\"\n                + \"\\\"way\\\":\\\"decrypt\\\"\"\n                + \"}\\n\");\n        ServerWebExchange.Builder builder = mock(ServerWebExchange.Builder.class);\n        when(exchange.mutate()).thenReturn(builder);\n        when(builder.response(any(CryptorResponseDecorator.class))).thenReturn(builder);\n        when(builder.build()).thenReturn(exchange);\n        when(chain.execute(any())).thenReturn(Mono.empty());\n        cryptorResponsePluginDataHandler.handlerRule(ruleData);\n        ServerWebExchange exchangeNormal = generateServerWebExchange();\n        Mono<Void> result = cryptorResponsePlugin.doExecute(exchangeNormal, chain, selectorData, ruleData);\n        StepVerifier.create(result).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 124,
        "repo_name": "apache/shenyu",
        "commit_id": "14e40273fb72f0d4f5af78be653414750e4f257b",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-rewrite/src/main/java/org/apache/shenyu/plugin/rewrite/RewritePlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String handle = rule.getHandle();\n        final RewriteHandle rewriteHandle = RewritePluginDataHandler.CACHED_HANDLE.get()\n                .obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(rewriteHandle)) {\n            LOG.error(\"uri rewrite rule can not configuration\uff1a{}\", handle);\n            return chain.execute(exchange);\n        }\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        String rewriteUri = exchange.getRequest().getURI().getPath();\n        if (StringUtils.isNotBlank(shenyuContext.getRealUrl())) {\n            rewriteUri = shenyuContext.getRealUrl();\n        }\n        if (StringUtils.isNoneBlank(rewriteHandle.getRegex(), rewriteHandle.getReplace())) {\n            rewriteUri = rewriteUri.replaceAll(rewriteHandle.getRegex(), rewriteHandle.getReplace());\n        }\n        exchange.getAttributes().put(Constants.REWRITE_URI, rewriteUri);\n        return chain.execute(exchange);\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String handle = rule.getHandle();\n        RewriteHandle rewriteHandle = RewritePluginDataHandler.CACHED_HANDLE.get().obtainHandle(CacheKeyUtils.INST.getKey(rule));\n        if (Objects.isNull(rewriteHandle)) {\n            LOG.error(\"uri rewrite rule can not configuration\uff1a{}\", handle);\n            return chain.execute(exchange);\n        }\n        String rewriteUri = exchange.getRequest().getURI().getPath();\n        if (StringUtils.isNoneBlank(rewriteHandle.getRegex(), rewriteHandle.getReplace())) {\n            rewriteUri = rewriteUri.replaceAll(rewriteHandle.getRegex(), rewriteHandle.getReplace());\n            exchange.getAttributes().put(Constants.REWRITE_URI, rewriteUri);\n        }\n        return chain.execute(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-rewrite/src/test/java/org/apache/shenyu/plugin/rewrite/RewritePluginTest.java",
            "method_src": "@Test\n    public void testRewritePlugin() {\n        RuleData data = new RuleData();\n        data.setHandle(\"{}\");\n        RewriteHandle rewriteHandle = GsonUtils.getGson().fromJson(data.getHandle(), RewriteHandle.class);\n        RewritePluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(data), rewriteHandle);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        StepVerifier.create(rewritePlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n        assertEquals(\"/shenyu/test\", exchange.getAttributes().get(Constants.REWRITE_URI));\n    }",
            "method_tgt": "@Test\n    public void testRewritePlugin() {\n        RuleData data = new RuleData();\n        data.setHandle(\"{\\\"regex\\\":\\\"\\\",\\\"replace\\\":\\\"\\\"}\");\n        RewriteHandle rewriteHandle = GsonUtils.getGson().fromJson(data.getHandle(), RewriteHandle.class);\n        RewritePluginDataHandler.CACHED_HANDLE.get().cachedHandle(CacheKeyUtils.INST.getKey(data), rewriteHandle);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        StepVerifier.create(rewritePlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n        Assert.assertTrue(StringUtils.isBlank((String) exchange.getAttributes().get(Constants.REWRITE_URI)));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 125,
        "repo_name": "apache/shenyu",
        "commit_id": "ef4357d560db4138830a9022ff4cb596399f2b36",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
            "method_src": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test\n    public void testAlibabaDubboPlugin() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n\n        StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 126,
        "repo_name": "apache/shenyu",
        "commit_id": "ef4357d560db4138830a9022ff4cb596399f2b36",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/main/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            LOG.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n\n        return Mono.create(monoSink -> {\n            ResponseFuture future = alibabaDubboProxyService.genericInvoker(param, metaData);\n            future.setCallback(new ResponseCallback() {\n\n                @Override\n                public void done(final Object resultObj) {\n                    assert resultObj instanceof Result;\n                    Result result = (Result) resultObj;\n                    if (result.hasException()) {\n                        this.caught(result.getException());\n                        return;\n                    }\n                    monoSink.success(result.getValue());\n                }\n\n                @Override\n                public void caught(final Throwable ex) {\n                    LOG.error(\"dubbo failed using async genericInvoker() metaData={} param={}\", metaData, param, ex);\n                    monoSink.error(ex);\n                }\n            });\n        }).flatMap(response -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, Objects.nonNull(response) ? response : Constants.DUBBO_RPC_RESULT_EMPTY);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return chain.execute(exchange);\n        });\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-dubbo/shenyu-plugin-alibaba-dubbo/src/test/java/org/apache/shenyu/plugin/alibaba/dubbo/AlibabaDubboPluginTest.java",
            "method_src": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }",
            "method_tgt": "@Test\n    public void testAlibabaDubboPluginMetaDataNull() {\n        final ServerWebExchange exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"localhost\").remoteAddress(new InetSocketAddress(\"127.0.0.1\", 20880)).build());\n        ShenyuContext context = mock(ShenyuContext.class);\n        when(context.getRpcType()).thenReturn(RpcTypeEnum.DUBBO.getName());\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.META_DATA, new MetaData());\n        ShenyuPluginChain chain = mock(ShenyuPluginChain.class);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        SelectorData selectorData = mock(SelectorData.class);\n\n        try (MockedStatic<ShenyuResultWrap> shenyuResultWrapMockedStatic = mockStatic(ShenyuResultWrap.class)) {\n            shenyuResultWrapMockedStatic.when(() -> ShenyuResultWrap\n                    .error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null))\n                    .thenReturn(new Object());\n\n            Mono<Void> voidMono = alibabaDubboPluginUnderTest.doExecute(exchange, chain, selectorData, data);\n            StepVerifier.create(voidMono).expectSubscription().verifyComplete();\n        }\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 127,
        "repo_name": "apache/shenyu",
        "commit_id": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
        "focal_db": {
            "rel_path": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/RuleHandleFactory.java",
            "method_src": "public static RuleHandle ruleHandle(final String name, final String path) {\n        Class<? extends RuleHandle> clazz = RPC_TYPE_TO_RULE_HANDLE_CLASS.getOrDefault(name, DEFAULT_RULE_HANDLE);\n        try {\n            return clazz.newInstance().createDefault(path);\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new ShenyuException(\n                    String.format(\"Init RuleHandle failed with plugin name: %s, rule class: %s, exception: %s\",\n                            name,\n                            clazz.getSimpleName(),\n                            e.getMessage()));\n        }\n    }",
            "method_tgt": "public static RuleHandle ruleHandle(final String pluginName, final String path, final String rpcExt) {\n        Class<? extends RuleHandle> clazz = RPC_TYPE_TO_RULE_HANDLE_CLASS.getOrDefault(pluginName, DEFAULT_RULE_HANDLE);\n        try {\n            return clazz.newInstance().createDefault(path, rpcExt);\n        } catch (InstantiationException | IllegalAccessException e) {\n            throw new ShenyuException(\n                    String.format(\"Init RuleHandle failed with plugin name: %s, rule class: %s, exception: %s\",\n                            pluginName,\n                            clazz.getSimpleName(),\n                            e.getMessage()));\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/RuleHandleFactoryTest.java",
            "method_src": "@Test\n    public void testRuleHandleCorrectType() {\n        RuleHandle handle = RuleHandleFactory.ruleHandle(PluginEnum.DUBBO.getName(), \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof DubboRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.SOFA.getName(), \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SofaRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof DivideRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.GRPC.getName(), \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SpringCloudRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.SPRING_CLOUD.getName(), \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SpringCloudRuleHandle, is(true));\n    }",
            "method_tgt": "@Test\n    public void testRuleHandleCorrectType() {\n        RuleHandle handle = RuleHandleFactory.ruleHandle(PluginEnum.DUBBO.getName(), \"\", \"{\\\"loadbalance\\\":\\\"random\\\"}\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof DubboRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.SOFA.getName(), \"\", \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SofaRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.DIVIDE.getName(), \"\", \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof DivideRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.GRPC.getName(), \"\", \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SpringCloudRuleHandle, is(true));\n\n        handle = RuleHandleFactory.ruleHandle(PluginEnum.SPRING_CLOUD.getName(), \"\", \"\");\n        assertThat(handle, notNullValue());\n        assertThat(handle instanceof SpringCloudRuleHandle, is(true));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 128,
        "repo_name": "apache/shenyu",
        "commit_id": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
        "focal_db": {
            "rel_path": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandle.java",
            "method_src": "@Override\n    public RuleHandle createDefault(final String path) {\n        this.contextPath = path;\n        return this;\n    }",
            "method_tgt": "@Override\n    public RuleHandle createDefault(final String path, final String rpcExt) {\n        this.contextPath = path;\n        return this;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ContextMappingHandleTest.java",
            "method_src": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }",
            "method_tgt": "@Test\n    public void testCreateDefault() {\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        RuleHandle aDefault = contextMappingHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, contextMappingHandle);\n        assertEquals(contextMappingHandle.getContextPath(), PATH);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 129,
        "repo_name": "apache/shenyu",
        "commit_id": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
        "focal_db": {
            "rel_path": "shenyu-common/src/main/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandle.java",
            "method_src": "@Override\n    public RuleHandle createDefault(final String path) {\n        this.statusCode = HttpStatus.OK.value();\n        return this;\n    }",
            "method_tgt": "@Override\n    public RuleHandle createDefault(final String path, final String rpcExt) {\n        this.statusCode = HttpStatus.OK.value();\n        return this;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-common/src/test/java/org/apache/shenyu/common/dto/convert/rule/impl/ModifyResponseRuleHandleTest.java",
            "method_src": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH);\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }",
            "method_tgt": "@Test\n    public void testCreateDefault() {\n        ModifyResponseRuleHandle modifyResponseRuleHandle = new ModifyResponseRuleHandle();\n        RuleHandle aDefault = modifyResponseRuleHandle.createDefault(PATH, \"\");\n        assertNotNull(aDefault);\n        assertEquals(aDefault, modifyResponseRuleHandle);\n        assertEquals(HttpStatus.OK.value(), modifyResponseRuleHandle.getStatusCode());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 130,
        "repo_name": "apache/shenyu",
        "commit_id": "5bae6f7d0fcc479f3a8990c443c83fec0f57528f",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            LOG.error(\" path is : {}, meta data have error : {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            LOG.error(\" path is : {}, meta data have error : {}\", shenyuContext.getPath(), metaData);\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        RpcContext.getContext().setAttachment(Constants.DUBBO_SELECTOR_ID, selector.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_RULE_ID, rule.getId());\n        RpcContext.getContext().setAttachment(Constants.DUBBO_REMOTE_ADDRESS, Objects.requireNonNull(exchange.getRequest().getRemoteAddress()).getAddress().getHostAddress());\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/ApacheDubboPluginTest.java",
            "method_src": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        ShenyuContext context = mock(ShenyuContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 131,
        "repo_name": "apache/shenyu",
        "commit_id": "1fb1d289807c6c3fc79d8c306d791fc711aba465",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/config/DataBaseConfiguration.java",
            "method_src": "@Bean\n    @ConditionalOnMissingBean(value = DataBaseProperties.class)\n    public DataBaseProperties dataBaseProperties(@Value(\"${shenyu.database.dialect:h2}\") final String dialect,\n                                                   @Value(\"${shenyu.database.init_script:sql-script/h2/schema.sql}\") final String initScript,\n                                                   @Value(\"${shenyu.database.init_enable:true}\") final Boolean initEnable,\n                                                   @Value(\"${shenyu.database.db_script}\") final String dbScript) {\n        DataBaseProperties dataSourceProperties = new DataBaseProperties();\n        dataSourceProperties.setDialect(dialect);\n        dataSourceProperties.setInitScript(initScript);\n        dataSourceProperties.setInitEnable(initEnable);\n        dataSourceProperties.setDbScript(dbScript);\n        return dataSourceProperties;\n    }",
            "method_tgt": "@Bean\n    @ConditionalOnMissingBean(value = DataBaseProperties.class)\n    public DataBaseProperties dataBaseProperties(@Value(\"${shenyu.database.dialect:h2}\") final String dialect,\n                                                   @Value(\"${shenyu.database.init_script:sql-script/h2/schema.sql}\") final String initScript,\n                                                   @Value(\"${shenyu.database.init_enable:true}\") final Boolean initEnable) {\n        DataBaseProperties dataSourceProperties = new DataBaseProperties();\n        dataSourceProperties.setDialect(dialect);\n        dataSourceProperties.setInitScript(initScript);\n        dataSourceProperties.setInitEnable(initEnable);\n        return dataSourceProperties;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/config/DataBaseConfigurationTest.java",
            "method_src": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true, \"\");\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }",
            "method_tgt": "@Test\n    public void testDataBaseProperties() {\n        DataBaseConfiguration dataBaseConfiguration = new DataBaseConfiguration();\n        String dialect = \"MySQL\";\n        String initScript = \"/tmp/init.sql\";\n        DataBaseProperties dataBaseProperties = dataBaseConfiguration.dataBaseProperties(dialect, initScript, true);\n        assertNotNull(dataBaseProperties);\n        assertEquals(dataBaseProperties.getDialect(), dialect);\n        assertEquals(dataBaseProperties.getInitScript(), initScript);\n        assertEquals(dataBaseProperties.getInitEnable(), true);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 132,
        "repo_name": "apache/shenyu",
        "commit_id": "34e950d3cf36e904c2a5678a5ad2b8175e85c9b2",
        "focal_db": {
            "rel_path": "shenyu-web/src/main/java/org/apache/shenyu/web/filter/CrossFilter.java",
            "method_src": "@Override\n    @SuppressWarnings(\"all\")\n    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        if (CorsUtils.isCorsRequest(request)) {\n            ServerHttpResponse response = exchange.getResponse();\n            HttpHeaders headers = response.getHeaders();\n            headers.add(\"Access-Control-Allow-Origin\", ALLOWED_ORIGIN);\n            headers.add(\"Access-Control-Allow-Methods\", ALLOWED_METHODS);\n            headers.add(\"Access-Control-Max-Age\", MAX_AGE);\n            headers.add(\"Access-Control-Allow-Headers\", ALLOWED_HEADERS);\n            headers.add(\"Access-Control-Expose-Headers\", ALLOWED_EXPOSE);\n            headers.add(\"Access-Control-Allow-Credentials\", \"true\");\n            if (request.getMethod() == HttpMethod.OPTIONS) {\n                response.setStatusCode(HttpStatus.OK);\n                return Mono.empty();\n            }\n        }\n        return chain.filter(exchange);\n    }",
            "method_tgt": "@Override\n    @SuppressWarnings(\"all\")\n    public Mono<Void> filter(final ServerWebExchange exchange, final WebFilterChain chain) {\n        ServerHttpRequest request = exchange.getRequest();\n        if (CorsUtils.isCorsRequest(request)) {\n            ServerHttpResponse response = exchange.getResponse();\n            HttpHeaders headers = response.getHeaders();\n            headers.add(\"Access-Control-Allow-Origin\", this.filterConfig.getAllowedOrigin());\n            headers.add(\"Access-Control-Allow-Methods\", this.filterConfig.getAllowedMethods());\n            headers.add(\"Access-Control-Max-Age\", this.filterConfig.getMaxAge());\n            headers.add(\"Access-Control-Allow-Headers\", this.filterConfig.getAllowedHeaders());\n            headers.add(\"Access-Control-Expose-Headers\", this.filterConfig.getAllowedExpose());\n            headers.add(\"Access-Control-Allow-Credentials\", String.valueOf(this.filterConfig.isAllowCredentials()));\n            if (request.getMethod() == HttpMethod.OPTIONS) {\n                response.setStatusCode(HttpStatus.OK);\n                return Mono.empty();\n            }\n        }\n        return chain.filter(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-web/src/test/java/org/apache/shenyu/web/filter/CrossFilterTest.java",
            "method_src": "@Test\n    public void testFilter() {\n        ServerWebExchange exchangeNoHeader = MockServerWebExchange.from(MockServerHttpRequest\n                .get(\"http://localhost:8080\")\n                .build());\n        WebFilterChain chainNoHeader = mock(WebFilterChain.class);\n        when(chainNoHeader.filter(exchangeNoHeader)).thenReturn(Mono.empty());\n        CrossFilter filterNoHeader = new CrossFilter();\n        StepVerifier.create(filterNoHeader.filter(exchangeNoHeader, chainNoHeader))\n                .expectSubscription()\n                .verifyComplete();\n\n        ServerWebExchange exchangeNormal = MockServerWebExchange.from(MockServerHttpRequest\n                .get(\"http://localhost:8080\")\n                .header(\"Origin\", \"test\")\n                .build());\n        WebFilterChain chainNormal = mock(WebFilterChain.class);\n        when(chainNormal.filter(exchangeNormal)).thenReturn(Mono.empty());\n        CrossFilter filterNormal = new CrossFilter();\n        StepVerifier.create(filterNormal.filter(exchangeNormal, chainNormal))\n                .expectSubscription()\n                .verifyComplete();\n\n        ServerWebExchange exchangeOption = MockServerWebExchange.from(MockServerHttpRequest\n                .options(\"http://localhost:8080\")\n                .header(\"Origin\", \"test\")\n                .build());\n        WebFilterChain chainOption = mock(WebFilterChain.class);\n        when(chainOption.filter(exchangeOption)).thenReturn(Mono.empty());\n        CrossFilter filterOption = new CrossFilter();\n        StepVerifier.create(filterOption.filter(exchangeOption, chainOption))\n                .expectSubscription()\n                .verifyComplete();\n    }",
            "method_tgt": "@Test\n    public void testFilter() {\n        ServerWebExchange exchangeNoHeader = MockServerWebExchange.from(MockServerHttpRequest\n                .get(\"http://localhost:8080\")\n                .build());\n        WebFilterChain chainNoHeader = mock(WebFilterChain.class);\n        when(chainNoHeader.filter(exchangeNoHeader)).thenReturn(Mono.empty());\n        CrossFilter filterNoHeader = new CrossFilter(new ShenyuConfig.CrosFilterConfig());\n        StepVerifier.create(filterNoHeader.filter(exchangeNoHeader, chainNoHeader))\n                .expectSubscription()\n                .verifyComplete();\n\n        ServerWebExchange exchangeNormal = MockServerWebExchange.from(MockServerHttpRequest\n                .get(\"http://localhost:8080\")\n                .header(\"Origin\", \"test\")\n                .build());\n        WebFilterChain chainNormal = mock(WebFilterChain.class);\n        when(chainNormal.filter(exchangeNormal)).thenReturn(Mono.empty());\n        CrossFilter filterNormal = new CrossFilter(new ShenyuConfig.CrosFilterConfig());\n        StepVerifier.create(filterNormal.filter(exchangeNormal, chainNormal))\n                .expectSubscription()\n                .verifyComplete();\n\n        ServerWebExchange exchangeOption = MockServerWebExchange.from(MockServerHttpRequest\n                .options(\"http://localhost:8080\")\n                .header(\"Origin\", \"test\")\n                .build());\n        WebFilterChain chainOption = mock(WebFilterChain.class);\n        when(chainOption.filter(exchangeOption)).thenReturn(Mono.empty());\n        CrossFilter filterOption = new CrossFilter(new ShenyuConfig.CrosFilterConfig());\n        StepVerifier.create(filterOption.filter(exchangeOption, chainOption))\n                .expectSubscription()\n                .verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 133,
        "repo_name": "apache/shenyu",
        "commit_id": "f86a01fe18619702624f83813342e0fad05aa5df",
        "focal_db": {
            "rel_path": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/main/java/org/apache/shenyu/register/client/http/utils/RegisterUtils.java",
            "method_src": "public static void doRegister(final String json, final String url, final String rpcType) throws IOException {\n        String result = OkHttpTools.getInstance().post(url, json);\n        if (\"success\".equals(result)) {\n            log.info(\"{} client register success: {} \", rpcType, json);\n        } else {\n            log.error(\"{} client register error: {} \", rpcType, json);\n        }\n    }",
            "method_tgt": "public static void doRegister(final String json, final String url, final String rpcType) throws IOException {\n        String result = OkHttpTools.getInstance().post(url, json);\n        if (\"success\".equals(result)) {\n            LOGGER.info(\"{} client register success: {} \", rpcType, json);\n        } else {\n            LOGGER.error(\"{} client register error: {} \", rpcType, json);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-register-center/shenyu-register-client/shenyu-register-client-http/src/test/java/org/apache/shenyu/register/client/http/RegisterUtilsTest.java",
            "method_src": "@SneakyThrows\n    @Test\n    public void testDoRegisterWhenError() {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }",
            "method_tgt": "@Test\n    public void testDoRegisterWhenError() throws IOException {\n        when(okHttpTools.post(url, json)).thenReturn(\"Error parameter\uff01\");\n        try (MockedStatic<OkHttpTools> okHttpToolsMockedStatic = mockStatic(OkHttpTools.class)) {\n            okHttpToolsMockedStatic.when(OkHttpTools::getInstance).thenReturn(okHttpTools);\n            RegisterUtils.doRegister(json, url, RegisterTypeEnum.DUBBO.getName());\n            verify(okHttpTools, times(1)).post(eq(url), eq(json));\n        }\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 134,
        "repo_name": "apache/shenyu",
        "commit_id": "b7a799db515b099018355b8f4e609e22b28f6ee7",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-jwt/src/main/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandler.java",
            "method_src": "@Override\n    public void handlerPlugin(final PluginData pluginData) {\n        JwtConfig jwtConfig = GsonUtils.getInstance().fromJson(pluginData.getConfig(), JwtConfig.class);\n        Singleton.INST.single(JwtConfig.class, jwtConfig);\n    }",
            "method_tgt": "@Override\n    public void handlerPlugin(final PluginData pluginData) {\n        Map<String, String> configMap = GsonUtils.getInstance().toObjectMap(pluginData.getConfig(), String.class);\n        String secretKey = Optional.of(configMap.get(Constants.SECRET_KEY)).orElse(\"\");\n        String filterPath = Optional.of(configMap.get(Constants.FILTER_PATH)).orElse(\"\");\n        JwtConfig jwtConfig = new JwtConfig();\n        jwtConfig.setSecretKey(secretKey);\n        jwtConfig.setFilterPath(Arrays.asList(StringUtils.split(filterPath, \",\")));\n        Singleton.INST.single(JwtConfig.class, jwtConfig);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-jwt/src/test/java/org/apache/shenyu/plugin/jwt/handle/JwtPluginDataHandlerTest.java",
            "method_src": "@Test\n    public void testHandlerPlugin() {\n        final PluginData pluginData = new PluginData(\"pluginId\", \"pluginName\", \"{\\\"secretKey\\\":\\\"sinsy\\\",\\\"filterPath\\\":[\\\"/cloud/ecg/common\\\"]}\", \"0\", false);\n        jwtPluginDataHandlerUnderTest.handlerPlugin(pluginData);\n        JwtConfig jwtConfig = Singleton.INST.get(JwtConfig.class);\n        assertEquals(GsonUtils.getInstance().toJson(jwtConfig), pluginData.getConfig());\n    }",
            "method_tgt": "@Test\n    public void testHandlerPlugin() {\n        final PluginData pluginData = new PluginData(\"pluginId\", \"pluginName\", \"{\\\"secretKey\\\":\\\"sinsy\\\",\\\"filterPath\\\":\\\"/cloud/ecg/common,/cloud/ecg/selectAll\\\"}\", \"0\", false);\n        jwtPluginDataHandlerUnderTest.handlerPlugin(pluginData);\n        JwtConfig jwtConfig = Singleton.INST.get(JwtConfig.class);\n        Map<String, String> map = GsonUtils.getInstance().toObjectMap(pluginData.getConfig(), String.class);\n        assertEquals(jwtConfig.getSecretKey(), map.get(\"secretKey\"));\n        assertEquals(StringUtils.join(jwtConfig.getFilterPath(), \",\"), map.get(\"filterPath\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 135,
        "repo_name": "apache/shenyu",
        "commit_id": "733bfae7dd36859bda98d6aee6f223b2a0aace03",
        "focal_db": {
            "rel_path": "shenyu-admin/src/main/java/org/apache/shenyu/admin/utils/AesUtils.java",
            "method_src": "public static String aesDecryption(final String src, final String aesKey) {\n        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {\n            return CipherUtils.decryptStr(src, aesKey);\n        }\n        return null;\n    }",
            "method_tgt": "public static String aesDecryption(final String src, final String aesKey, final String iv) {\n        if (Optional.ofNullable(src).isPresent() && !src.isEmpty()) {\n            return CipherUtils.decryptStr(src, aesKey, iv);\n        }\n        return null;\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-admin/src/test/java/org/apache/shenyu/admin/utils/AesUtilsTest.java",
            "method_src": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"jHcpKkiDbbQh7W7hh8yQSA==\", AES_KEY), is(\"123456\"));\n    }",
            "method_tgt": "@Test\n    public void testAesDecryption() {\n        assertThat(AesUtils.aesDecryption(\"bbiB8zbUo3z3oA0VqEB/IA==\", AES_KEY, IV), is(\"123456\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 136,
        "repo_name": "apache/shenyu",
        "commit_id": "78d85a6b283e233495664d41512084c35d295909",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-grpc/src/main/java/org/apache/shenyu/plugin/grpc/GrpcPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());\n        if (Objects.isNull(client)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        GrpcExtInfo extInfo = GsonUtils.getGson().fromJson(metaData.getRpcExt(), GrpcExtInfo.class);\n        CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(extInfo.timeout, TimeUnit.MILLISECONDS);\n        CompletableFuture<ShenyuGrpcResponse> result = client.call(metaData, callOptions, param);\n        return Mono.fromFuture(result.thenApply(ret -> {\n            exchange.getAttributes().put(Constants.RPC_RESULT, ret.getResult());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(ShenyuException::new).then(chain.execute(exchange));\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final ShenyuPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        ShenyuContext shenyuContext = exchange.getAttribute(Constants.CONTEXT);\n        assert shenyuContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", shenyuContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.META_DATA_ERROR.getCode(), ShenyuResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getCode(), ShenyuResultEnum.GRPC_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final ShenyuGrpcClient client = GrpcClientCache.getGrpcClient(selector.getName());\n        if (Objects.isNull(client)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = ShenyuResultWrap.error(ShenyuResultEnum.GRPC_CLIENT_NULL.getCode(), ShenyuResultEnum.GRPC_CLIENT_NULL.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        GrpcExtInfo extInfo = GsonUtils.getGson().fromJson(metaData.getRpcExt(), GrpcExtInfo.class);\n        CallOptions callOptions = CallOptions.DEFAULT.withDeadlineAfter(extInfo.timeout, TimeUnit.MILLISECONDS);\n        CompletableFuture<ShenyuGrpcResponse> result = client.call(metaData, callOptions, param, extInfo.methodType);\n        return Mono.fromFuture(result.thenApply(ret -> {\n            exchange.getAttributes().put(Constants.GRPC_RPC_RESULT, ret.getResults());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(ShenyuException::new).then(chain.execute(exchange));\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-grpc/src/test/java/org/apache/shenyu/plugin/grpc/GrpcPluginTest.java",
            "method_src": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.setResult(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test\n    @SneakyThrows\n    public void testDoExecute() {\n        ServerWebExchange exchange = getServerWebExchange();\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{message:1}\");\n        exchange.getAttributes().put(Constants.META_DATA, getMetaData());\n\n        Class grpcClientCacheClass = Class.forName(\"org.apache.shenyu.plugin.grpc.cache.GrpcClientCache\");\n        Field clientCacheField = grpcClientCacheClass.getDeclaredField(\"CLIENT_CACHE\");\n        clientCacheField.setAccessible(true);\n        Map<String, ShenyuGrpcClient> clientCacheMap = (Map<String, ShenyuGrpcClient>) clientCacheField.get(grpcClientCacheClass);\n        ShenyuGrpcClient mockClient = mock(ShenyuGrpcClient.class);\n        ShenyuGrpcResponse response = new ShenyuGrpcResponse();\n        response.getResults().add(\"success\");\n        when(mockClient.call(Mockito.any(), Mockito.any(), Mockito.any(), Mockito.any()))\n                .thenReturn(CompletableFuture.completedFuture(response));\n        clientCacheMap.put(\"/grpc\", mockClient);\n\n        when(chain.execute(Mockito.any())).thenReturn(Mono.empty());\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(grpcPlugin.doExecute(exchange, chain, selector, data)).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 137,
        "repo_name": "apache/shenyu",
        "commit_id": "ecb8b8554ef1e4a23d52abd66053c4cbc72afa0c",
        "focal_db": {
            "rel_path": "shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegister.java",
            "method_src": "@Override\n    public void counterIncrement(final String name, final String[] labelValues) {\n        Counter counter = COUNTER_MAP.get(name);\n        if (null != labelValues) {\n            counter.labels(labelValues).inc();\n        } else {\n            counter.inc();\n        }\n    }",
            "method_tgt": "@Override\n    public void counterIncrement(final String name, final String[] labelValues, final long count) {\n        Counter counter = COUNTER_MAP.get(name);\n        if (null != labelValues) {\n            counter.labels(labelValues).inc(count);\n        } else {\n            counter.inc(count);\n        }\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/register/PrometheusMetricsRegisterTest.java",
            "method_src": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }",
            "method_tgt": "@Test\n    @SuppressWarnings(\"unchecked\")\n    public void assertCounter() {\n        String requestTotal = \"request_total\";\n        String[] labelNames = new String[] {\"name\"};\n        prometheusMetricsRegister.registerCounter(requestTotal, labelNames, \"shenyu request total count\");\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 1);\n        prometheusMetricsRegister.counterIncrement(requestTotal, labelNames, 2);\n        Map<String, Counter> counterMap = (Map<String, Counter>) ReflectUtils.getFieldValue(prometheusMetricsRegister, \"COUNTER_MAP\");\n        assertThat(counterMap.size(), is(1));\n        Counter routeDatasourceCounter = counterMap.get(requestTotal);\n        assertThat(routeDatasourceCounter.labels(labelNames).get(), is(3.0d));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 138,
        "repo_name": "apache/shenyu",
        "commit_id": "ecb8b8554ef1e4a23d52abd66053c4cbc72afa0c",
        "focal_db": {
            "rel_path": "shenyu-metrics/shenyu-metrics-prometheus/src/main/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootService.java",
            "method_src": "@Override\n    public void start(final MetricsConfig metricsConfig) {\n        startServer(metricsConfig);\n        MetricsReporter.register(PrometheusMetricsRegister.getInstance());\n    }",
            "method_tgt": "@Override\n    public void start(final MetricsConfig metricsConfig, final MetricsRegister metricsRegister) {\n        startServer(metricsConfig);\n        MetricsReporter.register(metricsRegister);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-metrics/shenyu-metrics-prometheus/src/test/java/org/apache/shenyu/metrics/prometheus/service/PrometheusBootServiceTest.java",
            "method_src": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig);\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }",
            "method_tgt": "@SneakyThrows\n    @Test\n    public void testRegistered() {\n        AtomicBoolean registered = (AtomicBoolean) ReflectUtils.getFieldValue(prometheusBootService, \"registered\");\n        registered.set(true);\n        String jmxConfig = GsonUtils.getInstance().toJson(\"whitelistObjectNames:org.apache.cassandra.metrics:type=ColumnFamily\");\n        MetricsConfig metricsConfig = new MetricsConfig(\"test\", \"\", 10119, false, 1, jmxConfig, null);\n        prometheusBootService.start(metricsConfig, new PrometheusMetricsRegister());\n        Field field = PrometheusBootService.class.getDeclaredField(\"server\");\n        field.setAccessible(true);\n        HTTPServer httpServer = (HTTPServer) field.get(prometheusBootService);\n        assertNotNull(httpServer);\n        assertThat(httpServer.getPort(), is(10119));\n        assertTrue(prometheusBootService.getRegistered().get());\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 139,
        "repo_name": "apache/shenyu",
        "commit_id": "eb9af33fc86ea6f731ab554c60ee53e211252b2a",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/main/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyService.java",
            "method_src": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {\n        // issue(https://github.com/dromara/shenyu/issues/471), add dubbo tag route\n        String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);\n        if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) {\n            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);\n        }\n        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());\n            DubboProviderVersionCache.getInstance().invalidate(metaData.getPath());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.get();\n        Pair<String[], Object[]> pair;\n        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future;\n        if (isProviderSupportAsync(metaData.getPath())) {\n            future = genericService.$invokeAsync(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        } else {\n            Object data = genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n            if (data instanceof CompletableFuture) {\n                future = (CompletableFuture<Object>) data;\n            } else {\n                future = CompletableFuture.completedFuture(data);\n            }\n        }\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));\n    }",
            "method_tgt": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws ShenyuException {\n        // issue(https://github.com/dromara/shenyu/issues/471), add dubbo tag route\n        String dubboTagRouteFromHttpHeaders = exchange.getRequest().getHeaders().getFirst(Constants.DUBBO_TAG_ROUTE);\n        if (StringUtils.isNotBlank(dubboTagRouteFromHttpHeaders)) {\n            RpcContext.getContext().setAttachment(CommonConstants.TAG_KEY, dubboTagRouteFromHttpHeaders);\n        }\n        ReferenceConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterface())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getPath());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.get();\n        Pair<String[], Object[]> pair;\n        if (StringUtils.isBlank(metaData.getParameterTypes()) || ParamCheckUtils.dubboBodyIsEmpty(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = bodyParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        //Compatible with asynchronous calls of lower Dubbo versions\n        RpcContext.getContext().setAttachment(ASYNC_KEY, Boolean.TRUE.toString());\n        Object data = genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        if (Objects.isNull(data)) {\n            data = RpcContext.getContext().getFuture();\n        }\n        CompletableFuture<Object> future;\n        if (data instanceof CompletableFuture) {\n            future = (CompletableFuture<Object>) data;\n        } else {\n            future = CompletableFuture.completedFuture(data);\n        }\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.DUBBO_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.DUBBO_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(exception -> exception instanceof GenericException ? new ShenyuException(((GenericException) exception).getExceptionMessage()) : new ShenyuException(exception));\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-apache-dubbo/src/test/java/org/apache/shenyu/plugin/apache/dubbo/proxy/ApacheDubboProxyServiceTest.java",
            "method_src": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        final ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        try (MockedStatic<DubboProviderVersionCache> dubboProviderVersionCacheMockedStatic = mockStatic(DubboProviderVersionCache.class)) {\n            DubboProviderVersionCache dubboProviderVersionCache = mock(DubboProviderVersionCache.class);\n            dubboProviderVersionCacheMockedStatic.when(() -> DubboProviderVersionCache.getInstance()).thenReturn(dubboProviderVersionCache);\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.3\");\n\n            GenericService genericService = mock(GenericService.class);\n            when(referenceConfig.get()).thenReturn(genericService);\n            when(referenceConfig.getInterface()).thenReturn(PATH);\n            CompletableFuture<Object> future = new CompletableFuture<>();\n            when(genericService.$invokeAsync(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n            when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(new Object());\n            ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n            Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n            field.setAccessible(true);\n            ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n            ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            future.complete(\"success\");\n            verify(genericService, times(1)).$invokeAsync(METHOD_NAME, LEFT, RIGHT);\n\n            when(dubboProviderVersionCache.get(anyString())).thenReturn(\"2.7.2\");\n            apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n            verify(genericService, times(1)).$invoke(METHOD_NAME, LEFT, RIGHT);\n        }\n    }",
            "method_tgt": "@Test\n    public void genericInvokerTest() throws IllegalAccessException, NoSuchFieldException {\n        ReferenceConfig referenceConfig = mock(ReferenceConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(referenceConfig.get()).thenReturn(genericService);\n        when(referenceConfig.getInterface()).thenReturn(PATH);\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(future);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, referenceConfig);\n        ApacheDubboProxyService apacheDubboProxyService = new ApacheDubboProxyService(new BodyParamResolveServiceImpl());\n        apacheDubboProxyService.genericInvoker(\"\", metaData, exchange);\n        future.complete(\"success\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 140,
        "repo_name": "apache/shenyu",
        "commit_id": "f382faf69789befff1687821f22a505c2d88b5bb",
        "focal_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-sentinel/src/main/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandle.java",
            "method_src": "@Override\n    public void handlerRule(final RuleData ruleData) {\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        String key = CacheKeyUtils.INST.getKey(ruleData);\n        List<FlowRule> flowRules = FlowRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) {\n            FlowRule rule = new FlowRule(key);\n            rule.setCount(sentinelHandle.getFlowRuleCount());\n            rule.setGrade(sentinelHandle.getFlowRuleGrade());\n            rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior());\n            flowRules.add(rule);\n        }\n        FlowRuleManager.loadRules(flowRules);\n\n        List<DegradeRule> degradeRules = DegradeRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) {\n            DegradeRule rule = new DegradeRule(key);\n            rule.setCount(sentinelHandle.getDegradeRuleCount());\n            rule.setGrade(sentinelHandle.getDegradeRuleGrade());\n            rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow());\n            degradeRules.add(rule);\n        }\n        DegradeRuleManager.loadRules(degradeRules);\n    }",
            "method_tgt": "@Override\n    public void handlerRule(final RuleData ruleData) {\n        SentinelHandle sentinelHandle = GsonUtils.getInstance().fromJson(ruleData.getHandle(), SentinelHandle.class);\n        sentinelHandle.checkData(sentinelHandle);\n        String key = CacheKeyUtils.INST.getKey(ruleData);\n        List<FlowRule> flowRules = FlowRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getFlowRuleEnable() == Constants.SENTINEL_ENABLE_FLOW_RULE) {\n            FlowRule rule = new FlowRule(key);\n            rule.setCount(sentinelHandle.getFlowRuleCount());\n            rule.setGrade(sentinelHandle.getFlowRuleGrade());\n            rule.setControlBehavior(sentinelHandle.getFlowRuleControlBehavior());\n            flowRules.add(rule);\n        }\n        FlowRuleManager.loadRules(flowRules);\n\n        List<DegradeRule> degradeRules = DegradeRuleManager.getRules()\n                .stream()\n                .filter(r -> !r.getResource().equals(key))\n                .collect(Collectors.toList());\n        if (sentinelHandle.getDegradeRuleEnable() == Constants.SENTINEL_ENABLE_DEGRADE_RULE) {\n            DegradeRule rule = new DegradeRule(key);\n            rule.setCount(sentinelHandle.getDegradeRuleCount());\n            rule.setGrade(sentinelHandle.getDegradeRuleGrade());\n            rule.setTimeWindow(sentinelHandle.getDegradeRuleTimeWindow());\n            rule.setStatIntervalMs(sentinelHandle.getDegradeRuleStatIntervals() * 1000);\n            rule.setMinRequestAmount(sentinelHandle.getDegradeRuleMinRequestAmount());\n            rule.setSlowRatioThreshold(sentinelHandle.getDegradeRuleSlowRatioThreshold());\n            degradeRules.add(rule);\n        }\n        DegradeRuleManager.loadRules(degradeRules);\n    }"
        },
        "test_db": {
            "rel_path": "shenyu-plugin/shenyu-plugin-sentinel/src/test/java/org/apache/shenyu/plugin/sentinel/handler/SentinelRuleHandleTest.java",
            "method_src": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }",
            "method_tgt": "@Test\n    public void removeRule() {\n        RuleData data = new RuleData();\n        data.setSelectorId(\"sentinel\");\n        data.setName(\"removeRule\");\n        SentinelHandle sentinelHandle = new SentinelHandle();\n        sentinelHandle.setFlowRuleCount(10);\n        sentinelHandle.setFlowRuleGrade(0);\n        sentinelHandle.setFlowRuleControlBehavior(0);\n        sentinelHandle.setDegradeRuleCount(1);\n        sentinelHandle.setDegradeRuleGrade(0);\n        sentinelHandle.setDegradeRuleTimeWindow(5);\n        sentinelHandle.setDegradeRuleMinRequestAmount(5);\n        sentinelHandle.setDegradeRuleStatIntervals(10);\n        sentinelHandle.setDegradeRuleSlowRatioThreshold(0.5d);\n        data.setHandle(GsonUtils.getGson().toJson(sentinelHandle));\n        sentinelRuleHandle.handlerRule(data);\n        FlowRule flowRule = FlowRuleManager.getRules().get(0);\n        assertThat(flowRule.getCount(), is(10.0));\n        assertThat(flowRule.getResource(), is(\"sentinel_removeRule\"));\n        DegradeRule degradeRule = DegradeRuleManager.getRules().get(0);\n        assertThat(degradeRule.getCount(), is(1.0));\n        assertThat(degradeRule.getResource(), is(\"sentinel_removeRule\"));\n        sentinelRuleHandle.removeRule(data);\n        assertTrue(FlowRuleManager.getRules().isEmpty());\n        assertTrue(DegradeRuleManager.getRules().isEmpty());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 141,
        "repo_name": "apache/shenyu",
        "commit_id": "149360d94666d10fba8ea2ea93e4284e3ba50652",
        "focal_db": {
            "rel_path": "soul-plugin/soul-plugin-context-path/src/main/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final String handle = rule.getHandle();\n        final ContextMappingHandle contextMappingHandle = GsonUtils.getInstance().fromJson(handle, ContextMappingHandle.class);\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final ContextMappingHandle contextMappingHandle = ApplicationConfigCache.getInstance().obtainHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(rule));\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
            "method_src": "@Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }",
            "method_tgt": "@Test\n    public void executeTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/order/findById\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 142,
        "repo_name": "apache/shenyu",
        "commit_id": "149360d94666d10fba8ea2ea93e4284e3ba50652",
        "focal_db": {
            "rel_path": "soul-plugin/soul-plugin-context-path/src/main/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final String handle = rule.getHandle();\n        final ContextMappingHandle contextMappingHandle = GsonUtils.getInstance().fromJson(handle, ContextMappingHandle.class);\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        final SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        final ContextMappingHandle contextMappingHandle = ApplicationConfigCache.getInstance().obtainHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(rule));\n        if (Objects.isNull(contextMappingHandle) || StringUtils.isBlank(contextMappingHandle.getContextPath())) {\n            log.error(\"context path mapping rule configuration is null \uff1a{}\", rule);\n            return chain.execute(exchange);\n        }\n        this.buildContextPath(soulContext, contextMappingHandle);\n        return chain.execute(exchange);\n    }"
        },
        "test_db": {
            "rel_path": "soul-plugin/soul-plugin-context-path/src/test/java/org/dromara/soul/plugin/contextpath/ContextPathMappingPluginTest.java",
            "method_src": "@Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }",
            "method_tgt": "@Test\n    public void executeRealPathTest() {\n        soulContext.setPath(\"/http/context/order/findById\");\n        ContextMappingHandle contextMappingHandle = new ContextMappingHandle();\n        contextMappingHandle.setContextPath(\"/http/context\");\n        contextMappingHandle.setRealUrl(\"/findById\");\n        ApplicationConfigCache.getInstance().cachedHandle(ContextPathMappingPluginDataHandler.getCacheKeyName(ruleData), contextMappingHandle);\n        when(ruleData.getHandle()).thenReturn(GsonUtils.getGson().toJson(contextMappingHandle));\n        contextPathMappingPlugin.doExecute(exchange, chain, selectorData, ruleData);\n        Assert.assertEquals(soulContext.getRealUrl(), \"/findById\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 143,
        "repo_name": "apache/shenyu",
        "commit_id": "12527b4f2b2a7852a8014aaa7e9d2999df1e7eeb",
        "focal_db": {
            "rel_path": "soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String body = exchange.getAttribute(Constants.DUBBO_PARAMS);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }"
        },
        "test_db": {
            "rel_path": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
            "method_src": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test(expected = NullPointerException.class)\n    public void doExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        when(chain.execute(exchange)).thenReturn(Mono.empty());\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 144,
        "repo_name": "apache/shenyu",
        "commit_id": "12527b4f2b2a7852a8014aaa7e9d2999df1e7eeb",
        "focal_db": {
            "rel_path": "soul-plugin/soul-plugin-apache-dubbo/src/main/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPlugin.java",
            "method_src": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String body = exchange.getAttribute(Constants.DUBBO_PARAMS);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(body)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(body, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }",
            "method_tgt": "@Override\n    protected Mono<Void> doExecute(final ServerWebExchange exchange, final SoulPluginChain chain, final SelectorData selector, final RuleData rule) {\n        String param = exchange.getAttribute(Constants.PARAM_TRANSFORM);\n        SoulContext soulContext = exchange.getAttribute(Constants.CONTEXT);\n        assert soulContext != null;\n        MetaData metaData = exchange.getAttribute(Constants.META_DATA);\n        if (!checkMetaData(metaData)) {\n            assert metaData != null;\n            log.error(\" path is :{}, meta data have error.... {}\", soulContext.getPath(), metaData.toString());\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.META_DATA_ERROR.getCode(), SoulResultEnum.META_DATA_ERROR.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        if (StringUtils.isNoneBlank(metaData.getParameterTypes()) && StringUtils.isBlank(param)) {\n            exchange.getResponse().setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);\n            Object error = SoulResultWrap.error(SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getCode(), SoulResultEnum.DUBBO_HAVE_BODY_PARAM.getMsg(), null);\n            return WebFluxResultUtils.result(exchange, error);\n        }\n        final Mono<Object> result = dubboProxyService.genericInvoker(param, metaData, exchange);\n        return result.then(chain.execute(exchange));\n    }"
        },
        "test_db": {
            "rel_path": "soul-plugin/soul-plugin-apache-dubbo/src/test/java/org/dromara/soul/plugin/apache/dubbo/ApacheDubboPluginTest.java",
            "method_src": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.DUBBO_PARAMS, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }",
            "method_tgt": "@Test(expected = NullPointerException.class)\n    public void testMethodIsNullExecute() {\n        SoulContext context = mock(SoulContext.class);\n        exchange.getAttributes().put(Constants.CONTEXT, context);\n        exchange.getAttributes().put(Constants.PARAM_TRANSFORM, \"{key:value}\");\n        MetaData metaData = MetaData.builder()\n                .id(\"1332017966661636096\")\n                .appName(\"dubbo\")\n                .path(\"/dubbo/findAll\")\n                .serviceName(\"org.dromara.soul.test.dubbo.api.service.DubboTestService\")\n                .rpcType(RpcTypeEnum.DUBBO.getName())\n                .build();\n        exchange.getAttributes().put(Constants.META_DATA, metaData);\n        SelectorData selectorData = mock(SelectorData.class);\n        RuleData data = mock(RuleData.class);\n        StepVerifier.create(apacheDubboPlugin.doExecute(exchange, chain, selectorData, data)).expectSubscription().verifyComplete();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 145,
        "repo_name": "apache/shenyu",
        "commit_id": "751c2ce732057b11bfe32458b11af77737e51065",
        "focal_db": {
            "rel_path": "soul-admin/src/main/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListener.java",
            "method_src": "@Override\r\n    public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) {\r\n        updateRuleMap(getConfig(RULE_DATA_ID));\r\n        switch (eventType) {\r\n            case DELETE:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            case REFRESH:\r\n            case MYSELF:\r\n                Set<String> set = new HashSet<>(RULE_MAP.keySet());\r\n                changed.forEach(rule -> {\r\n                    set.remove(rule.getSelectorId());\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                RULE_MAP.keySet().removeAll(set);\r\n                break;\r\n            default:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getSelectorId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n        }\r\n        publishConfig(RULE_DATA_ID, RULE_MAP);\r\n    }",
            "method_tgt": "@Override\r\n    public void onRuleChanged(final List<RuleData> changed, final DataEventTypeEnum eventType) {\r\n        updateRuleMap(getConfig(NacosPathConstants.RULE_DATA_ID));\r\n        switch (eventType) {\r\n            case DELETE:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            case REFRESH:\r\n            case MYSELF:\r\n                RULE_MAP.keySet().removeAll(RULE_MAP.keySet());\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n            default:\r\n                changed.forEach(rule -> {\r\n                    List<RuleData> ls = RULE_MAP\r\n                            .getOrDefault(rule.getSelectorId(), new ArrayList<>())\r\n                            .stream()\r\n                            .filter(s -> !s.getId().equals(rule.getSelectorId()))\r\n                            .sorted(RULE_DATA_COMPARATOR)\r\n                            .collect(Collectors.toList());\r\n                    ls.add(rule);\r\n                    RULE_MAP.put(rule.getSelectorId(), ls);\r\n                });\r\n                break;\r\n        }\r\n        publishConfig(NacosPathConstants.RULE_DATA_ID, RULE_MAP);\r\n    }"
        },
        "test_db": {
            "rel_path": "soul-admin/src/test/java/org/dromara/soul/admin/listener/nacos/NacosDataChangedListenerTest.java",
            "method_src": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of())));\n    }",
            "method_tgt": "@Test\n    public void testOnRuleChanged() throws NacosException {\n        String ruleDataId1 = \"RULE_DATA_1\";\n        String ruleDataId2 = \"RULE_DATA_2\";\n        String selectorId1 = \"ID_1\";\n        String selectorId2 = \"ID_2\";\n        RuleData ruleData1 = RuleData.builder().selectorId(selectorId1).id(ruleDataId1).build();\n        RuleData ruleData2 = RuleData.builder().selectorId(selectorId2).id(ruleDataId2).build();\n\n        nacosDataChangedListener.onRuleChanged(\n                ImmutableList.of(ruleData1, ruleData2), DataEventTypeEnum.CREATE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2,\n                                        ImmutableList.of(ruleData2),\n                                        selectorId1,\n                                        ImmutableList.of(ruleData1))));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.DELETE);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance()\n                        .toJson(\n                                ImmutableMap.of(\n                                        selectorId2, ImmutableList.of(ruleData2), selectorId1, ImmutableList.of())));\n        nacosDataChangedListener.onRuleChanged(ImmutableList.of(ruleData1), DataEventTypeEnum.REFRESH);\n        Assert.assertEquals(\n                configService.getConfig(RULE_DATA_ID, GROUP, 1),\n                GsonUtils.getInstance().toJson(ImmutableMap.of(selectorId1, ImmutableList.of(ruleData1))));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 146,
        "repo_name": "apache/shenyu",
        "commit_id": "bae0e5a68c6fdd363129b695511cc651afe5b1ff",
        "focal_db": {
            "rel_path": "soul-plugin/soul-plugin-sofa/src/main/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyService.java",
            "method_src": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.refer();\n        Pair<String[], Object[]> pair;\n        if (null == body || \"\".equals(body) || \"{}\".equals(body) || \"null\".equals(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback<Object>() {\n            @Override\n            public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n                future.complete(o);\n            }\n\n            @Override\n            public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(throwable);\n            }\n\n            @Override\n            public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(e);\n            }\n        });\n        genericService.$invoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.SOFA_RPC_RESULT_EMPTY;\n            }\n            exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, ret);\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(SoulException::new);\n    }",
            "method_tgt": "public Mono<Object> genericInvoker(final String body, final MetaData metaData, final ServerWebExchange exchange) throws SoulException {\n        ConsumerConfig<GenericService> reference = ApplicationConfigCache.getInstance().get(metaData.getPath());\n        if (Objects.isNull(reference) || StringUtils.isEmpty(reference.getInterfaceId())) {\n            ApplicationConfigCache.getInstance().invalidate(metaData.getServiceName());\n            reference = ApplicationConfigCache.getInstance().initRef(metaData);\n        }\n        GenericService genericService = reference.refer();\n        Pair<String[], Object[]> pair;\n        if (null == body || \"\".equals(body) || \"{}\".equals(body) || \"null\".equals(body)) {\n            pair = new ImmutablePair<>(new String[]{}, new Object[]{});\n        } else {\n            pair = sofaParamResolveService.buildParameter(body, metaData.getParameterTypes());\n        }\n        CompletableFuture<Object> future = new CompletableFuture<>();\n        RpcInvokeContext.getContext().setResponseCallback(new SofaResponseCallback<Object>() {\n            @Override\n            public void onAppResponse(final Object o, final String s, final RequestBase requestBase) {\n                future.complete(o);\n            }\n\n            @Override\n            public void onAppException(final Throwable throwable, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(throwable);\n            }\n\n            @Override\n            public void onSofaException(final SofaRpcException e, final String s, final RequestBase requestBase) {\n                future.completeExceptionally(e);\n            }\n        });\n        genericService.$genericInvoke(metaData.getMethodName(), pair.getLeft(), pair.getRight());\n        return Mono.fromFuture(future.thenApply(ret -> {\n            if (Objects.isNull(ret)) {\n                ret = Constants.SOFA_RPC_RESULT_EMPTY;\n            }\n\n            GenericObject genericObject = (GenericObject) ret;\n            exchange.getAttributes().put(Constants.SOFA_RPC_RESULT, genericObject.getFields());\n            exchange.getAttributes().put(Constants.CLIENT_RESPONSE_RESULT_TYPE, ResultEnum.SUCCESS.getName());\n            return ret;\n        })).onErrorMap(SoulException::new);\n    }"
        },
        "test_db": {
            "rel_path": "soul-plugin/soul-plugin-sofa/src/test/java/org/dromara/soul/plugin/sofa/proxy/SofaProxyServiceTest.java",
            "method_src": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$invoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }",
            "method_tgt": "@Test\n    public void test() throws NoSuchFieldException, IllegalAccessException {\n        ConsumerConfig consumerConfig = mock(ConsumerConfig.class);\n        GenericService genericService = mock(GenericService.class);\n        when(consumerConfig.refer()).thenReturn(genericService);\n        when(consumerConfig.getInterfaceId()).thenReturn(PATH);\n        when(genericService.$genericInvoke(METHOD_NAME, LEFT, RIGHT)).thenReturn(null);\n        ApplicationConfigCache applicationConfigCache = ApplicationConfigCache.getInstance();\n        Field field = ApplicationConfigCache.class.getDeclaredField(\"cache\");\n        field.setAccessible(true);\n        ((LoadingCache) field.get(applicationConfigCache)).put(PATH, consumerConfig);\n        SofaProxyService sofaProxyService = new SofaProxyService(new SofaParamResolveServiceImpl());\n        sofaProxyService.genericInvoker(\"\", metaData, exchange);\n        RpcInvokeContext.getContext().getResponseCallback().onAppResponse(\"success\", null, null);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 147,
        "repo_name": "apache/shenyu",
        "commit_id": "a5a6831f04e7bfc6d0f799103e3be4caf5f2683d",
        "focal_db": {
            "rel_path": "soul-admin/src/main/java/org/dromara/soul/admin/page/PageResultUtils.java",
            "method_src": "public static <T> CommonPager<T> result(final PageParameter pageParameter, final Integer count, final Supplier<List<T>> supplier) {\n        if (count != null && count > 0) {\n            return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), count), supplier.get());\n        }\n        return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), 0), Collections.emptyList());\n\n    }",
            "method_tgt": "public static <T> CommonPager<T> result(final PageParameter pageParameter, final Supplier<Integer> countSupplier,\n                                            final Supplier<List<T>> listSupplier) {\n        Integer count = countSupplier.get();\n        if (count != null && count > 0) {\n            return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), count),\n                    listSupplier.get());\n        }\n        return new CommonPager<>(new PageParameter(pageParameter.getCurrentPage(), pageParameter.getPageSize(), 0),\n                Collections.emptyList());\n\n    }"
        },
        "test_db": {
            "rel_path": "soul-admin/src/test/java/org/dromara/soul/admin/page/PageResultUtilsTest.java",
            "method_src": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }",
            "method_tgt": "@Test\n    public void testEmptyResult() {\n        final PageParameter pageParameter = new PageParameter(1, 10, 0);\n        final CommonPager<String> result = PageResultUtils.result(pageParameter, () -> 0, ArrayList::new);\n        Assert.assertEquals(result.getDataList().size(), 0);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 148,
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_id": "b2a7f435c824ad5a36ad46420c7cd92ccf5d4240",
        "focal_db": {
            "rel_path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java",
            "method_src": "@Override\n    public String toEnumVarName(String value, String datatype) {\n        if (enumNameMapping.containsKey(value)) {\n            return enumNameMapping.get(value);\n        }\n\n        if (value.length() == 0) {\n            return \"EMPTY\";\n        }\n\n        // for symbol, e.g. $, #\n        if (getSymbolName(value) != null) {\n            return getSymbolName(value).toUpperCase(Locale.ROOT);\n        }\n\n        if (\" \".equals(value)) {\n            return \"SPACE\";\n        }\n\n        // number\n        if (\"Integer\".equals(datatype) || \"Long\".equals(datatype) ||\n                \"Float\".equals(datatype) || \"Double\".equals(datatype) || \"BigDecimal\".equals(datatype)) {\n            String varName = \"NUMBER_\" + value;\n            varName = varName.replaceAll(\"-\", \"MINUS_\");\n            varName = varName.replaceAll(\"\\\\+\", \"PLUS_\");\n            varName = varName.replaceAll(\"\\\\.\", \"_DOT_\");\n            return varName;\n        }\n\n        // string\n        String var = value.replaceAll(\"\\\\W+\", \"_\").toUpperCase(Locale.ROOT);\n        if (var.matches(\"\\\\d.*\")) {\n            return \"_\" + var;\n        } else {\n            return var;\n        }\n    }",
            "method_tgt": "@Override\n    public String toEnumVarName(String value, String datatype) {\n        if (enumNameMapping.containsKey(value)) {\n            return enumNameMapping.get(value);\n        }\n\n        if (value.length() == 0) {\n            return \"EMPTY\";\n        }\n\n        // for symbol, e.g. $, #\n        if (getSymbolName(value) != null) {\n            return getSymbolName(value).toUpperCase(Locale.ROOT);\n        }\n\n        if (\" \".equals(value)) {\n            return \"SPACE\";\n        }\n\n        // number\n        if (\"Integer\".equals(datatype) || \"Long\".equals(datatype) ||\n                \"Float\".equals(datatype) || \"Double\".equals(datatype) || \"BigDecimal\".equals(datatype)) {\n            String varName = \"NUMBER_\" + value;\n            varName = varName.replaceAll(\"-\", \"MINUS_\");\n            varName = varName.replaceAll(\"\\\\+\", \"PLUS_\");\n            varName = varName.replaceAll(\"\\\\.\", \"_DOT_\");\n            return varName;\n        }\n\n        // string\n        String var = value.replaceAll(\"\\\\W+\", \"_\").toUpperCase(Locale.ROOT);\n        if (var.matches(\"\\\\d.*\")) {\n            var = \"_\" + var;\n        }\n        return this.toVarName(var);\n    }"
        },
        "test_db": {
            "rel_path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java",
            "method_src": "@Test\n    public void toEnumVarNameShouldNotResultInSingleUnderscore() throws Exception {\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\" \", \"String\"), \"SPACE\");\n    }",
            "method_tgt": "@Test\n    public void toEnumVarNameShouldNotResultInSingleUnderscore() throws Exception {\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\" \", \"String\"), \"SPACE\");\n        Assert.assertEquals(fakeJavaCodegen.toEnumVarName(\"==\", \"String\"), \"u\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 149,
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_id": "560089e4c71e5cd180fe5b62ffc8c52178fabf75",
        "focal_db": {
            "rel_path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java",
            "method_src": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"kotlin.Int\".equals(datatype) || \"kotlin.Long\".equals(datatype)) {\n            return value;\n        } else if (\"kotlin.Double\".equals(datatype)) {\n            if (value.contains(\".\")) {\n                return value;\n            } else {\n                return value + \".0\"; // Float and double must have .0\n            }\n        } else if (\"kotlin.Float\".equals(datatype)) {\n            return value + \"f\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }",
            "method_tgt": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"kotlin.Int\".equals(datatype) || \"kotlin.Long\".equals(datatype)) {\n            return value;\n        } else if (\"kotlin.Double\".equals(datatype)) {\n            if (value.contains(\".\")) {\n                return value;\n            } else {\n                return value + \".0\"; // Float and double must have .0\n            }\n        } else if (\"kotlin.Float\".equals(datatype)) {\n            return value + \"f\";\n        } else {\n            return \"\\\"\" + value + \"\\\"\";\n        }\n    }"
        },
        "test_db": {
            "rel_path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/AbstractKotlinCodegenTest.java",
            "method_src": "@Test\n    public void toEnumValue() {\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Int\"), \"1\");\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Double\"), \"1.0\");\n        assertEquals(codegen.toEnumValue(\"1.3\", \"kotlin.Double\"), \"1.3\");\n        assertEquals(codegen.toEnumValue(\"1337\", \"kotlin.Long\"), \"1337\");\n        assertEquals(codegen.toEnumValue(\"5\", \"kotlin.Float\"), \"5f\");\n        assertEquals(codegen.toEnumValue(\"1.0\", \"kotlin.Float\"), \"1.0f\");\n        assertEquals(codegen.toEnumValue(\"data\", \"Something\"), \"\\\"data\\\"\");\n    }",
            "method_tgt": "@Test\n    public void toEnumValue() {\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Int\"), \"1\");\n        assertEquals(codegen.toEnumValue(\"1\", \"kotlin.Double\"), \"1.0\");\n        assertEquals(codegen.toEnumValue(\"1.3\", \"kotlin.Double\"), \"1.3\");\n        assertEquals(codegen.toEnumValue(\"1337\", \"kotlin.Long\"), \"1337\");\n        assertEquals(codegen.toEnumValue(\"5\", \"kotlin.Float\"), \"5f\");\n        assertEquals(codegen.toEnumValue(\"1.0\", \"kotlin.Float\"), \"1.0f\");\n        assertEquals(codegen.toEnumValue(\"data\", \"Something\"), \"\\\"data\\\"\");\n        assertEquals(codegen.toEnumValue(\"data/*\", \"Something\"), \"\\\"data/*\\\"\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 150,
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_id": "ba8546189a68c1efb49e7a90d7584af5d1a8932a",
        "focal_db": {
            "rel_path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractJavaCodegen.java",
            "method_src": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"Integer\".equals(datatype) || \"Double\".equals(datatype)) {\n            return value;\n        } else if (\"Long\".equals(datatype)) {\n            // add l to number, e.g. 2048 => 2048l\n            return value + \"l\";\n        } else if (\"Float\".equals(datatype)) {\n            // add f to number, e.g. 3.14 => 3.14f\n            return value + \"f\";\n        } else if (\"BigDecimal\".equals(datatype)) {\n            // use BigDecimal String constructor\n            return \"new BigDecimal(\\\"\" + value + \"\\\")\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }",
            "method_tgt": "@Override\n    public String toEnumValue(String value, String datatype) {\n        if (\"Integer\".equals(datatype) || \"Double\".equals(datatype)) {\n            return value;\n        } else if (\"Long\".equals(datatype)) {\n            // add l to number, e.g. 2048 => 2048l\n            return value + \"l\";\n        } else if (\"Float\".equals(datatype)) {\n            // add f to number, e.g. 3.14 => 3.14f\n            return value + \"f\";\n        } else if (\"BigDecimal\".equals(datatype)) {\n            // use BigDecimal String constructor\n            return \"new BigDecimal(\\\"\" + value + \"\\\")\";\n        } else if (\"URI\".equals(datatype)) {\n            return \"URI.create(\\\"\" + escapeText(value) + \"\\\")\";\n        } else {\n            return \"\\\"\" + escapeText(value) + \"\\\"\";\n        }\n    }"
        },
        "test_db": {
            "rel_path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/java/AbstractJavaCodegenTest.java",
            "method_src": "@Test\n    public void toEnumValue() {\n        final AbstractJavaCodegen codegen = new P_AbstractJavaCodegen();\n        Assert.assertEquals(codegen.toEnumValue(\"1\", \"Integer\"), \"1\");\n        Assert.assertEquals(codegen.toEnumValue(\"42\", \"Double\"), \"42\");\n        Assert.assertEquals(codegen.toEnumValue(\"1337\", \"Long\"), \"1337l\");\n        Assert.assertEquals(codegen.toEnumValue(\"3.14\", \"Float\"), \"3.14f\");\n    }",
            "method_tgt": "@Test\n    public void toEnumValue() {\n        final AbstractJavaCodegen codegen = new P_AbstractJavaCodegen();\n        Assert.assertEquals(codegen.toEnumValue(\"1\", \"Integer\"), \"1\");\n        Assert.assertEquals(codegen.toEnumValue(\"42\", \"Double\"), \"42\");\n        Assert.assertEquals(codegen.toEnumValue(\"1337\", \"Long\"), \"1337l\");\n        Assert.assertEquals(codegen.toEnumValue(\"3.14\", \"Float\"), \"3.14f\");\n        Assert.assertEquals(codegen.toEnumValue(\"schema.json\", \"URI\"), \"URI.create(\\\"schema.json\\\")\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 151,
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_id": "097385bde618461659dde5840351c00279897e11",
        "focal_db": {
            "rel_path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractKotlinCodegen.java",
            "method_src": "@Override\n    public String toModelName(final String name) {\n        // memoization\n        if (schemaKeyToModelNameCache.containsKey(name)) {\n            return schemaKeyToModelNameCache.get(name);\n        }\n\n        // Allow for explicitly configured kotlin.* and java.* types\n        if (name.startsWith(\"kotlin.\") || name.startsWith(\"java.\")) {\n            return name;\n        }\n\n        // If schemaMapping contains name, assume this is a legitimate model name.\n        if (schemaMapping.containsKey(name)) {\n            return schemaMapping.get(name);\n        }\n\n        // TODO review importMapping below as we've added schema mapping support\n        // If importMapping contains name, assume this is a legitimate model name.\n        if (importMapping.containsKey(name)) {\n            return importMapping.get(name);\n        }\n\n        String modifiedName = name.replaceAll(\"\\\\.\", \"\");\n\n        String nameWithPrefixSuffix = sanitizeKotlinSpecificNames(modifiedName);\n        if (!StringUtils.isEmpty(modelNamePrefix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = modelNamePrefix + \"_\" + nameWithPrefixSuffix;\n        }\n\n        if (!StringUtils.isEmpty(modelNameSuffix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = nameWithPrefixSuffix + \"_\" + modelNameSuffix;\n        }\n\n        // Camelize name of nested properties\n        modifiedName = camelize(nameWithPrefixSuffix);\n\n        // model name cannot use reserved keyword, e.g. return\n        if (isReservedWord(modifiedName)) {\n            final String modelName = \"Model\" + modifiedName;\n            LOGGER.warn(\"{} (reserved word) cannot be used as model name. Renamed to {}\", modifiedName, modelName);\n            return modelName;\n        }\n\n        // model name starts with number\n        if (modifiedName.matches(\"^\\\\d.*\")) {\n            final String modelName = \"Model\" + modifiedName; // e.g. 200Response => Model200Response (after camelize)\n            LOGGER.warn(\"{} (model name starts with number) cannot be used as model name. Renamed to {}\", name,\n                    modelName);\n            return modelName;\n        }\n\n        schemaKeyToModelNameCache.put(name, titleCase(modifiedName));\n        return schemaKeyToModelNameCache.get(name);\n    }",
            "method_tgt": "@Override\n    public String toModelName(final String name) {\n        // memoization\n        if (schemaKeyToModelNameCache.containsKey(name)) {\n            return schemaKeyToModelNameCache.get(name);\n        }\n\n        // Allow for explicitly configured kotlin.* and java.* types\n        if (name.startsWith(\"kotlin.\") || name.startsWith(\"java.\")) {\n            return name;\n        }\n\n        // If schemaMapping contains name, assume this is a legitimate model name.\n        if (schemaMapping.containsKey(name)) {\n            return schemaMapping.get(name);\n        }\n\n        // TODO review importMapping below as we've added schema mapping support\n        // If importMapping contains name, assume this is a legitimate model name.\n        if (importMapping.containsKey(name)) {\n            return importMapping.get(name);\n        }\n\n        String modifiedName = name.replaceAll(\"\\\\.\", \"\").replaceAll(\"-\", \"_\");\n\n        String nameWithPrefixSuffix = sanitizeKotlinSpecificNames(modifiedName);\n        if (!StringUtils.isEmpty(modelNamePrefix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = modelNamePrefix + \"_\" + nameWithPrefixSuffix;\n        }\n\n        if (!StringUtils.isEmpty(modelNameSuffix)) {\n            // add '_' so that model name can be camelized correctly\n            nameWithPrefixSuffix = nameWithPrefixSuffix + \"_\" + modelNameSuffix;\n        }\n\n        // Camelize name of nested properties\n        modifiedName = camelize(nameWithPrefixSuffix);\n\n        // model name cannot use reserved keyword, e.g. return\n        if (isReservedWord(modifiedName)) {\n            final String modelName = \"Model\" + modifiedName;\n            LOGGER.warn(\"{} (reserved word) cannot be used as model name. Renamed to {}\", modifiedName, modelName);\n            return modelName;\n        }\n\n        // model name starts with number\n        if (modifiedName.matches(\"^\\\\d.*\")) {\n            final String modelName = \"Model\" + modifiedName; // e.g. 200Response => Model200Response (after camelize)\n            LOGGER.warn(\"{} (model name starts with number) cannot be used as model name. Renamed to {}\", name,\n                    modelName);\n            return modelName;\n        }\n\n        schemaKeyToModelNameCache.put(name, titleCase(modifiedName));\n        return schemaKeyToModelNameCache.get(name);\n    }"
        },
        "test_db": {
            "rel_path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/kotlin/AbstractKotlinCodegenTest.java",
            "method_src": "@Test\n    public void convertModelName() {\n        assertEquals(codegen.toModelName(\"$\"), \"Dollar\");\n        assertEquals(codegen.toModelName(\"$$\"), \"DollarDollar\");\n        assertEquals(codegen.toModelName(\"Pony?\"), \"PonyQuestionMark\");\n        assertEquals(codegen.toModelName(\"$name\"), \"DollarName\");\n        assertEquals(codegen.toModelName(\"nam#e\"), \"NamHashE\");\n        assertEquals(codegen.toModelName(\"$another-fake?\"), \"DollarAnotherMinusFakeQuestionMark\");\n        assertEquals(codegen.toModelName(\"Pony>=>=\"), \"PonyGreaterThanEqualGreaterThanEqual\");\n    }",
            "method_tgt": "@Test\n    public void convertModelName() {\n        assertEquals(codegen.toModelName(\"$\"), \"Dollar\");\n        assertEquals(codegen.toModelName(\"$$\"), \"DollarDollar\");\n        assertEquals(codegen.toModelName(\"Pony?\"), \"PonyQuestionMark\");\n        assertEquals(codegen.toModelName(\"$name\"), \"DollarName\");\n        assertEquals(codegen.toModelName(\"nam#e\"), \"NamHashE\");\n        assertEquals(codegen.toModelName(\"$another-fake?\"), \"DollarAnotherFakeQuestionMark\");\n        assertEquals(codegen.toModelName(\"Pony>=>=\"), \"PonyGreaterThanEqualGreaterThanEqual\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 152,
        "repo_name": "OpenAPITools/openapi-generator",
        "commit_id": "cdac1366d4b34f323373020f7443bb7e1cb2af50",
        "focal_db": {
            "rel_path": "modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/AbstractRustCodegen.java",
            "method_src": "@Override\n    public String toEnumName(CodegenProperty property) {\n        // Note: Strangely this function is only used for inline enums, schema enums go through the toModelName function\n        String name = property.name;\n        if (!Strings.isNullOrEmpty(enumSuffix)) {\n            name = name + \"_\" + enumSuffix;\n        }\n        return sanitizeIdentifier(name, CasingType.CAMEL_CASE, \"enum\", \"enum\", false);\n    }",
            "method_tgt": "@Override\n    public String toEnumName(CodegenProperty property) {\n        // Note: Strangely this function is only used for inline enums, schema enums go through the toModelName function\n        String name = property.baseName;\n        if (!Strings.isNullOrEmpty(enumSuffix)) {\n            name = name + \"_\" + enumSuffix;\n        }\n        return sanitizeIdentifier(name, CasingType.CAMEL_CASE, \"enum\", \"enum\", false);\n    }"
        },
        "test_db": {
            "rel_path": "modules/openapi-generator/src/test/java/org/openapitools/codegen/rust/AbstractRustCodegenTest.java",
            "method_src": "@Test\n    public void testToEnumName() {\n        Function<String, String> toEnumName = (String name) -> {\n            CodegenProperty property = new CodegenProperty();\n            property.name = name;\n            return codegen.toEnumName(property);\n        };\n        // Should be converted to camel case\n        Assert.assertEquals(toEnumName.apply(\"pet_status\"), \"PetStatusWithSuffix\");\n        // Prefix is added when starting with a number\n        Assert.assertEquals(toEnumName.apply(\"1_pet_status\"), \"Enum1PetStatusWithSuffix\");\n    }",
            "method_tgt": "@Test\n    public void testToEnumName() {\n        Function<String, String> toEnumName = (String name) -> {\n            CodegenProperty property = new CodegenProperty();\n            property.baseName = name;\n            return codegen.toEnumName(property);\n        };\n        // Should be converted to camel case\n        Assert.assertEquals(toEnumName.apply(\"pet_status\"), \"PetStatusWithSuffix\");\n        // Prefix is added when starting with a number\n        Assert.assertEquals(toEnumName.apply(\"1_pet_status\"), \"Enum1PetStatusWithSuffix\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 153,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "9505a8fafcf8d3ff673ac08d084bc889641f96d9",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/SkippedAuctionService.java",
            "method_src": "public Future<AuctionContext> skipAuction(AuctionContext auctionContext) {\n        if (auctionContext.isRequestRejected()) {\n            return Future.succeededFuture(auctionContext.with(\n                    BidResponse.builder().seatbid(Collections.emptyList()).build()));\n        }\n\n        final ExtStoredAuctionResponse storedResponse = Optional.ofNullable(auctionContext.getBidRequest())\n                .map(BidRequest::getExt)\n                .map(ExtRequest::getPrebid)\n                .map(ExtRequestPrebid::getStoredAuctionResponse)\n                .orElse(null);\n\n        if (storedResponse == null) {\n            return Future.failedFuture(new InvalidRequestException(\n                    \"the auction can not be skipped, ext.prebid.storedauctionresponse is absent\"));\n        }\n\n        final List<SeatBid> seatBids = storedResponse.getSeatBids();\n        if (seatBids != null) {\n            return validateStoredSeatBid(seatBids)\n                    .recover(throwable -> {\n                        auctionContext.getDebugWarnings().add(throwable.getMessage());\n                        return Future.succeededFuture(Collections.emptyList());\n                    })\n                    .compose(storedSeatBids -> enrichAuctionContextWithBidResponse(auctionContext, storedSeatBids))\n                    .map(AuctionContext::skipAuction);\n        }\n\n        if (storedResponse.getId() != null) {\n            final Timeout timeout = auctionContext.getTimeoutContext().getTimeout();\n            return storedResponseProcessor.getStoredResponseResult(storedResponse.getId(), timeout)\n                    .map(StoredResponseResult::getAuctionStoredResponse)\n                    .recover(throwable -> {\n                        auctionContext.getDebugWarnings().add(throwable.getMessage());\n                        return Future.succeededFuture(Collections.emptyList());\n                    })\n                    .compose(storedSeatBids -> enrichAuctionContextWithBidResponse(auctionContext, storedSeatBids))\n                    .map(AuctionContext::skipAuction);\n        }\n\n        return Future.failedFuture(new InvalidRequestException(\n                \"the auction can not be skipped, ext.prebid.storedauctionresponse can not be resolved properly\"));\n\n    }",
            "method_tgt": "public Future<AuctionContext> skipAuction(AuctionContext auctionContext) {\n        if (auctionContext.isRequestRejected()) {\n            return Future.failedFuture(\"Rejected request cannot be skipped\");\n        }\n\n        final ExtStoredAuctionResponse storedResponse = Optional.ofNullable(auctionContext.getBidRequest())\n                .map(BidRequest::getExt)\n                .map(ExtRequest::getPrebid)\n                .map(ExtRequestPrebid::getStoredAuctionResponse)\n                .orElse(null);\n\n        if (storedResponse == null) {\n            return Future.failedFuture(new InvalidRequestException(\n                    \"the auction can not be skipped, ext.prebid.storedauctionresponse is absent\"));\n        }\n\n        final List<SeatBid> seatBids = storedResponse.getSeatBids();\n        if (seatBids != null) {\n            return validateStoredSeatBid(seatBids)\n                    .recover(throwable -> {\n                        auctionContext.getDebugWarnings().add(throwable.getMessage());\n                        return Future.succeededFuture(Collections.emptyList());\n                    })\n                    .compose(storedSeatBids -> enrichAuctionContextWithBidResponse(auctionContext, storedSeatBids))\n                    .map(AuctionContext::skipAuction);\n        }\n\n        if (storedResponse.getId() != null) {\n            final Timeout timeout = auctionContext.getTimeoutContext().getTimeout();\n            return storedResponseProcessor.getStoredResponseResult(storedResponse.getId(), timeout)\n                    .map(StoredResponseResult::getAuctionStoredResponse)\n                    .recover(throwable -> {\n                        auctionContext.getDebugWarnings().add(throwable.getMessage());\n                        return Future.succeededFuture(Collections.emptyList());\n                    })\n                    .compose(storedSeatBids -> enrichAuctionContextWithBidResponse(auctionContext, storedSeatBids))\n                    .map(AuctionContext::skipAuction);\n        }\n\n        return Future.failedFuture(new InvalidRequestException(\n                \"the auction can not be skipped, ext.prebid.storedauctionresponse can not be resolved properly\"));\n\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/SkippedAuctionServiceTest.java",
            "method_src": "@Test\n    public void skipAuctionShouldReturnFailedFutureWhenRequestIsRejected() {\n        // given\n        final AuctionContext givenAuctionContext = AuctionContext.builder()\n                .requestRejected(true)\n                .build();\n\n        // when\n        final Future<AuctionContext> result = target.skipAuction(givenAuctionContext);\n\n        // then\n        assertThat(result.succeeded()).isTrue();\n        final BidResponse expectedBidResponse = BidResponse.builder().seatbid(emptyList()).build();\n        assertThat(result.result()).isEqualTo(givenAuctionContext.with(expectedBidResponse));\n\n        verifyNoInteractions(storedResponseProcessor, bidResponseCreator);\n    }",
            "method_tgt": "@Test\n    public void skipAuctionShouldReturnFailedFutureWhenRequestIsRejected() {\n        // given\n        final AuctionContext givenAuctionContext = AuctionContext.builder()\n                .requestRejected(true)\n                .build();\n\n        // when\n        final Future<AuctionContext> result = target.skipAuction(givenAuctionContext);\n\n        // then\n        assertThat(result.failed()).isTrue();\n        assertThat(result.cause()).hasMessage(\"Rejected request cannot be skipped\");\n        verifyNoInteractions(storedResponseProcessor, bidResponseCreator);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 154,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "c2026393099a862493ebfb376ce155562a58c6e2",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/privacy/enforcement/CoppaEnforcement.java",
            "method_src": "public Future<List<BidderPrivacyResult>> enforce(AuctionContext auctionContext, Map<String, User> bidderToUser) {\n        metrics.updatePrivacyCoppaMetric();\n        return Future.succeededFuture(results(bidderToUser, auctionContext.getBidRequest().getDevice()));\n    }",
            "method_tgt": "public Future<List<BidderPrivacyResult>> enforce(AuctionContext auctionContext, Map<String, User> bidderToUser) {\n        metrics.updatePrivacyCoppaMetric(auctionContext.getActivityInfrastructure(), bidderToUser.keySet());\n        return Future.succeededFuture(results(bidderToUser, auctionContext.getBidRequest().getDevice()));\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/privacy/enforcement/CoppaEnforcementTest.java",
            "method_src": "@Test\n    public void enforceShouldReturnExpectedResultAndEmitMetrics() {\n        // given\n        final User maskedUser = User.builder().id(\"maskedUser\").build();\n        final Device maskedDevice = Device.builder().ip(\"maskedDevice\").build();\n\n        given(userFpdCoppaMask.maskUser(any())).willReturn(maskedUser);\n        given(userFpdCoppaMask.maskDevice(any())).willReturn(maskedDevice);\n\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .bidRequest(BidRequest.builder().device(Device.builder().ip(\"originalDevice\").build()).build())\n                .build();\n        final Map<String, User> bidderToUser = Map.of(\"bidder\", User.builder().id(\"originalUser\").build());\n\n        // when\n        final List<BidderPrivacyResult> result = target.enforce(auctionContext, bidderToUser).result();\n\n        // then\n        assertThat(result).allSatisfy(privacyResult -> {\n            assertThat(privacyResult.getUser()).isSameAs(maskedUser);\n            assertThat(privacyResult.getDevice()).isSameAs(maskedDevice);\n        });\n        verify(metrics).updatePrivacyCoppaMetric();\n    }",
            "method_tgt": "@Test\n    public void enforceShouldReturnExpectedResultAndEmitMetrics() {\n        // given\n        final User maskedUser = User.builder().id(\"maskedUser\").build();\n        final Device maskedDevice = Device.builder().ip(\"maskedDevice\").build();\n\n        given(userFpdCoppaMask.maskUser(any())).willReturn(maskedUser);\n        given(userFpdCoppaMask.maskDevice(any())).willReturn(maskedDevice);\n\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .activityInfrastructure(activityInfrastructure)\n                .bidRequest(BidRequest.builder().device(Device.builder().ip(\"originalDevice\").build()).build())\n                .build();\n        final Map<String, User> bidderToUser = Map.of(\"bidder\", User.builder().id(\"originalUser\").build());\n\n        // when\n        final List<BidderPrivacyResult> result = target.enforce(auctionContext, bidderToUser).result();\n\n        // then\n        assertThat(result).allSatisfy(privacyResult -> {\n            assertThat(privacyResult.getUser()).isSameAs(maskedUser);\n            assertThat(privacyResult.getDevice()).isSameAs(maskedDevice);\n        });\n        verify(metrics).updatePrivacyCoppaMetric(activityInfrastructure, Set.of(\"bidder\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 155,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "edd4dd17c170d14b57835bd86b8215e25e391bda",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidder.java",
            "method_src": "@Override\n    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n        final List<BidderError> errors = new ArrayList<>();\n\n        if (CollectionUtils.isEmpty(request.getImp())) {\n            return Result.withError(BidderError.badInput(\"No valid impressions in the bid request\"));\n        }\n\n        String partnerId = null;\n        try {\n            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().get(0));\n            final String adUnitId = extImpUcfunnel.getAdunitid();\n            partnerId = extImpUcfunnel.getPartnerid();\n            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n                return Result.withErrors(errors);\n            }\n        } catch (PreBidException e) {\n            errors.add(BidderError.badInput(e.getMessage()));\n        }\n\n        final String requestUrl = \"%s/%s/request\".formatted(endpointUrl, HttpUtil.encodeUrl(partnerId));\n\n        return Result.of(Collections.singletonList(BidderUtil.defaultRequest(request, requestUrl, mapper)),\n                errors);\n    }",
            "method_tgt": "@Override\n    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest request) {\n        final List<BidderError> errors = new ArrayList<>();\n\n        if (CollectionUtils.isEmpty(request.getImp())) {\n            return Result.withError(BidderError.badInput(\"No valid impressions in the bid request\"));\n        }\n\n        String partnerId = null;\n        try {\n            final ExtImpUcfunnel extImpUcfunnel = parseImpExt(request.getImp().getFirst());\n            final String adUnitId = extImpUcfunnel.getAdunitid();\n            partnerId = extImpUcfunnel.getPartnerid();\n            if (StringUtils.isEmpty(partnerId) || StringUtils.isEmpty(adUnitId)) {\n                errors.add(BidderError.badInput(\"No PartnerId or AdUnitId in the bid request\"));\n                return Result.withErrors(errors);\n            }\n        } catch (PreBidException e) {\n            errors.add(BidderError.badInput(e.getMessage()));\n        }\n\n        final String requestUrl = \"%s/%s/request\".formatted(endpointUrl, HttpUtil.encodeUrl(partnerId));\n\n        return Result.of(Collections.singletonList(BidderUtil.defaultRequest(request, requestUrl, mapper)),\n                errors);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/bidder/ucfunnel/UcfunnelBidderTest.java",
            "method_src": "@Test\n    public void makeHttpRequestsShouldCreateCorrectURL() {\n        // given\n        final BidRequest bidRequest = BidRequest.builder()\n                .imp(singletonList(Imp.builder()\n                        .id(\"123\")\n                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n                                ExtImpUcfunnel.of(\"adUnitId\", \"partnerId\")))).build()))\n                .build();\n\n        // when\n        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);\n\n        // then\n        assertThat(result.getErrors()).isEmpty();\n        assertThat(result.getValue()).hasSize(1);\n        assertThat(result.getValue().get(0).getUri()).isEqualTo(\"https://test.endpoint.com/partnerId/request\");\n    }",
            "method_tgt": "@Test\n    public void makeHttpRequestsShouldCreateCorrectURL() {\n        // given\n        final BidRequest bidRequest = BidRequest.builder()\n                .imp(singletonList(Imp.builder()\n                        .id(\"123\")\n                        .ext(mapper.valueToTree(ExtPrebid.of(null,\n                                ExtImpUcfunnel.of(\"adUnitId\", \"partnerId\")))).build()))\n                .build();\n\n        // when\n        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);\n\n        // then\n        assertThat(result.getErrors()).isEmpty();\n        assertThat(result.getValue()).hasSize(1);\n        assertThat(result.getValue().getFirst().getUri()).isEqualTo(\"https://test.endpoint.com/partnerId/request\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 156,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "edd4dd17c170d14b57835bd86b8215e25e391bda",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/bidder/adpone/AdponeBidder.java",
            "method_src": "@Override\n    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n        try {\n            mapper.mapper().convertValue(bidRequest.getImp().get(0).getExt().get(\"bidder\"), ExtImpAdpone.class);\n        } catch (IllegalArgumentException e) {\n            return Result.withError(BidderError.badInput(e.getMessage()));\n        }\n\n        return Result.of(Collections.singletonList(\n                        HttpRequest.<BidRequest>builder()\n                                .method(HttpMethod.POST)\n                                .uri(endpointUrl)\n                                .headers(HttpUtil.headers()\n                                        .add(HttpUtil.X_OPENRTB_VERSION_HEADER, OPENRTB_VERSION))\n                                .body(mapper.encodeToBytes(bidRequest))\n                                .payload(bidRequest)\n                                .build()),\n                Collections.emptyList());\n    }",
            "method_tgt": "@Override\n    public Result<List<HttpRequest<BidRequest>>> makeHttpRequests(BidRequest bidRequest) {\n        try {\n            mapper.mapper().convertValue(bidRequest.getImp().getFirst().getExt().get(\"bidder\"), ExtImpAdpone.class);\n        } catch (IllegalArgumentException e) {\n            return Result.withError(BidderError.badInput(e.getMessage()));\n        }\n\n        return Result.of(Collections.singletonList(\n                        HttpRequest.<BidRequest>builder()\n                                .method(HttpMethod.POST)\n                                .uri(endpointUrl)\n                                .headers(HttpUtil.headers()\n                                        .add(HttpUtil.X_OPENRTB_VERSION_HEADER, OPENRTB_VERSION))\n                                .body(mapper.encodeToBytes(bidRequest))\n                                .payload(bidRequest)\n                                .build()),\n                Collections.emptyList());\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/bidder/adpone/AdponeBidderTest.java",
            "method_src": "@Test\n    public void makeHttpRequestsShouldReturnErrorIfFirstImpExtCannotBeParsed() {\n        // given\n        final BidRequest bidRequest = givenBidRequest(mapper.createArrayNode());\n\n        // when\n        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);\n\n        // then\n        assertThat(result.getValue()).isEmpty();\n\n        final List<BidderError> errors = result.getErrors();\n        assertThat(errors).hasSize(1);\n        assertThat(errors.get(0).getMessage()).startsWith(\"Cannot deserialize value\");\n    }",
            "method_tgt": "@Test\n    public void makeHttpRequestsShouldReturnErrorIfFirstImpExtCannotBeParsed() {\n        // given\n        final BidRequest bidRequest = givenBidRequest(mapper.createArrayNode());\n\n        // when\n        final Result<List<HttpRequest<BidRequest>>> result = target.makeHttpRequests(bidRequest);\n\n        // then\n        assertThat(result.getValue()).isEmpty();\n\n        final List<BidderError> errors = result.getErrors();\n        assertThat(errors).hasSize(1);\n        assertThat(errors.getFirst().getMessage()).startsWith(\"Cannot deserialize value\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 157,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "8652ffffb533dd956d3b69d92dd1805821b8566a",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/privacy/enforcement/mask/UserFpdActivityMask.java",
            "method_src": "public User maskUser(User user,\n                         boolean disallowTransmitUfpd,\n                         boolean disallowTransmitEids,\n                         boolean disallowTransmitGeo) {\n\n        return userFpdTcfMask.maskUser(\n                user,\n                disallowTransmitUfpd,\n                disallowTransmitEids,\n                disallowTransmitGeo,\n                Collections.emptySet());\n    }",
            "method_tgt": "public User maskUser(User user, boolean disallowTransmitUfpd, boolean disallowTransmitEids) {\n        return userFpdTcfMask.maskUser(\n                user,\n                disallowTransmitUfpd,\n                disallowTransmitEids,\n                Collections.emptySet());\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/privacy/enforcement/mask/UserFpdActivityMaskTest.java",
            "method_src": "@Test\n    public void maskUserShouldProperlyDelegateEidsParameter() {\n        // given\n        final User user = User.builder().build();\n\n        // when\n        target.maskUser(user, false, true, false);\n\n        // then\n        verify(userFpdTcfMask).maskUser(same(user), eq(false), eq(true), eq(false), eq(emptySet()));\n    }",
            "method_tgt": "@Test\n    public void maskUserShouldProperlyDelegateEidsParameter() {\n        // given\n        final User user = User.builder().build();\n\n        // when\n        target.maskUser(user, false, true);\n\n        // then\n        verify(userFpdTcfMask).maskUser(same(user), eq(false), eq(true), eq(emptySet()));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 158,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "8652ffffb533dd956d3b69d92dd1805821b8566a",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/privacy/enforcement/mask/UserFpdActivityMask.java",
            "method_src": "public User maskUser(User user,\n                         boolean disallowTransmitUfpd,\n                         boolean disallowTransmitEids,\n                         boolean disallowTransmitGeo) {\n\n        return userFpdTcfMask.maskUser(\n                user,\n                disallowTransmitUfpd,\n                disallowTransmitEids,\n                disallowTransmitGeo,\n                Collections.emptySet());\n    }",
            "method_tgt": "public User maskUser(User user, boolean disallowTransmitUfpd, boolean disallowTransmitEids) {\n        return userFpdTcfMask.maskUser(\n                user,\n                disallowTransmitUfpd,\n                disallowTransmitEids,\n                Collections.emptySet());\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/privacy/enforcement/mask/UserFpdActivityMaskTest.java",
            "method_src": "@Test\n    public void maskUserShouldProperlyDelegateUfpdParameter() {\n        // given\n        final User user = User.builder().build();\n\n        // when\n        target.maskUser(user, true, false, false);\n\n        // then\n        verify(userFpdTcfMask).maskUser(same(user), eq(true), eq(false), eq(false), eq(emptySet()));\n    }",
            "method_tgt": "@Test\n    public void maskUserShouldProperlyDelegateUfpdParameter() {\n        // given\n        final User user = User.builder().build();\n\n        // when\n        target.maskUser(user, true, false);\n\n        // then\n        verify(userFpdTcfMask).maskUser(same(user), eq(true), eq(false), eq(emptySet()));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 159,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "6aabd8b65a87006b2516e0ce4918b14d82b11ccf",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/activity/infrastructure/privacy/usnat/reader/USNationalGppReader.java",
            "method_src": "@Override\n    public Integer getMspaOptOutOptionMode() {\n        return ObjectUtil.getIfNotNull(consent, UspNatV1::getMspaOptOutOptionMode);\n    }",
            "method_tgt": "@Override\n    public Integer getMspaOptOutOptionMode() {\n        return ObjectUtil.getIfNotNull(consent, UsNatV1::getMspaOptOutOptionMode);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/activity/infrastructure/privacy/usnat/reader/USNationalGppReaderTest.java",
            "method_src": "@Test\n    public void getMspaOptOutOptionModeShouldReturnExpectedResult() {\n        // given\n        given(uspNatV1.getMspaOptOutOptionMode()).willReturn(1);\n\n        // when and then\n        assertThat(gppReader.getMspaOptOutOptionMode()).isEqualTo(1);\n    }",
            "method_tgt": "@Test\n    public void getMspaOptOutOptionModeShouldReturnExpectedResult() {\n        // given\n        given(usNatV1.getMspaOptOutOptionMode()).willReturn(1);\n\n        // when and then\n        assertThat(gppReader.getMspaOptOutOptionMode()).isEqualTo(1);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 160,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "6aabd8b65a87006b2516e0ce4918b14d82b11ccf",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/activity/infrastructure/privacy/uscustomlogic/reader/USConnecticutGppReader.java",
            "method_src": "@Override\n    public Integer getMspaOptOutOptionMode() {\n        return ObjectUtil.getIfNotNull(consent, UspCtV1::getMspaOptOutOptionMode);\n    }",
            "method_tgt": "@Override\n    public Integer getMspaOptOutOptionMode() {\n        return ObjectUtil.getIfNotNull(consent, UsCtV1::getMspaOptOutOptionMode);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/activity/infrastructure/privacy/uscustomlogic/reader/USConnecticutGppReaderTest.java",
            "method_src": "@Test\n    public void getMspaOptOutOptionModeShouldReturnExpectedResult() {\n        // given\n        given(uspCtV1.getMspaOptOutOptionMode()).willReturn(1);\n\n        // when and then\n        assertThat(gppReader.getMspaOptOutOptionMode()).isEqualTo(1);\n    }",
            "method_tgt": "@Test\n    public void getMspaOptOutOptionModeShouldReturnExpectedResult() {\n        // given\n        given(usCtV1.getMspaOptOutOptionMode()).willReturn(1);\n\n        // when and then\n        assertThat(gppReader.getMspaOptOutOptionMode()).isEqualTo(1);\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 161,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "7cf656a2204e1684baa71fc0bcd2941b5304c3bd",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java",
            "method_src": "public Future<PrivacyContext> contextFromBidRequest(AuctionContext auctionContext) {\n        final BidRequest bidRequest = auctionContext.getBidRequest();\n        final List<String> errors = auctionContext.getPrebidErrors();\n        final Account account = auctionContext.getAccount();\n        final MetricName requestType = auctionContext.getRequestTypeMetric();\n        final Timeout timeout = auctionContext.getTimeout();\n\n        final Privacy privacy = privacyExtractor.validPrivacyFrom(bidRequest, errors);\n\n        final Device device = bidRequest.getDevice();\n        final String alpha2CountryCode = resolveAlpha2CountryCode(device);\n        final String effectiveIpAddress = resolveIpAddress(device, privacy);\n\n        final AccountGdprConfig accountGdpr = accountGdprConfig(account);\n        final String accountId = account.getId();\n        final RequestLogInfo requestLogInfo = requestLogInfo(requestType, bidRequest, accountId);\n\n        return tcfDefinerService.resolveTcfContext(\n                        privacy,\n                        alpha2CountryCode,\n                        effectiveIpAddress,\n                        accountGdpr,\n                        requestType,\n                        requestLogInfo,\n                        timeout)\n                .map(tcfContext -> logWarnings(auctionContext.getDebugWarnings(), tcfContext))\n                .map(tcfContext -> PrivacyContext.of(privacy, tcfContext, tcfContext.getIpAddress()));\n    }",
            "method_tgt": "public Future<PrivacyContext> contextFromBidRequest(AuctionContext auctionContext) {\n        final BidRequest bidRequest = auctionContext.getBidRequest();\n        final List<String> errors = auctionContext.getPrebidErrors();\n        final Account account = auctionContext.getAccount();\n        final MetricName requestType = auctionContext.getRequestTypeMetric();\n        final Timeout timeout = auctionContext.getTimeoutContext().getTimeout();\n\n        final Privacy privacy = privacyExtractor.validPrivacyFrom(bidRequest, errors);\n\n        final Device device = bidRequest.getDevice();\n        final String alpha2CountryCode = resolveAlpha2CountryCode(device);\n        final String effectiveIpAddress = resolveIpAddress(device, privacy);\n\n        final AccountGdprConfig accountGdpr = accountGdprConfig(account);\n        final String accountId = account.getId();\n        final RequestLogInfo requestLogInfo = requestLogInfo(requestType, bidRequest, accountId);\n\n        return tcfDefinerService.resolveTcfContext(\n                        privacy,\n                        alpha2CountryCode,\n                        effectiveIpAddress,\n                        accountGdpr,\n                        requestType,\n                        requestLogInfo,\n                        timeout)\n                .map(tcfContext -> logWarnings(auctionContext.getDebugWarnings(), tcfContext))\n                .map(tcfContext -> PrivacyContext.of(privacy, tcfContext, tcfContext.getIpAddress()));\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/PrivacyEnforcementServiceTest.java",
            "method_src": "@Test\n    public void contextFromBidRequestShouldReturnTcfContext() {\n        // given\n        final String referer = \"Referer\";\n        final BidRequest bidRequest = BidRequest.builder()\n                .regs(Regs.builder().gdpr(1).usPrivacy(\"1YYY\").build())\n                .user(User.builder()\n                        .consent(\"consent\")\n                        .build())\n                .site(Site.builder().ref(referer).build())\n                .build();\n\n        final TcfContext tcfContext = TcfContext.builder()\n                .inGdprScope(true)\n                .consentString(\"consent\")\n                .consent(TCStringEmpty.create())\n                .warnings(emptyList())\n                .build();\n        given(tcfDefinerService.resolveTcfContext(any(), any(), any(), any(), any(), any(), any()))\n                .willReturn(Future.succeededFuture(tcfContext));\n\n        final String accountId = \"account\";\n        final MetricName requestType = MetricName.openrtb2web;\n\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .bidRequest(bidRequest)\n                .account(Account.empty(accountId))\n                .requestTypeMetric(requestType)\n                .prebidErrors(new ArrayList<>())\n                .debugWarnings(new ArrayList<>())\n                .build();\n\n        // when\n        final Future<PrivacyContext> privacyContext = privacyEnforcementService.contextFromBidRequest(auctionContext);\n\n        // then\n        final Privacy privacy = Privacy.builder()\n                .gdpr(\"1\")\n                .consentString(\"consent\")\n                .ccpa(Ccpa.of(\"1YYY\"))\n                .coppa(0)\n                .gpp(EMPTY)\n                .gppSid(emptyList())\n                .build();\n        FutureAssertion.assertThat(privacyContext).succeededWith(PrivacyContext.of(privacy, tcfContext));\n\n        final RequestLogInfo expectedRequestLogInfo = RequestLogInfo.of(requestType, referer, accountId);\n        verify(tcfDefinerService).resolveTcfContext(\n                eq(privacy), isNull(), isNull(), isNull(), same(requestType),\n                eq(expectedRequestLogInfo), isNull());\n    }",
            "method_tgt": "@Test\n    public void contextFromBidRequestShouldReturnTcfContext() {\n        // given\n        final String referer = \"Referer\";\n        final BidRequest bidRequest = BidRequest.builder()\n                .regs(Regs.builder().gdpr(1).usPrivacy(\"1YYY\").build())\n                .user(User.builder()\n                        .consent(\"consent\")\n                        .build())\n                .site(Site.builder().ref(referer).build())\n                .build();\n\n        final TcfContext tcfContext = TcfContext.builder()\n                .inGdprScope(true)\n                .consentString(\"consent\")\n                .consent(TCStringEmpty.create())\n                .warnings(emptyList())\n                .build();\n        given(tcfDefinerService.resolveTcfContext(any(), any(), any(), any(), any(), any(), any()))\n                .willReturn(Future.succeededFuture(tcfContext));\n\n        final String accountId = \"account\";\n        final MetricName requestType = MetricName.openrtb2web;\n\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .bidRequest(bidRequest)\n                .account(Account.empty(accountId))\n                .requestTypeMetric(requestType)\n                .timeoutContext(TimeoutContext.of(0, null, 0))\n                .prebidErrors(new ArrayList<>())\n                .debugWarnings(new ArrayList<>())\n                .build();\n\n        // when\n        final Future<PrivacyContext> privacyContext = privacyEnforcementService.contextFromBidRequest(auctionContext);\n\n        // then\n        final Privacy privacy = Privacy.builder()\n                .gdpr(\"1\")\n                .consentString(\"consent\")\n                .ccpa(Ccpa.of(\"1YYY\"))\n                .coppa(0)\n                .gpp(EMPTY)\n                .gppSid(emptyList())\n                .build();\n        FutureAssertion.assertThat(privacyContext).succeededWith(PrivacyContext.of(privacy, tcfContext));\n\n        final RequestLogInfo expectedRequestLogInfo = RequestLogInfo.of(requestType, referer, accountId);\n        verify(tcfDefinerService).resolveTcfContext(\n                eq(privacy), isNull(), isNull(), isNull(), same(requestType),\n                eq(expectedRequestLogInfo), isNull());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 162,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "7cf656a2204e1684baa71fc0bcd2941b5304c3bd",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java",
            "method_src": "public Future<PrivacyContext> contextFromBidRequest(AuctionContext auctionContext) {\n        final BidRequest bidRequest = auctionContext.getBidRequest();\n        final List<String> errors = auctionContext.getPrebidErrors();\n        final Account account = auctionContext.getAccount();\n        final MetricName requestType = auctionContext.getRequestTypeMetric();\n        final Timeout timeout = auctionContext.getTimeout();\n\n        final Privacy privacy = privacyExtractor.validPrivacyFrom(bidRequest, errors);\n\n        final Device device = bidRequest.getDevice();\n        final String alpha2CountryCode = resolveAlpha2CountryCode(device);\n        final String effectiveIpAddress = resolveIpAddress(device, privacy);\n\n        final AccountGdprConfig accountGdpr = accountGdprConfig(account);\n        final String accountId = account.getId();\n        final RequestLogInfo requestLogInfo = requestLogInfo(requestType, bidRequest, accountId);\n\n        return tcfDefinerService.resolveTcfContext(\n                        privacy,\n                        alpha2CountryCode,\n                        effectiveIpAddress,\n                        accountGdpr,\n                        requestType,\n                        requestLogInfo,\n                        timeout)\n                .map(tcfContext -> logWarnings(auctionContext.getDebugWarnings(), tcfContext))\n                .map(tcfContext -> PrivacyContext.of(privacy, tcfContext, tcfContext.getIpAddress()));\n    }",
            "method_tgt": "public Future<PrivacyContext> contextFromBidRequest(AuctionContext auctionContext) {\n        final BidRequest bidRequest = auctionContext.getBidRequest();\n        final List<String> errors = auctionContext.getPrebidErrors();\n        final Account account = auctionContext.getAccount();\n        final MetricName requestType = auctionContext.getRequestTypeMetric();\n        final Timeout timeout = auctionContext.getTimeoutContext().getTimeout();\n\n        final Privacy privacy = privacyExtractor.validPrivacyFrom(bidRequest, errors);\n\n        final Device device = bidRequest.getDevice();\n        final String alpha2CountryCode = resolveAlpha2CountryCode(device);\n        final String effectiveIpAddress = resolveIpAddress(device, privacy);\n\n        final AccountGdprConfig accountGdpr = accountGdprConfig(account);\n        final String accountId = account.getId();\n        final RequestLogInfo requestLogInfo = requestLogInfo(requestType, bidRequest, accountId);\n\n        return tcfDefinerService.resolveTcfContext(\n                        privacy,\n                        alpha2CountryCode,\n                        effectiveIpAddress,\n                        accountGdpr,\n                        requestType,\n                        requestLogInfo,\n                        timeout)\n                .map(tcfContext -> logWarnings(auctionContext.getDebugWarnings(), tcfContext))\n                .map(tcfContext -> PrivacyContext.of(privacy, tcfContext, tcfContext.getIpAddress()));\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/PrivacyEnforcementServiceTest.java",
            "method_src": "@Test\n    public void contextFromBidRequestShouldCallResolveTcfContextWithIpv6AnonymizedWhenIpNotPresentAndLmtIsOne() {\n        // given\n        final BidRequest bidRequest = BidRequest.builder()\n                .device(Device.builder()\n                        .lmt(1)\n                        .ipv6(\"ipv6\")\n                        .build())\n                .build();\n        given(ipAddressHelper.anonymizeIpv6(any())).willReturn(\"ip-masked\");\n        given(tcfDefinerService.resolveTcfContext(any(), any(), any(), any(), any(), any(), any()))\n                .willReturn(Future.succeededFuture(TcfContext.builder().build()));\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .bidRequest(bidRequest)\n                .account(Account.empty(\"account\"))\n                .prebidErrors(new ArrayList<>())\n                .build();\n\n        // when\n        privacyEnforcementService.contextFromBidRequest(auctionContext);\n\n        // then\n        verify(tcfDefinerService).resolveTcfContext(any(), any(), eq(\"ip-masked\"), any(), any(), any(), any());\n    }",
            "method_tgt": "@Test\n    public void contextFromBidRequestShouldCallResolveTcfContextWithIpv6AnonymizedWhenIpNotPresentAndLmtIsOne() {\n        // given\n        final BidRequest bidRequest = BidRequest.builder()\n                .device(Device.builder()\n                        .lmt(1)\n                        .ipv6(\"ipv6\")\n                        .build())\n                .build();\n        given(ipAddressHelper.anonymizeIpv6(any())).willReturn(\"ip-masked\");\n        given(tcfDefinerService.resolveTcfContext(any(), any(), any(), any(), any(), any(), any()))\n                .willReturn(Future.succeededFuture(TcfContext.builder().build()));\n        final AuctionContext auctionContext = AuctionContext.builder()\n                .bidRequest(bidRequest)\n                .account(Account.empty(\"account\"))\n                .timeoutContext(TimeoutContext.of(0, null, 0))\n                .prebidErrors(new ArrayList<>())\n                .build();\n\n        // when\n        privacyEnforcementService.contextFromBidRequest(auctionContext);\n\n        // then\n        verify(tcfDefinerService).resolveTcfContext(any(), any(), eq(\"ip-masked\"), any(), any(), any(), any());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 163,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "5f139e66e3d0426769a7d492c8363a78629df526",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/mediatypeprocessor/CompositeMediaTypeProcessor.java",
            "method_src": "@Override\n    public MediaTypeProcessingResult process(BidRequest originalBidRequest, String bidderName, Account account) {\n        BidRequest bidRequest = originalBidRequest;\n        final List<BidderError> errors = new ArrayList<>();\n\n        for (MediaTypeProcessor mediaTypeProcessor : mediaTypeProcessors) {\n            final MediaTypeProcessingResult result = mediaTypeProcessor.process(bidRequest, bidderName, account);\n\n            bidRequest = result.getBidRequest();\n            errors.addAll(result.getErrors());\n\n            if (result.isRejected()) {\n                return MediaTypeProcessingResult.rejected(errors);\n            }\n        }\n\n        return MediaTypeProcessingResult.succeeded(bidRequest, errors);\n    }",
            "method_tgt": "@Override\n    public MediaTypeProcessingResult process(BidRequest originalBidRequest,\n                                             String bidderName,\n                                             BidderAliases aliases,\n                                             Account account) {\n        BidRequest bidRequest = originalBidRequest;\n        final List<BidderError> errors = new ArrayList<>();\n\n        for (MediaTypeProcessor mediaTypeProcessor : mediaTypeProcessors) {\n            final MediaTypeProcessingResult result = mediaTypeProcessor.process(\n                    bidRequest,\n                    bidderName,\n                    aliases,\n                    account);\n\n            bidRequest = result.getBidRequest();\n            errors.addAll(result.getErrors());\n\n            if (result.isRejected()) {\n                return MediaTypeProcessingResult.rejected(errors);\n            }\n        }\n\n        return MediaTypeProcessingResult.succeeded(bidRequest, errors);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/mediatypeprocessor/CompositeMediaTypeProcessorTest.java",
            "method_src": "@Test\n    public void processShouldReturnExpectedResultIfRejectedBySomeOfProcessors() {\n        // given\n        given(mediaTypeProcessor1.process(any(), anyString(), any()))\n                .willReturn(MediaTypeProcessingResult.rejected(\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor1\"))));\n\n        // when\n        final MediaTypeProcessingResult result = target.process(BidRequest.builder().build(), \"bidder\", null);\n\n        // then\n        assertThat(result.isRejected()).isTrue();\n        assertThat(result.getErrors()).containsExactly(BidderError.badInput(\"Error from mediaTypeProcessor1\"));\n        verifyNoInteractions(mediaTypeProcessor2);\n    }",
            "method_tgt": "@Test\n    public void processShouldReturnExpectedResultIfRejectedBySomeOfProcessors() {\n        // given\n        given(mediaTypeProcessor1.process(any(), anyString(), any(), any()))\n                .willReturn(MediaTypeProcessingResult.rejected(\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor1\"))));\n\n        // when\n        final MediaTypeProcessingResult result = target.process(\n                BidRequest.builder().build(),\n                \"bidder\",\n                bidderAliases,\n                null);\n\n        // then\n        assertThat(result.isRejected()).isTrue();\n        assertThat(result.getErrors()).containsExactly(BidderError.badInput(\"Error from mediaTypeProcessor1\"));\n        verifyNoInteractions(mediaTypeProcessor2);\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 164,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "5f139e66e3d0426769a7d492c8363a78629df526",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/mediatypeprocessor/CompositeMediaTypeProcessor.java",
            "method_src": "@Override\n    public MediaTypeProcessingResult process(BidRequest originalBidRequest, String bidderName, Account account) {\n        BidRequest bidRequest = originalBidRequest;\n        final List<BidderError> errors = new ArrayList<>();\n\n        for (MediaTypeProcessor mediaTypeProcessor : mediaTypeProcessors) {\n            final MediaTypeProcessingResult result = mediaTypeProcessor.process(bidRequest, bidderName, account);\n\n            bidRequest = result.getBidRequest();\n            errors.addAll(result.getErrors());\n\n            if (result.isRejected()) {\n                return MediaTypeProcessingResult.rejected(errors);\n            }\n        }\n\n        return MediaTypeProcessingResult.succeeded(bidRequest, errors);\n    }",
            "method_tgt": "@Override\n    public MediaTypeProcessingResult process(BidRequest originalBidRequest,\n                                             String bidderName,\n                                             BidderAliases aliases,\n                                             Account account) {\n        BidRequest bidRequest = originalBidRequest;\n        final List<BidderError> errors = new ArrayList<>();\n\n        for (MediaTypeProcessor mediaTypeProcessor : mediaTypeProcessors) {\n            final MediaTypeProcessingResult result = mediaTypeProcessor.process(\n                    bidRequest,\n                    bidderName,\n                    aliases,\n                    account);\n\n            bidRequest = result.getBidRequest();\n            errors.addAll(result.getErrors());\n\n            if (result.isRejected()) {\n                return MediaTypeProcessingResult.rejected(errors);\n            }\n        }\n\n        return MediaTypeProcessingResult.succeeded(bidRequest, errors);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/mediatypeprocessor/CompositeMediaTypeProcessorTest.java",
            "method_src": "@Test\n    public void processShouldReturnExpectedResult() {\n        // given\n        given(mediaTypeProcessor1.process(any(), anyString(), any()))\n                .willReturn(MediaTypeProcessingResult.succeeded(\n                        BidRequest.builder().id(\"processed by mediaTypeProcessor1\").build(),\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor1\"))));\n\n        given(mediaTypeProcessor2.process(\n                argThat(request -> request.getId().equals(\"processed by mediaTypeProcessor1\")),\n                anyString(),\n                any()))\n                .willReturn(MediaTypeProcessingResult.succeeded(\n                        BidRequest.builder().id(\"processed by mediaTypeProcessor2\").build(),\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor2\"))));\n\n        // when\n        final MediaTypeProcessingResult result = target.process(BidRequest.builder().build(), \"bidder\", null);\n\n        // then\n        assertThat(result.isRejected()).isFalse();\n        assertThat(result.getBidRequest())\n                .isEqualTo(BidRequest.builder().id(\"processed by mediaTypeProcessor2\").build());\n        assertThat(result.getErrors())\n                .containsExactly(\n                        BidderError.badInput(\"Error from mediaTypeProcessor1\"),\n                        BidderError.badInput(\"Error from mediaTypeProcessor2\"));\n    }",
            "method_tgt": "@Test\n    public void processShouldReturnExpectedResult() {\n        // given\n        given(mediaTypeProcessor1.process(any(), anyString(), any(), any()))\n                .willReturn(MediaTypeProcessingResult.succeeded(\n                        BidRequest.builder().id(\"processed by mediaTypeProcessor1\").build(),\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor1\"))));\n\n        given(mediaTypeProcessor2.process(\n                argThat(request -> request.getId().equals(\"processed by mediaTypeProcessor1\")),\n                anyString(),\n                any(),\n                any()))\n                .willReturn(MediaTypeProcessingResult.succeeded(\n                        BidRequest.builder().id(\"processed by mediaTypeProcessor2\").build(),\n                        singletonList(BidderError.badInput(\"Error from mediaTypeProcessor2\"))));\n\n        // when\n        final MediaTypeProcessingResult result = target.process(\n                BidRequest.builder().build(),\n                \"bidder\",\n                bidderAliases,\n                null);\n\n        // then\n        assertThat(result.isRejected()).isFalse();\n        assertThat(result.getBidRequest())\n                .isEqualTo(BidRequest.builder().id(\"processed by mediaTypeProcessor2\").build());\n        assertThat(result.getErrors())\n                .containsExactly(\n                        BidderError.badInput(\"Error from mediaTypeProcessor1\"),\n                        BidderError.badInput(\"Error from mediaTypeProcessor2\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 165,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "96eda0b11ed826d09b815f3afff562d38766b549",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/TargetingKeywordsCreator.java",
            "method_src": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver) {\n\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver);\n    }",
            "method_tgt": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver,\n                                                  String keyPrefix) {\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver,\n                keyPrefix);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/TargetingKeywordsCreatorTest.java",
            "method_src": "@Test\n    public void shouldIncludeFormatOpenrtb() {\n        // given\n        final Bid bid = Bid.builder()\n                .price(BigDecimal.valueOf(3.87)).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        true,\n                        true,\n                        false,\n                        true,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null)\n                .makeFor(bid, \"\", true, null, \"banner\", null, null);\n\n        // then\n        assertThat(keywords).contains(entry(\"hb_format\", \"banner\"));\n    }",
            "method_tgt": "@Test\n    public void shouldIncludeFormatOpenrtb() {\n        // given\n        final Bid bid = Bid.builder()\n                .price(BigDecimal.valueOf(3.87)).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        true,\n                        true,\n                        false,\n                        true,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null,\n                        defaultKeyPrefix)\n                .makeFor(bid, \"\", true, null, \"banner\", null, null);\n\n        // then\n        assertThat(keywords).contains(entry(\"hb_format\", \"banner\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 166,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "96eda0b11ed826d09b815f3afff562d38766b549",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/TargetingKeywordsCreator.java",
            "method_src": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver) {\n\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver);\n    }",
            "method_tgt": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver,\n                                                  String keyPrefix) {\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver,\n                keyPrefix);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/TargetingKeywordsCreatorTest.java",
            "method_src": "@Test\n    public void shouldNotTruncateTargetingKeywordsIfTruncateAttrCharsIsNotDefined() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        true,\n                        false,\n                        false,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null)\n                .makeFor(bid, \"someVeryLongBidderName\", true, null, null, null, null);\n\n        // then\n        assertThat(keywords).hasSize(2)\n                .containsKeys(\"hb_bidder_someVeryLongBidderName\", \"hb_pb_someVeryLongBidderName\");\n    }",
            "method_tgt": "@Test\n    public void shouldNotTruncateTargetingKeywordsIfTruncateAttrCharsIsNotDefined() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        true,\n                        false,\n                        false,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null,\n                        defaultKeyPrefix)\n                .makeFor(bid, \"someVeryLongBidderName\", true, null, null, null, null);\n\n        // then\n        assertThat(keywords).hasSize(2)\n                .containsKeys(\"hb_bidder_someVeryLongBidderName\", \"hb_pb_someVeryLongBidderName\");\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 167,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "96eda0b11ed826d09b815f3afff562d38766b549",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/TargetingKeywordsCreator.java",
            "method_src": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver) {\n\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver);\n    }",
            "method_tgt": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver,\n                                                  String keyPrefix) {\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver,\n                keyPrefix);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/TargetingKeywordsCreatorTest.java",
            "method_src": "@Test\n    public void shouldReturnTargetingKeywordsForWinningBidOpenrtb() {\n        // given\n        final Bid bid = Bid.builder()\n                .price(BigDecimal.ONE)\n                .dealid(\"dealId1\")\n                .w(50)\n                .h(100)\n                .build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        true,\n                        true,\n                        false,\n                        true,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null)\n                .makeFor(bid, \"bidder1\", true, \"cacheId1\", \"banner\", \"videoCacheId1\", \"categoryDuration\");\n\n        // then\n        assertThat(keywords).containsOnly(\n                entry(\"hb_pb_bidder1\", \"1.00\"),\n                entry(\"hb_bidder_bidder1\", \"bidder1\"),\n                entry(\"hb_size_bidder1\", \"50x100\"),\n                entry(\"hb_deal_bidder1\", \"dealId1\"),\n                entry(\"hb_pb\", \"1.00\"),\n                entry(\"hb_bidder\", \"bidder1\"),\n                entry(\"hb_size\", \"50x100\"),\n                entry(\"hb_deal\", \"dealId1\"),\n                entry(\"hb_cache_id\", \"cacheId1\"),\n                entry(\"hb_cache_id_bidder1\", \"cacheId1\"),\n                entry(\"hb_uuid\", \"videoCacheId1\"),\n                entry(\"hb_uuid_bidder1\", \"videoCacheId1\"),\n                entry(\"hb_format\", \"banner\"),\n                entry(\"hb_format_bidder1\", \"banner\"),\n                entry(\"hb_pb_cat_dur_bidder1\", \"categoryDuration\"),\n                entry(\"hb_pb_cat_dur\", \"categoryDuration\"));\n    }",
            "method_tgt": "@Test\n    public void shouldReturnTargetingKeywordsForWinningBidOpenrtb() {\n        // given\n        final Bid bid = Bid.builder()\n                .price(BigDecimal.ONE)\n                .dealid(\"dealId1\")\n                .w(50)\n                .h(100)\n                .build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        true,\n                        true,\n                        false,\n                        true,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null,\n                        defaultKeyPrefix)\n                .makeFor(bid, \"bidder1\", true, \"cacheId1\", \"banner\", \"videoCacheId1\", \"categoryDuration\");\n\n        // then\n        assertThat(keywords).containsOnly(\n                entry(\"hb_pb_bidder1\", \"1.00\"),\n                entry(\"hb_bidder_bidder1\", \"bidder1\"),\n                entry(\"hb_size_bidder1\", \"50x100\"),\n                entry(\"hb_deal_bidder1\", \"dealId1\"),\n                entry(\"hb_pb\", \"1.00\"),\n                entry(\"hb_bidder\", \"bidder1\"),\n                entry(\"hb_size\", \"50x100\"),\n                entry(\"hb_deal\", \"dealId1\"),\n                entry(\"hb_cache_id\", \"cacheId1\"),\n                entry(\"hb_cache_id_bidder1\", \"cacheId1\"),\n                entry(\"hb_uuid\", \"videoCacheId1\"),\n                entry(\"hb_uuid_bidder1\", \"videoCacheId1\"),\n                entry(\"hb_format\", \"banner\"),\n                entry(\"hb_format_bidder1\", \"banner\"),\n                entry(\"hb_pb_cat_dur_bidder1\", \"categoryDuration\"),\n                entry(\"hb_pb_cat_dur\", \"categoryDuration\"));\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 168,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "96eda0b11ed826d09b815f3afff562d38766b549",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/TargetingKeywordsCreator.java",
            "method_src": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver) {\n\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver);\n    }",
            "method_tgt": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver,\n                                                  String keyPrefix) {\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver,\n                keyPrefix);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/TargetingKeywordsCreatorTest.java",
            "method_src": "@Test\n    public void shouldTruncateTargetingBidderKeywordsIfTruncateAttrCharsIsDefined() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        true,\n                        false,\n                        false,\n                        false,\n                        20,\n                        null,\n                        null,\n                        null)\n                .makeFor(bid, \"someVeryLongBidderName\", true, null, null, null, null);\n\n        // then\n        assertThat(keywords).hasSize(2)\n                .containsKeys(\"hb_bidder_someVeryLo\", \"hb_pb_someVeryLongBi\");\n    }",
            "method_tgt": "@Test\n    public void shouldTruncateTargetingBidderKeywordsIfTruncateAttrCharsIsDefined() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        true,\n                        false,\n                        false,\n                        false,\n                        20,\n                        null,\n                        null,\n                        null,\n                        defaultKeyPrefix)\n                .makeFor(bid, \"someVeryLongBidderName\", true, null, null, null, null);\n\n        // then\n        assertThat(keywords).hasSize(2)\n                .containsKeys(\"hb_bidder_someVeryLo\", \"hb_pb_someVeryLongBi\");\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 169,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "96eda0b11ed826d09b815f3afff562d38766b549",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/TargetingKeywordsCreator.java",
            "method_src": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver) {\n\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver);\n    }",
            "method_tgt": "public static TargetingKeywordsCreator create(ExtPriceGranularity extPriceGranularity,\n                                                  boolean includeWinners,\n                                                  boolean includeBidderKeys,\n                                                  boolean alwaysIncludeDeals,\n                                                  boolean includeFormat,\n                                                  boolean isApp,\n                                                  int truncateAttrChars,\n                                                  String cacheHost,\n                                                  String cachePath,\n                                                  TargetingKeywordsResolver resolver,\n                                                  String keyPrefix) {\n        return new TargetingKeywordsCreator(\n                PriceGranularity.createFromExtPriceGranularity(extPriceGranularity),\n                includeWinners,\n                includeBidderKeys,\n                alwaysIncludeDeals,\n                includeFormat,\n                isApp,\n                truncateAttrChars,\n                cacheHost,\n                cachePath,\n                resolver,\n                keyPrefix);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/TargetingKeywordsCreatorTest.java",
            "method_src": "@Test\n    public void shouldNotIncludeDealBidTargetingIfAlwaysIncludeDealsFlagIsFalse() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).dealid(\"dealId\").build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        false,\n                        false,\n                        false,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null)\n                .makeFor(bid, \"bidder1\", false, null, null, null, null);\n\n        // then\n        assertThat(keywords).doesNotContainKeys(\"hb_bidder_bidder1\", \"hb_deal_bidder1\", \"hb_pb_bidder1\");\n    }",
            "method_tgt": "@Test\n    public void shouldNotIncludeDealBidTargetingIfAlwaysIncludeDealsFlagIsFalse() {\n        // given\n        final Bid bid = Bid.builder().price(BigDecimal.ONE).dealid(\"dealId\").build();\n\n        // when\n        final Map<String, String> keywords = TargetingKeywordsCreator.create(\n                        ExtPriceGranularity.of(\n                                2,\n                                singletonList(ExtGranularityRange.of(BigDecimal.valueOf(5), BigDecimal.valueOf(0.5)))),\n                        false,\n                        false,\n                        false,\n                        false,\n                        false,\n                        0,\n                        null,\n                        null,\n                        null,\n                        defaultKeyPrefix)\n                .makeFor(bid, \"bidder1\", false, null, null, null, null);\n\n        // then\n        assertThat(keywords).doesNotContainKeys(\"hb_bidder_bidder1\", \"hb_deal_bidder1\", \"hb_pb_bidder1\");\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 1,
            "throw_types": 0
        }
    },
    {
        "id": 170,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "f46839a2aa369fd5aa517c3be6f928c5c796337c",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/util/VersionInfo.java",
            "method_src": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }",
            "method_tgt": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        final Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/util/VersionInfoTest.java",
            "method_src": "@Test\n    public void shouldCreateVersionWithUndefinedForAllFieldsIfFileWasNotFound() {\n        // when\n        VersionInfo versionInfo = VersionInfo.create(\"not_found.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"undefined\", \"undefined\");\n    }",
            "method_tgt": "@Test\n    public void shouldCreateVersionWithUndefinedForAllFieldsIfFileWasNotFound() {\n        // when\n        final VersionInfo versionInfo = VersionInfo.create(\"not_found.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"undefined\", \"undefined\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 171,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "f46839a2aa369fd5aa517c3be6f928c5c796337c",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/util/VersionInfo.java",
            "method_src": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }",
            "method_tgt": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        final Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/util/VersionInfoTest.java",
            "method_src": "@Test\n    public void shouldCreateVersionWithUndefinedForEachMissingPropertyInFile() {\n        // when\n        VersionInfo versionInfo = VersionInfo.create(\n                \"org/prebid/server/util/resource/version/empty.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"undefined\", \"undefined\");\n    }",
            "method_tgt": "@Test\n    public void shouldCreateVersionWithUndefinedForEachMissingPropertyInFile() {\n        // when\n        final VersionInfo versionInfo = VersionInfo.create(\n                \"org/prebid/server/util/resource/version/empty.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"undefined\", \"undefined\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 172,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "f46839a2aa369fd5aa517c3be6f928c5c796337c",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/util/VersionInfo.java",
            "method_src": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }",
            "method_tgt": "public static VersionInfo create(String revisionFilePath, JacksonMapper jacksonMapper) {\n        final Revision revision;\n        try {\n            revision = jacksonMapper.mapper().readValue(ResourceUtil.readFromClasspath(revisionFilePath),\n                    Revision.class);\n        } catch (IllegalArgumentException | IOException e) {\n            logger.error(\"Was not able to read revision file {0}. Reason: {1}\", revisionFilePath, e.getMessage());\n            return new VersionInfo(UNDEFINED, UNDEFINED);\n        }\n        final String pbsVersion = revision.getPbsVersion();\n        final String commitHash = revision.getCommitHash();\n        return new VersionInfo(\n                pbsVersion != null ? extractVersion(pbsVersion) : UNDEFINED,\n                commitHash != null ? commitHash : UNDEFINED);\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/util/VersionInfoTest.java",
            "method_src": "@Test\n    public void shouldCreateVersionInfoWithAllProperties() {\n        // when\n        VersionInfo versionInfo = VersionInfo.create(\n                \"org/prebid/server/util/resource/version/version.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"1.41.0\", \"4df3f6192d7938ccdaac04df783c46c7e8847d08\");\n    }",
            "method_tgt": "@Test\n    public void shouldCreateVersionInfoWithAllProperties() {\n        // when\n        final VersionInfo versionInfo = VersionInfo.create(\n                \"org/prebid/server/util/resource/version/version.json\", jacksonMapper);\n\n        // then\n        assertThat(versionInfo)\n                .extracting(VersionInfo::getVersion, VersionInfo::getCommitHash)\n                .containsOnly(\"1.41.0\", \"4df3f6192d7938ccdaac04df783c46c7e8847d08\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 173,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "4b9fb727c114ade2f8eca53411d0566266ed1abc",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/ImplicitParametersExtractor.java",
            "method_src": "public String gpcFrom(HttpRequestContext httpRequest) {\n        final String gpcAsString = httpRequest.getHeaders().get(HttpUtil.SEC_GPC);\n        return \"1\".equals(gpcAsString) || \"\\\"1\\\"\".equals(gpcAsString) ? \"1\" : null;\n    }",
            "method_tgt": "public String gpcFrom(HttpRequestContext httpRequest) {\n        final String gpcAsString = httpRequest.getHeaders().get(HttpUtil.SEC_GPC_HEADER);\n        return \"1\".equals(gpcAsString) || \"\\\"1\\\"\".equals(gpcAsString) ? \"1\" : null;\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/ImplicitParametersExtractorTest.java",
            "method_src": "@Test\n    public void gpcFromShouldReturn1OnInteger() {\n        // given\n        final HttpRequestContext httpRequest = HttpRequestContext.builder()\n                .headers(CaseInsensitiveMultiMap.builder()\n                        .add(HttpUtil.SEC_GPC, \"1\")\n                        .build())\n                .build();\n\n        // when\n        final String gpc = extractor.gpcFrom(httpRequest);\n\n        // then\n        assertThat(gpc).isEqualTo(\"1\");\n    }",
            "method_tgt": "@Test\n    public void gpcFromShouldReturn1OnInteger() {\n        // given\n        final HttpRequestContext httpRequest = HttpRequestContext.builder()\n                .headers(CaseInsensitiveMultiMap.builder()\n                        .add(HttpUtil.SEC_GPC_HEADER, \"1\")\n                        .build())\n                .build();\n\n        // when\n        final String gpc = extractor.gpcFrom(httpRequest);\n\n        // then\n        assertThat(gpc).isEqualTo(\"1\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 174,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "4b9fb727c114ade2f8eca53411d0566266ed1abc",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/ImplicitParametersExtractor.java",
            "method_src": "public String gpcFrom(HttpRequestContext httpRequest) {\n        final String gpcAsString = httpRequest.getHeaders().get(HttpUtil.SEC_GPC);\n        return \"1\".equals(gpcAsString) || \"\\\"1\\\"\".equals(gpcAsString) ? \"1\" : null;\n    }",
            "method_tgt": "public String gpcFrom(HttpRequestContext httpRequest) {\n        final String gpcAsString = httpRequest.getHeaders().get(HttpUtil.SEC_GPC_HEADER);\n        return \"1\".equals(gpcAsString) || \"\\\"1\\\"\".equals(gpcAsString) ? \"1\" : null;\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/ImplicitParametersExtractorTest.java",
            "method_src": "@Test\n    public void gpcFromShouldReturn1OnString() {\n        // given\n        final HttpRequestContext httpRequest = HttpRequestContext.builder()\n                .headers(CaseInsensitiveMultiMap.builder()\n                        .add(HttpUtil.SEC_GPC, \"\\\"1\\\"\")\n                        .build())\n                .build();\n\n        // when\n        final String gpc = extractor.gpcFrom(httpRequest);\n\n        // then\n        assertThat(gpc).isEqualTo(\"1\");\n    }",
            "method_tgt": "@Test\n    public void gpcFromShouldReturn1OnString() {\n        // given\n        final HttpRequestContext httpRequest = HttpRequestContext.builder()\n                .headers(CaseInsensitiveMultiMap.builder()\n                        .add(HttpUtil.SEC_GPC_HEADER, \"\\\"1\\\"\")\n                        .build())\n                .build();\n\n        // when\n        final String gpc = extractor.gpcFrom(httpRequest);\n\n        // then\n        assertThat(gpc).isEqualTo(\"1\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 175,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "57c666e2106b03112ee7338782d208f5c197e39f",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/auction/PrivacyEnforcementService.java",
            "method_src": "public User maskUserConsideringActivityRestrictions(User user,\n                                                        boolean disallowTransmitUfpd,\n                                                        boolean disallowTransmitGeo) {\n\n        if (!(disallowTransmitGeo || disallowTransmitUfpd) || user == null) {\n            return user;\n        }\n\n        final User.UserBuilder userBuilder = user.toBuilder();\n\n        if (disallowTransmitUfpd) {\n            final ExtUser extUser = user.getExt();\n            userBuilder\n                    .buyeruid(null)\n                    .yob(null)\n                    .gender(null)\n                    .data(null)\n                    .eids(null)\n                    .ext(extUser != null ? nullIfEmpty(extUser.toBuilder().data(null).build()) : null);\n        }\n\n        if (disallowTransmitGeo) {\n            userBuilder.geo(maskGeoDefault(user.getGeo()));\n        }\n\n        return userBuilder.build();\n    }",
            "method_tgt": "public User maskUserConsideringActivityRestrictions(User user,\n                                                        boolean disallowTransmitUfpd,\n                                                        boolean disallowTransmitGeo) {\n\n        if (!(disallowTransmitGeo || disallowTransmitUfpd) || user == null) {\n            return user;\n        }\n\n        final User.UserBuilder userBuilder = user.toBuilder();\n\n        if (disallowTransmitUfpd) {\n            final ExtUser extUser = user.getExt();\n            userBuilder\n                    .id(null)\n                    .buyeruid(null)\n                    .yob(null)\n                    .gender(null)\n                    .data(null)\n                    .eids(null)\n                    .ext(extUser != null ? nullIfEmpty(extUser.toBuilder().data(null).build()) : null);\n        }\n\n        if (disallowTransmitGeo) {\n            userBuilder.geo(maskGeoDefault(user.getGeo()));\n        }\n\n        return userBuilder.build();\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/auction/PrivacyEnforcementServiceTest.java",
            "method_src": "@Test\n    public void maskUserConsideringActivityRestrictionsShouldReturnMaskedUser() {\n        // given\n        final User user = User.builder()\n                .buyeruid(\"buyeruid\")\n                .yob(1)\n                .gender(\"gender\")\n                .data(emptyList())\n                .eids(emptyList())\n                .geo(Geo.builder().lon(-85.34321F).lat(189.342323F).build())\n                .ext(ExtUser.builder().data(mapper.createObjectNode()).build())\n                .build();\n\n        // when\n        final User result = privacyEnforcementService.maskUserConsideringActivityRestrictions(user, true, true);\n\n        // then\n        assertThat(result).isEqualTo(User.builder()\n                .buyeruid(null)\n                .yob(null)\n                .gender(null)\n                .data(null)\n                .eids(null)\n                .geo(Geo.builder().lon(-85.34F).lat(189.34F).build())\n                .ext(null)\n                .build());\n    }",
            "method_tgt": "@Test\n    public void maskUserConsideringActivityRestrictionsShouldReturnMaskedUser() {\n        // given\n        final User user = User.builder()\n                .id(\"id\")\n                .buyeruid(\"buyeruid\")\n                .yob(1)\n                .gender(\"gender\")\n                .data(emptyList())\n                .eids(emptyList())\n                .geo(Geo.builder().lon(-85.34321F).lat(189.342323F).build())\n                .ext(ExtUser.builder().data(mapper.createObjectNode()).build())\n                .build();\n\n        // when\n        final User result = privacyEnforcementService.maskUserConsideringActivityRestrictions(user, true, true);\n\n        // then\n        assertThat(result).isEqualTo(User.builder()\n                .id(null)\n                .buyeruid(null)\n                .yob(null)\n                .gender(null)\n                .data(null)\n                .eids(null)\n                .geo(Geo.builder().lon(-85.34F).lat(189.34F).build())\n                .ext(null)\n                .build());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 176,
        "repo_name": "prebid/prebid-server-java",
        "commit_id": "5be24a1314fb3ed68d6c9e87ef20e803dc6d9a5e",
        "focal_db": {
            "rel_path": "src/main/java/org/prebid/server/deals/simulation/SimulationAwareHttpBidderRequester.java",
            "method_src": "@Override\n    public <T> Future<BidderSeatBid> requestBids(Bidder<T> bidder,\n                                                 BidderRequest bidderRequest,\n                                                 Timeout timeout,\n                                                 CaseInsensitiveMultiMap requestHeaders,\n                                                 BidderAliases aliases,\n                                                 boolean debugEnabled) {\n\n        final List<Imp> imps = bidderRequest.getBidRequest().getImp();\n        final Map<String, Imp> idToImps = imps.stream().collect(Collectors.toMap(Imp::getId, Function.identity()));\n        final Map<String, Set<DealInfo>> impsToDealInfo = imps.stream()\n                .filter(imp -> imp.getPmp() != null)\n                .collect(Collectors.toMap(Imp::getId, imp -> imp.getPmp().getDeals().stream()\n                        .map(deal -> DealInfo.of(deal.getId(), getLineItemId(deal)))\n                        .filter(dealInfo -> dealInfo.getLineItemId() != null)\n                        .collect(Collectors.toSet())));\n\n        if (impsToDealInfo.values().stream().noneMatch(CollectionUtils::isNotEmpty)) {\n            return Future.succeededFuture(BidderSeatBid.of(\n                    Collections.emptyList(),\n                    Collections.emptyList(),\n                    Collections.singletonList(BidderError.failedToRequestBids(\n                            \"Matched or ready to serve line items were not found, but required in simulation mode\")),\n                    Collections.emptyList()));\n        }\n\n        final List<BidderBid> bidderBids = impsToDealInfo.entrySet().stream()\n                .flatMap(impToDealInfo -> impToDealInfo.getValue()\n                        .stream()\n                        .map(dealInfo -> createBid(idToImps.get(impToDealInfo.getKey()), dealInfo.getDealId(),\n                                dealInfo.getLineItemId()))\n                        .filter(Objects::nonNull))\n                .map(bid -> BidderBid.of(bid, BidType.banner, DEFAULT_CURRENCY))\n                .toList();\n\n        return Future.succeededFuture(BidderSeatBid.of(bidderBids));\n    }",
            "method_tgt": "@Override\n    public <T> Future<BidderSeatBid> requestBids(Bidder<T> bidder,\n                                                 BidderRequest bidderRequest,\n                                                 Timeout timeout,\n                                                 CaseInsensitiveMultiMap requestHeaders,\n                                                 BidderAliases aliases,\n                                                 boolean debugEnabled) {\n\n        final List<Imp> imps = bidderRequest.getBidRequest().getImp();\n        final Map<String, Imp> idToImps = imps.stream().collect(Collectors.toMap(Imp::getId, Function.identity()));\n        final Map<String, Set<DealInfo>> impsToDealInfo = imps.stream()\n                .filter(imp -> imp.getPmp() != null)\n                .collect(Collectors.toMap(Imp::getId, imp -> imp.getPmp().getDeals().stream()\n                        .map(deal -> DealInfo.of(deal.getId(), getLineItemId(deal)))\n                        .filter(dealInfo -> dealInfo.getLineItemId() != null)\n                        .collect(Collectors.toSet())));\n\n        if (impsToDealInfo.values().stream().noneMatch(CollectionUtils::isNotEmpty)) {\n            return Future.succeededFuture(BidderSeatBid.builder()\n                    .errors(Collections.singletonList(BidderError.failedToRequestBids(\n                            \"Matched or ready to serve line items were not found, but required in simulation mode\")))\n                    .build());\n        }\n\n        final List<BidderBid> bidderBids = impsToDealInfo.entrySet().stream()\n                .flatMap(impToDealInfo -> impToDealInfo.getValue()\n                        .stream()\n                        .map(dealInfo -> createBid(idToImps.get(impToDealInfo.getKey()), dealInfo.getDealId(),\n                                dealInfo.getLineItemId()))\n                        .filter(Objects::nonNull))\n                .map(bid -> BidderBid.of(bid, BidType.banner, DEFAULT_CURRENCY))\n                .toList();\n\n        return Future.succeededFuture(BidderSeatBid.of(bidderBids));\n    }"
        },
        "test_db": {
            "rel_path": "src/test/java/org/prebid/server/deals/simulation/SimulationAwareHttpBidderRequesterTest.java",
            "method_src": "@Test\n    public void requestBidsShouldReturnBidderSeatBidWithoutBidderBidsAndWithError() {\n        // given\n        bidderRequester.setBidRates(Collections.singletonMap(\"lineItemId1\", 1.00));\n\n        final BidRequest bidRequest = BidRequest.builder().imp(singletonList(\n                        Imp.builder().id(\"impId1\").pmp(Pmp.builder().deals(singletonList(Deal.builder()\n                                .id(\"dealId1\").build())).build()).build()))\n                .build();\n        final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, null, bidRequest);\n\n        // when\n        final Future<BidderSeatBid> result = bidderRequester\n                .requestBids(\n                        null,\n                        bidderRequest,\n                        null,\n                        requestHeaders,\n                        bidderAliases,\n                        false);\n\n        // then\n        assertThat(result.succeeded()).isTrue();\n        assertThat(result.result()).isEqualTo(BidderSeatBid.of(\n                emptyList(),\n                emptyList(),\n                singletonList(BidderError.failedToRequestBids(\n                        \"Matched or ready to serve line items were not found, but required in simulation mode\")),\n                emptyList()));\n    }",
            "method_tgt": "@Test\n    public void requestBidsShouldReturnBidderSeatBidWithoutBidderBidsAndWithError() {\n        // given\n        bidderRequester.setBidRates(Collections.singletonMap(\"lineItemId1\", 1.00));\n\n        final BidRequest bidRequest = BidRequest.builder().imp(singletonList(\n                        Imp.builder().id(\"impId1\").pmp(Pmp.builder().deals(singletonList(Deal.builder()\n                                .id(\"dealId1\").build())).build()).build()))\n                .build();\n        final BidderRequest bidderRequest = BidderRequest.of(\"bidder\", null, null, bidRequest);\n\n        // when\n        final Future<BidderSeatBid> result = bidderRequester\n                .requestBids(\n                        null,\n                        bidderRequest,\n                        null,\n                        requestHeaders,\n                        bidderAliases,\n                        false);\n\n        // then\n        assertThat(result.succeeded()).isTrue();\n        assertThat(result.result()).isEqualTo(BidderSeatBid.builder()\n                .errors(singletonList(BidderError.failedToRequestBids(\n                        \"Matched or ready to serve line items were not found, but required in simulation mode\")))\n                .build());\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 177,
        "repo_name": "shred/acme4j",
        "commit_id": "160f5077678b7a8ae2559f4dc88469d81eccc17d",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Session.java",
            "method_src": "public URL resourceUrl(Resource resource) throws AcmeException {\n        readDirectory();\n        var result = resourceMap.get().get(Objects.requireNonNull(resource, \"resource\"));\n        if (result == null) {\n            throw new AcmeException(\"Server does not offer \" + resource.path());\n        }\n        return result;\n    }",
            "method_tgt": "public URL resourceUrl(Resource resource) throws AcmeException {\n        return resourceUrlOptional(resource)\n                .orElseThrow(() -> new AcmeNotSupportedException(resource.path()));\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java",
            "method_src": "@Test\n    public void testDirectory() throws AcmeException, IOException {\n        var serverUri = URI.create(TestUtils.ACME_SERVER_URI);\n\n        var mockProvider = mock(AcmeProvider.class);\n        when(mockProvider.directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.eq(serverUri)))\n                .thenReturn(getJSON(\"directory\"));\n\n        var session = new Session(serverUri) {\n            @Override\n            public AcmeProvider provider() {\n                return mockProvider;\n            }\n        };\n\n        // No directory has been fetched yet\n        assertThat(session.hasDirectory()).isFalse();\n\n        assertThat(session.resourceUrl(Resource.NEW_ACCOUNT))\n                .isEqualTo(new URL(\"https://example.com/acme/new-account\"));\n\n        // There is a local copy of the directory now\n        assertThat(session.hasDirectory()).isTrue();\n\n        assertThat(session.resourceUrl(Resource.NEW_AUTHZ))\n                .isEqualTo(new URL(\"https://example.com/acme/new-authz\"));\n        assertThat(session.resourceUrl(Resource.NEW_ORDER))\n                .isEqualTo(new URL(\"https://example.com/acme/new-order\"));\n\n        assertThrows(AcmeException.class, () -> session.resourceUrl(Resource.REVOKE_CERT));\n\n        var meta = session.getMetadata();\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(meta).isNotNull();\n            softly.assertThat(meta.getTermsOfService().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/acme/terms\"));\n            softly.assertThat(meta.getWebsite().orElseThrow().toExternalForm())\n                    .isEqualTo(\"https://www.example.com/\");\n            softly.assertThat(meta.getCaaIdentities()).containsExactlyInAnyOrder(\"example.com\");\n            softly.assertThat(meta.isAutoRenewalEnabled()).isTrue();\n            softly.assertThat(meta.getAutoRenewalMaxDuration()).isEqualTo(Duration.ofDays(365));\n            softly.assertThat(meta.getAutoRenewalMinLifetime()).isEqualTo(Duration.ofHours(24));\n            softly.assertThat(meta.isAutoRenewalGetAllowed()).isTrue();\n            softly.assertThat(meta.isExternalAccountRequired()).isTrue();\n            softly.assertThat(meta.getJSON()).isNotNull();\n        }\n\n        // Make sure directory is read\n        verify(mockProvider, atLeastOnce()).directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.any(URI.class));\n    }",
            "method_tgt": "@Test\n    public void testDirectory() throws AcmeException, IOException {\n        var serverUri = URI.create(TestUtils.ACME_SERVER_URI);\n\n        var mockProvider = mock(AcmeProvider.class);\n        when(mockProvider.directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.eq(serverUri)))\n                .thenReturn(getJSON(\"directory\"));\n\n        var session = new Session(serverUri) {\n            @Override\n            public AcmeProvider provider() {\n                return mockProvider;\n            }\n        };\n\n        // No directory has been fetched yet\n        assertThat(session.hasDirectory()).isFalse();\n\n        assertThat(session.resourceUrl(Resource.NEW_ACCOUNT))\n                .isEqualTo(new URL(\"https://example.com/acme/new-account\"));\n\n        // There is a local copy of the directory now\n        assertThat(session.hasDirectory()).isTrue();\n\n        assertThat(session.resourceUrl(Resource.NEW_AUTHZ))\n                .isEqualTo(new URL(\"https://example.com/acme/new-authz\"));\n        assertThat(session.resourceUrl(Resource.NEW_ORDER))\n                .isEqualTo(new URL(\"https://example.com/acme/new-order\"));\n\n        assertThatExceptionOfType(AcmeNotSupportedException.class)\n                .isThrownBy(() -> session.resourceUrl(Resource.REVOKE_CERT))\n                .withMessage(\"Server does not support revokeCert\");\n\n        assertThat(session.resourceUrlOptional(Resource.NEW_AUTHZ))\n                .isNotEmpty()\n                .contains(new URL(\"https://example.com/acme/new-authz\"));\n\n        assertThat(session.resourceUrlOptional(Resource.REVOKE_CERT))\n                .isEmpty();\n\n        var meta = session.getMetadata();\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(meta).isNotNull();\n            softly.assertThat(meta.getTermsOfService().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/acme/terms\"));\n            softly.assertThat(meta.getWebsite().orElseThrow().toExternalForm())\n                    .isEqualTo(\"https://www.example.com/\");\n            softly.assertThat(meta.getCaaIdentities()).containsExactlyInAnyOrder(\"example.com\");\n            softly.assertThat(meta.isAutoRenewalEnabled()).isTrue();\n            softly.assertThat(meta.getAutoRenewalMaxDuration()).isEqualTo(Duration.ofDays(365));\n            softly.assertThat(meta.getAutoRenewalMinLifetime()).isEqualTo(Duration.ofHours(24));\n            softly.assertThat(meta.isAutoRenewalGetAllowed()).isTrue();\n            softly.assertThat(meta.isExternalAccountRequired()).isTrue();\n            softly.assertThat(meta.getJSON()).isNotNull();\n        }\n\n        // Make sure directory is read\n        verify(mockProvider, atLeastOnce()).directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.any(URI.class));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 178,
        "repo_name": "shred/acme4j",
        "commit_id": "c08c85b95c4daa246ded3bce319c3dd85891ead2",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
            "method_src": "public Optional<Certificate> getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                    .map(Value::asURL)\n                    .map(getLogin()::bindCertificate);\n    }",
            "method_tgt": "public Certificate getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                .optional()\n                .map(Value::asURL)\n                .map(getLogin()::bindCertificate)\n                .orElseThrow(() -> new IllegalStateException(\"Order is in an invalid state\"));\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
            "method_src": "@Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 1,
            "modifiers": 0,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 179,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java",
            "method_src": "public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation();\n            if (orderLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an order location\");\n            }\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
            "method_tgt": "public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an order location\"));\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
            "method_src": "@Test\n    public void testAutoRenewOrderCertificate() throws Exception {\n        var autoRenewStart = parseTimestamp(\"2018-01-01T00:00:00Z\");\n        var autoRenewEnd = parseTimestamp(\"2019-01-01T00:00:00Z\");\n        var validity = Duration.ofDays(7);\n        var predate = Duration.ofDays(6);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestAutoRenewOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domain(\"example.org\")\n                        .autoRenewal()\n                        .autoRenewalStart(autoRenewStart)\n                        .autoRenewalEnd(autoRenewEnd)\n                        .autoRenewalLifetime(validity)\n                        .autoRenewalLifetimeAdjust(predate)\n                        .autoRenewalEnableGet()\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(Identifier.dns(\"example.org\"));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(autoRenewStart);\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(autoRenewEnd);\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(validity);\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(predate);\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n        }\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testAutoRenewOrderCertificate() throws Exception {\n        var autoRenewStart = parseTimestamp(\"2018-01-01T00:00:00Z\");\n        var autoRenewEnd = parseTimestamp(\"2019-01-01T00:00:00Z\");\n        var validity = Duration.ofDays(7);\n        var predate = Duration.ofDays(6);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestAutoRenewOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domain(\"example.org\")\n                        .autoRenewal()\n                        .autoRenewalStart(autoRenewStart)\n                        .autoRenewalEnd(autoRenewEnd)\n                        .autoRenewalLifetime(validity)\n                        .autoRenewalLifetimeAdjust(predate)\n                        .autoRenewalEnableGet()\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(Identifier.dns(\"example.org\"));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow()).isEqualTo(autoRenewStart);\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow()).isEqualTo(autoRenewEnd);\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow()).isEqualTo(validity);\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow()).isEqualTo(predate);\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n        }\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 180,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java",
            "method_src": "@Nullable\n    public Duration getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration)\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Duration> getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java",
            "method_src": "@Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())\n                    .isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 181,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
            "method_src": "@Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
            "method_tgt": "public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
            "method_src": "@Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isNull();\n        assertThat(ex.getDocuments()).isNull();\n    }",
            "method_tgt": "@Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEmpty();\n        assertThat(ex.getDocuments()).isEmpty();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 182,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
            "method_src": "@Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
            "method_src": "@Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 183,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
            "method_src": "@Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
            "method_src": "@Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 184,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
            "method_src": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
            "method_tgt": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
            "method_src": "@Test\n    public void testRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            private boolean isUpdate;\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(login).isNotNull();\n                assertThat(url).isEqualTo(locationUrl);\n                assertThat(isUpdate).isFalse();\n                isUpdate = true;\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccount\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                isUpdate = false;\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.addContact(\"mailto:foo@example.com\");\n        builder.agreeToTermsOfService();\n        builder.useKeyPair(accountKey);\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        var account = login.getAccount();\n        assertThat(account.getTermsOfServiceAgreed()).isTrue();\n        assertThat(account.getLocation()).isEqualTo(locationUrl);\n        assertThat(account.hasExternalAccountBinding()).isFalse();\n        assertThat(account.getKeyIdentifier()).isNull();\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            private boolean isUpdate;\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(login).isNotNull();\n                assertThat(url).isEqualTo(locationUrl);\n                assertThat(isUpdate).isFalse();\n                isUpdate = true;\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccount\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                isUpdate = false;\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.addContact(\"mailto:foo@example.com\");\n        builder.agreeToTermsOfService();\n        builder.useKeyPair(accountKey);\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        var account = login.getAccount();\n        assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();\n        assertThat(account.getLocation()).isEqualTo(locationUrl);\n        assertThat(account.hasExternalAccountBinding()).isFalse();\n        assertThat(account.getKeyIdentifier()).isEmpty();\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 185,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
            "method_src": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
            "method_tgt": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
            "method_src": "@Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 186,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
            "method_src": "@Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
            "method_src": "@Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 187,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java",
            "method_src": "@Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java",
            "method_src": "@Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 188,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
            "method_src": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
            "method_tgt": "public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
            "method_src": "@Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 189,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java",
            "method_src": "public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation();\n            if (orderLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an order location\");\n            }\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
            "method_tgt": "public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an order location\"));\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java",
            "method_src": "@Test\n    public void testOrderCertificate() throws Exception {\n        var notBefore = parseTimestamp(\"2016-01-01T00:00:00Z\");\n        var notAfter = parseTimestamp(\"2016-01-08T00:00:00Z\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestOrderResponse\");\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domains(\"example.com\", \"www.example.com\")\n                        .domain(\"example.org\")\n                        .domains(Arrays.asList(\"m.example.com\", \"m.example.org\"))\n                        .identifier(Identifier.dns(\"d.example.com\"))\n                        .identifiers(Arrays.asList(\n                                    Identifier.dns(\"d2.example.com\"),\n                                    Identifier.ip(InetAddress.getByName(\"192.168.1.2\"))))\n                        .notBefore(notBefore)\n                        .notAfter(notAfter)\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(\n                        Identifier.dns(\"example.com\"),\n                        Identifier.dns(\"www.example.com\"),\n                        Identifier.dns(\"example.org\"),\n                        Identifier.dns(\"m.example.com\"),\n                        Identifier.dns(\"m.example.org\"),\n                        Identifier.dns(\"d.example.com\"),\n                        Identifier.dns(\"d2.example.com\"),\n                        Identifier.ip(InetAddress.getByName(\"192.168.1.2\")));\n            softly.assertThat(order.getNotBefore()).isEqualTo(\"2016-01-01T00:10:00Z\");\n            softly.assertThat(order.getNotAfter()).isEqualTo(\"2016-01-08T00:10:00Z\");\n            softly.assertThat(order.getExpires()).isEqualTo(\"2016-01-10T00:00:00Z\");\n            softly.assertThat(order.getStatus()).isEqualTo(Status.PENDING);\n            softly.assertThat(order.isAutoRenewing()).isFalse();\n            softly.assertThat(order.getAutoRenewalStartDate()).isNull();\n            softly.assertThat(order.getAutoRenewalEndDate()).isNull();\n            softly.assertThat(order.getAutoRenewalLifetime()).isNull();\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isFalse();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n            softly.assertThat(order.getAuthorizations()).isNotNull();\n            softly.assertThat(order.getAuthorizations()).hasSize(2);\n        }\n\n        provider.close();\n    }",
            "method_tgt": "@Test\n    public void testOrderCertificate() throws Exception {\n        var notBefore = parseTimestamp(\"2016-01-01T00:00:00Z\");\n        var notAfter = parseTimestamp(\"2016-01-08T00:00:00Z\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestOrderResponse\");\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domains(\"example.com\", \"www.example.com\")\n                        .domain(\"example.org\")\n                        .domains(Arrays.asList(\"m.example.com\", \"m.example.org\"))\n                        .identifier(Identifier.dns(\"d.example.com\"))\n                        .identifiers(Arrays.asList(\n                                    Identifier.dns(\"d2.example.com\"),\n                                    Identifier.ip(InetAddress.getByName(\"192.168.1.2\"))))\n                        .notBefore(notBefore)\n                        .notAfter(notAfter)\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(\n                        Identifier.dns(\"example.com\"),\n                        Identifier.dns(\"www.example.com\"),\n                        Identifier.dns(\"example.org\"),\n                        Identifier.dns(\"m.example.com\"),\n                        Identifier.dns(\"m.example.org\"),\n                        Identifier.dns(\"d.example.com\"),\n                        Identifier.dns(\"d2.example.com\"),\n                        Identifier.ip(InetAddress.getByName(\"192.168.1.2\")));\n            softly.assertThat(order.getNotBefore().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:10:00Z\");\n            softly.assertThat(order.getNotAfter().orElseThrow())\n                    .isEqualTo(\"2016-01-08T00:10:00Z\");\n            softly.assertThat(order.getExpires().orElseThrow())\n                    .isEqualTo(\"2016-01-10T00:00:00Z\");\n            softly.assertThat(order.getStatus()).isEqualTo(Status.PENDING);\n            softly.assertThat(order.isAutoRenewing()).isFalse();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEmpty();\n            softly.assertThat(order.getAutoRenewalEndDate()).isEmpty();\n            softly.assertThat(order.getAutoRenewalLifetime()).isEmpty();\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isFalse();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n            softly.assertThat(order.getAuthorizations()).isNotNull();\n            softly.assertThat(order.getAuthorizations()).hasSize(2);\n        }\n\n        provider.close();\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 190,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java",
            "method_src": "@Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
            "method_tgt": "public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java",
            "method_src": "@Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }",
            "method_tgt": "@Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 191,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java",
            "method_src": "@Nullable\n    public Problem getError() {\n        return getJSON().get(KEY_ERROR)\n                    .map(it -> it.asProblem(getLocation()))\n                    .orElse(null);\n    }",
            "method_tgt": "public Optional<Problem> getError() {\n        return getJSON().get(KEY_ERROR).map(it -> it.asProblem(getLocation()));\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/challenge/ChallengeTest.java",
            "method_src": "@Test\n    public void testUnmarshal() {\n        var challenge = new Challenge(TestUtils.login(), getJSON(\"genericChallenge\"));\n\n        // Test unmarshalled values\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(challenge.getType()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getStatus()).isEqualTo(Status.INVALID);\n            softly.assertThat(challenge.getLocation()).isEqualTo(url(\"http://example.com/challenge/123\"));\n            softly.assertThat(challenge.getValidated()).isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));\n            softly.assertThat(challenge.getJSON().get(\"type\").asString()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getJSON().get(\"url\").asURL()).isEqualTo(url(\"http://example.com/challenge/123\"));\n\n            var error = challenge.getError();\n            softly.assertThat(error).isNotNull();\n            softly.assertThat(error.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:incorrectResponse\"));\n            softly.assertThat(error.getDetail()).isEqualTo(\"bad token\");\n            softly.assertThat(error.getInstance()).isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));\n        }\n    }",
            "method_tgt": "@Test\n    public void testUnmarshal() {\n        var challenge = new Challenge(TestUtils.login(), getJSON(\"genericChallenge\"));\n\n        // Test unmarshalled values\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(challenge.getType()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getStatus()).isEqualTo(Status.INVALID);\n            softly.assertThat(challenge.getLocation()).isEqualTo(url(\"http://example.com/challenge/123\"));\n            softly.assertThat(challenge.getValidated().orElseThrow())\n                    .isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));\n            softly.assertThat(challenge.getJSON().get(\"type\").asString()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getJSON().get(\"url\").asURL()).isEqualTo(url(\"http://example.com/challenge/123\"));\n\n            var error = challenge.getError().orElseThrow();\n            softly.assertThat(error.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:incorrectResponse\"));\n            softly.assertThat(error.getDetail().orElseThrow()).isEqualTo(\"bad token\");\n            softly.assertThat(error.getInstance().orElseThrow())\n                    .isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));\n        }\n    }"
        },
        "syn_diff": {
            "overall": 2,
            "modifiers": 1,
            "type_params": 0,
            "type": 1,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 192,
        "repo_name": "shred/acme4j",
        "commit_id": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java",
            "method_src": "@Override\n    public String toString() {\n        var sb = new StringBuilder();\n\n        if (getDetail() != null) {\n            sb.append(getDetail());\n        } else if (getTitle() != null) {\n            sb.append(getTitle());\n        } else {\n            sb.append(getType());\n        }\n\n        var subproblems = getSubProblems();\n\n        if (!subproblems.isEmpty()) {\n            sb.append(\" (\");\n            var first = true;\n            for (var sub : subproblems) {\n                if (!first) {\n                    sb.append(\" \u2012 \");\n                }\n                sb.append(sub.toString());\n                first = false;\n            }\n            sb.append(')');\n        }\n\n        return sb.toString();\n    }",
            "method_tgt": "@Override\n    public String toString() {\n        var sb = new StringBuilder();\n\n        if (getDetail().isPresent()) {\n            sb.append(getDetail().get());\n        } else if (getTitle().isPresent()) {\n            sb.append(getTitle().get());\n        } else {\n            sb.append(getType());\n        }\n\n        var subproblems = getSubProblems();\n\n        if (!subproblems.isEmpty()) {\n            sb.append(\" (\");\n            var first = true;\n            for (var sub : subproblems) {\n                if (!first) {\n                    sb.append(\" \u2012 \");\n                }\n                sb.append(sub.toString());\n                first = false;\n            }\n            sb.append(')');\n        }\n\n        return sb.toString();\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/ProblemTest.java",
            "method_src": "@Test\n    public void testProblem() {\n        var baseUrl = url(\"https://example.com/acme/1\");\n        var original = TestUtils.getJSON(\"problem\");\n\n        var problem = new Problem(original, baseUrl);\n\n        assertThatJson(problem.asJSON().toString()).isEqualTo(original.toString());\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(problem.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(problem.getTitle()).isEqualTo(\"Some of the identifiers requested were rejected\");\n            softly.assertThat(problem.getDetail()).isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");\n            softly.assertThat(problem.getInstance()).isEqualTo(URI.create(\"https://example.com/documents/error.html\"));\n            softly.assertThat(problem.getIdentifier()).isNull();\n            softly.assertThat(problem.toString()).isEqualTo(\n                    \"Identifier \\\"abc12_\\\" is malformed (\"\n                            + \"Invalid underscore in DNS name \\\"_example.com\\\" \u2012 \"\n                            + \"This CA will not issue for \\\"example.net\\\")\");\n\n            var subs = problem.getSubProblems();\n            softly.assertThat(subs).isNotNull().hasSize(2);\n\n            var p1 = subs.get(0);\n            softly.assertThat(p1.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(p1.getTitle()).isNull();\n            softly.assertThat(p1.getDetail()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n            softly.assertThat(p1.getIdentifier().getDomain()).isEqualTo(\"_example.com\");\n            softly.assertThat(p1.toString()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n\n            var p2 = subs.get(1);\n            softly.assertThat(p2.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:rejectedIdentifier\"));\n            softly.assertThat(p2.getTitle()).isNull();\n            softly.assertThat(p2.getDetail()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n            softly.assertThat(p2.getIdentifier().getDomain()).isEqualTo(\"example.net\");\n            softly.assertThat(p2.toString()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n        }\n    }",
            "method_tgt": "@Test\n    public void testProblem() {\n        var baseUrl = url(\"https://example.com/acme/1\");\n        var original = TestUtils.getJSON(\"problem\");\n\n        var problem = new Problem(original, baseUrl);\n\n        assertThatJson(problem.asJSON().toString()).isEqualTo(original.toString());\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(problem.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(problem.getTitle().orElseThrow())\n                    .isEqualTo(\"Some of the identifiers requested were rejected\");\n            softly.assertThat(problem.getDetail().orElseThrow())\n                    .isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");\n            softly.assertThat(problem.getInstance().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/documents/error.html\"));\n            softly.assertThat(problem.getIdentifier()).isEmpty();\n            softly.assertThat(problem.toString()).isEqualTo(\n                    \"Identifier \\\"abc12_\\\" is malformed (\"\n                            + \"Invalid underscore in DNS name \\\"_example.com\\\" \u2012 \"\n                            + \"This CA will not issue for \\\"example.net\\\")\");\n\n            var subs = problem.getSubProblems();\n            softly.assertThat(subs).isNotNull().hasSize(2);\n\n            var p1 = subs.get(0);\n            softly.assertThat(p1.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(p1.getTitle()).isEmpty();\n            softly.assertThat(p1.getDetail().orElseThrow())\n                    .isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n            softly.assertThat(p1.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"_example.com\");\n            softly.assertThat(p1.toString()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n\n            var p2 = subs.get(1);\n            softly.assertThat(p2.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:rejectedIdentifier\"));\n            softly.assertThat(p2.getTitle()).isEmpty();\n            softly.assertThat(p2.getDetail().orElseThrow())\n                    .isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n            softly.assertThat(p2.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"example.net\");\n            softly.assertThat(p2.toString()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n        }\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 193,
        "repo_name": "shred/acme4j",
        "commit_id": "01a2206c62db61ab808577cbb4d95eded9572dd0",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java",
            "method_src": "public AccountBuilder addEmail(String email) {\n        addContact(\"mailto:\" + email);\n        return this;\n    }",
            "method_tgt": "public AccountBuilder addEmail(String email) {\n        if (email.startsWith(\"mailto:\")) {\n            addContact(email);\n        } else {\n            addContact(\"mailto:\" + email);\n        }\n        return this;\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java",
            "method_src": "@Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n    }",
            "method_tgt": "@Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n\n        // mailto is still accepted if present\n        builder.addEmail(\"mailto:bar@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    },
    {
        "id": 194,
        "repo_name": "shred/acme4j",
        "commit_id": "783fdde0139372c83719107b5da0dc8b91c244e6",
        "focal_db": {
            "rel_path": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java",
            "method_src": "public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n        if (timeout.toMillis() > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Timeout is out of range\");\n        }\n\n        this.timeout = timeout;\n    }",
            "method_tgt": "public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n\n        this.timeout = timeout;\n    }"
        },
        "test_db": {
            "rel_path": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java",
            "method_src": "@Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),\n                \"timeout accepted out of range value\");\n    }",
            "method_tgt": "@Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n    }"
        },
        "syn_diff": {
            "overall": 0,
            "modifiers": 0,
            "type_params": 0,
            "type": 0,
            "name": 0,
            "param_types": 0,
            "throw_types": 0
        }
    }
]