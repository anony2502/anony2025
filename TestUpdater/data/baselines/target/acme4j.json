[
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-07 09:25:22+02:00",
    "commit_src": "c26d6b1f8a126e979c87f9713d177c8872c5257f",
    "commit_tgt": "c08c85b95c4daa246ded3bce319c3dd85891ead2",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java#testAutoRenewFinalize",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java#getAutoRenewalCertificate",
    "test_code_src": "    /**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Gets the STAR extension's {@link Certificate} if it is available.\n     *\n     * @since 2.6\n     */\n    public Optional<Certificate> getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                    .map(Value::asURL)\n                    .map(getLogin()::bindCertificate);\n    }",
    "prod_code_tgt": "    /**\n     * Gets the STAR extension's {@link Certificate} if it is available.\n     *\n     * @since 2.6\n     * @throws IllegalStateException\n     *         if the order is not ready yet. You must finalize the order first, and wait\n     *         for the status to become {@link Status#VALID}. It is also thrown if the\n     *         order has been {@link Status#CANCELED}.\n     */\n    public Certificate getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                .optional()\n                .map(Value::asURL)\n                .map(getLogin()::bindCertificate)\n                .orElseThrow(() -> new IllegalStateException(\"Order is in an invalid state\"));\n    }",
    "test_id": 1,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java#testAutoRenewUpdate",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java#getAutoRenewalLifetimeAdjust",
    "test_code_src": "    /**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())\n                    .isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Returns the pre-date period of each certificate, or {@code null}.\n     *\n     * @since 2.7\n     */\n    @Nullable\n    public Duration getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration)\n                    .orElse(null);\n    }",
    "prod_code_tgt": "    /**\n     * Returns the pre-date period of each certificate.\n     *\n     * @since 2.7\n     */\n    public Optional<Duration> getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration);\n    }",
    "test_id": 3,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java#testNullAcmeRateLimitedException",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java#getRetryAfter",
    "test_code_src": "    /**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isNull();\n        assertThat(ex.getDocuments()).isNull();\n    }",
    "test_code_tgt": "    /**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEmpty();\n        assertThat(ex.getDocuments()).isEmpty();\n    }",
    "prod_code_src": "    /**\n     * Returns the instant of time the request is expected to succeed again. {@code null}\n     * if this moment is not known.\n     */\n    @Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
    "prod_code_tgt": "    /**\n     * Returns the instant of time the request is expected to succeed again. Empty\n     * if this moment is not known.\n     */\n    public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }",
    "test_id": 4,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testUpdate",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
    "test_code_src": "    /**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
    "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
    "test_id": 5,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testUpdateRetryAfter",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
    "test_code_src": "    /**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
    "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
    "test_id": 6,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testOnlyExistingRegistration",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#createLogin",
    "test_code_src": "    /**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
    "prod_code_tgt": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
    "test_id": 8,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testWildcard",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
    "test_code_src": "    /**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
    "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
    "test_id": 9,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testLazyLoading",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
    "test_code_src": "    /**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
    "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
    "test_id": 10,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testRegistrationWithKid",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#createLogin",
    "test_code_src": "    /**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
    "test_code_tgt": "    /**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
    "prod_code_src": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
    "prod_code_tgt": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
    "test_id": 11,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-05-06 17:27:36+02:00",
    "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
    "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java#testAcmeRateLimitedException",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java#getRetryAfter",
    "test_code_src": "    /**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }",
    "test_code_tgt": "    /**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }",
    "prod_code_src": "    /**\n     * Returns the instant of time the request is expected to succeed again. {@code null}\n     * if this moment is not known.\n     */\n    @Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
    "prod_code_tgt": "    /**\n     * Returns the instant of time the request is expected to succeed again. Empty\n     * if this moment is not known.\n     */\n    public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }",
    "test_id": 13,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-04-29 15:13:21+02:00",
    "commit_src": "09a72d606b56fe44f23fe53303675c4b9d3a7b45",
    "commit_tgt": "01a2206c62db61ab808577cbb4d95eded9572dd0",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testEmailAddresses",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#addEmail",
    "test_code_src": "    @Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n    }",
    "test_code_tgt": "    @Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n\n        // mailto is still accepted if present\n        builder.addEmail(\"mailto:bar@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));\n    }",
    "prod_code_src": "    /**\n     * Add an email address to the list of contacts.\n     * <p>\n     * This is a convenience call for {@link #addContact(String)} that doesn't require\n     * to prepend the \"mailto\" scheme to an email address.\n     *\n     * @param email\n     *         Contact email without \"mailto\" scheme (e.g. test@gmail.com)\n     * @return itself\n     * @throws IllegalArgumentException\n     *         if there is a syntax error in the URI string\n     */\n    public AccountBuilder addEmail(String email) {\n        addContact(\"mailto:\" + email);\n        return this;\n    }",
    "prod_code_tgt": "    /**\n     * Add an email address to the list of contacts.\n     * <p>\n     * This is a convenience call for {@link #addContact(String)} that doesn't require\n     * to prepend the \"mailto\" scheme to an email address.\n     *\n     * @param email\n     *         Contact email without \"mailto\" scheme (e.g. test@gmail.com)\n     * @return itself\n     * @throws IllegalArgumentException\n     *         if there is a syntax error in the URI string\n     */\n    public AccountBuilder addEmail(String email) {\n        if (email.startsWith(\"mailto:\")) {\n            addContact(email);\n        } else {\n            addContact(\"mailto:\" + email);\n        }\n        return this;\n    }",
    "test_id": 16,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  },
  {
    "repo_name": "shred/acme4j",
    "commit_date": "2023-04-24 21:16:07+02:00",
    "commit_src": "d6296111f705fc9e6f4501d1a6fbc390a5096e9e",
    "commit_tgt": "783fdde0139372c83719107b5da0dc8b91c244e6",
    "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java#testInvalidTimeouts",
    "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java#setTimeout",
    "test_code_src": "    @Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),\n                \"timeout accepted out of range value\");\n    }",
    "test_code_tgt": "    @Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n    }",
    "prod_code_src": "    /**\n     * Sets the network timeout to be used for connections. Defaults to 10 seconds.\n     *\n     * @param timeout\n     *         Network timeout {@link Duration}\n     */\n    public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n        if (timeout.toMillis() > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Timeout is out of range\");\n        }\n\n        this.timeout = timeout;\n    }",
    "prod_code_tgt": "    /**\n     * Sets the network timeout to be used for connections. Defaults to 10 seconds.\n     *\n     * @param timeout\n     *         Network timeout {@link Duration}\n     */\n    public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n\n        this.timeout = timeout;\n    }",
    "test_id": 17,
    "src_java_version": "11",
    "src_maven_version": "3.8.1",
    "tgt_java_version": "11",
    "tgt_maven_version": "3.8.1"
  }
]