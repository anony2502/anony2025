[
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-19 12:21:46+02:00",
        "commit_src": "e8b83d6423d020056876770c6d27021e01bbe2fb",
        "commit_tgt": "160f5077678b7a8ae2559f4dc88469d81eccc17d",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/SessionTest.java#testDirectory",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Session.java#resourceUrl",
        "test_code_src": "    /**\n     * Test that the directory is properly read.\n     */\n    @Test\n    public void testDirectory() throws AcmeException, IOException {\n        var serverUri = URI.create(TestUtils.ACME_SERVER_URI);\n\n        var mockProvider = mock(AcmeProvider.class);\n        when(mockProvider.directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.eq(serverUri)))\n                .thenReturn(getJSON(\"directory\"));\n\n        var session = new Session(serverUri) {\n            @Override\n            public AcmeProvider provider() {\n                return mockProvider;\n            }\n        };\n\n        // No directory has been fetched yet\n        assertThat(session.hasDirectory()).isFalse();\n\n        assertThat(session.resourceUrl(Resource.NEW_ACCOUNT))\n                .isEqualTo(new URL(\"https://example.com/acme/new-account\"));\n\n        // There is a local copy of the directory now\n        assertThat(session.hasDirectory()).isTrue();\n\n        assertThat(session.resourceUrl(Resource.NEW_AUTHZ))\n                .isEqualTo(new URL(\"https://example.com/acme/new-authz\"));\n        assertThat(session.resourceUrl(Resource.NEW_ORDER))\n                .isEqualTo(new URL(\"https://example.com/acme/new-order\"));\n\n        assertThrows(AcmeException.class, () -> session.resourceUrl(Resource.REVOKE_CERT));\n\n        var meta = session.getMetadata();\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(meta).isNotNull();\n            softly.assertThat(meta.getTermsOfService().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/acme/terms\"));\n            softly.assertThat(meta.getWebsite().orElseThrow().toExternalForm())\n                    .isEqualTo(\"https://www.example.com/\");\n            softly.assertThat(meta.getCaaIdentities()).containsExactlyInAnyOrder(\"example.com\");\n            softly.assertThat(meta.isAutoRenewalEnabled()).isTrue();\n            softly.assertThat(meta.getAutoRenewalMaxDuration()).isEqualTo(Duration.ofDays(365));\n            softly.assertThat(meta.getAutoRenewalMinLifetime()).isEqualTo(Duration.ofHours(24));\n            softly.assertThat(meta.isAutoRenewalGetAllowed()).isTrue();\n            softly.assertThat(meta.isExternalAccountRequired()).isTrue();\n            softly.assertThat(meta.getJSON()).isNotNull();\n        }\n\n        // Make sure directory is read\n        verify(mockProvider, atLeastOnce()).directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.any(URI.class));\n    }",
        "test_code_tgt": "    /**\n     * Test that the directory is properly read.\n     */\n    @Test\n    public void testDirectory() throws AcmeException, IOException {\n        var serverUri = URI.create(TestUtils.ACME_SERVER_URI);\n\n        var mockProvider = mock(AcmeProvider.class);\n        when(mockProvider.directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.eq(serverUri)))\n                .thenReturn(getJSON(\"directory\"));\n\n        var session = new Session(serverUri) {\n            @Override\n            public AcmeProvider provider() {\n                return mockProvider;\n            }\n        };\n\n        // No directory has been fetched yet\n        assertThat(session.hasDirectory()).isFalse();\n\n        assertThat(session.resourceUrl(Resource.NEW_ACCOUNT))\n                .isEqualTo(new URL(\"https://example.com/acme/new-account\"));\n\n        // There is a local copy of the directory now\n        assertThat(session.hasDirectory()).isTrue();\n\n        assertThat(session.resourceUrl(Resource.NEW_AUTHZ))\n                .isEqualTo(new URL(\"https://example.com/acme/new-authz\"));\n        assertThat(session.resourceUrl(Resource.NEW_ORDER))\n                .isEqualTo(new URL(\"https://example.com/acme/new-order\"));\n\n        assertThatExceptionOfType(AcmeNotSupportedException.class)\n                .isThrownBy(() -> session.resourceUrl(Resource.REVOKE_CERT))\n                .withMessage(\"Server does not support revokeCert\");\n\n        assertThat(session.resourceUrlOptional(Resource.NEW_AUTHZ))\n                .isNotEmpty()\n                .contains(new URL(\"https://example.com/acme/new-authz\"));\n\n        assertThat(session.resourceUrlOptional(Resource.REVOKE_CERT))\n                .isEmpty();\n\n        var meta = session.getMetadata();\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(meta).isNotNull();\n            softly.assertThat(meta.getTermsOfService().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/acme/terms\"));\n            softly.assertThat(meta.getWebsite().orElseThrow().toExternalForm())\n                    .isEqualTo(\"https://www.example.com/\");\n            softly.assertThat(meta.getCaaIdentities()).containsExactlyInAnyOrder(\"example.com\");\n            softly.assertThat(meta.isAutoRenewalEnabled()).isTrue();\n            softly.assertThat(meta.getAutoRenewalMaxDuration()).isEqualTo(Duration.ofDays(365));\n            softly.assertThat(meta.getAutoRenewalMinLifetime()).isEqualTo(Duration.ofHours(24));\n            softly.assertThat(meta.isAutoRenewalGetAllowed()).isTrue();\n            softly.assertThat(meta.isExternalAccountRequired()).isTrue();\n            softly.assertThat(meta.getJSON()).isNotNull();\n        }\n\n        // Make sure directory is read\n        verify(mockProvider, atLeastOnce()).directory(\n                        ArgumentMatchers.any(Session.class),\n                        ArgumentMatchers.any(URI.class));\n    }",
        "prod_code_src": "    /**\n     * Gets the {@link URL} of the given {@link Resource}. This may involve connecting to\n     * the server and fetching the directory. The result is cached.\n     *\n     * @param resource\n     *            {@link Resource} to get the {@link URL} of\n     * @return {@link URL} of the resource\n     * @throws AcmeException\n     *             if the server does not offer the {@link Resource}\n     */\n    public URL resourceUrl(Resource resource) throws AcmeException {\n        readDirectory();\n        var result = resourceMap.get().get(Objects.requireNonNull(resource, \"resource\"));\n        if (result == null) {\n            throw new AcmeException(\"Server does not offer \" + resource.path());\n        }\n        return result;\n    }",
        "prod_code_tgt": "    /**\n     * Gets the {@link URL} of the given {@link Resource}. This may involve connecting to\n     * the server and fetching the directory. The result is cached.\n     *\n     * @param resource\n     *            {@link Resource} to get the {@link URL} of\n     * @return {@link URL} of the resource\n     * @throws AcmeException\n     *             if the server does not offer the {@link Resource}\n     */\n    public URL resourceUrl(Resource resource) throws AcmeException {\n        return resourceUrlOptional(resource)\n                .orElseThrow(() -> new AcmeNotSupportedException(resource.path()));\n    }",
        "test_id": 0,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-07 09:25:22+02:00",
        "commit_src": "c26d6b1f8a126e979c87f9713d177c8872c5257f",
        "commit_tgt": "c08c85b95c4daa246ded3bce319c3dd85891ead2",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java#testAutoRenewFinalize",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java#getAutoRenewalCertificate",
        "test_code_src": "    /**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().orElseThrow().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that auto-renew order is properly finalized.\n     */\n    @Test\n    public void testAutoRenewFinalize() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"finalizeAutoRenewResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        var login = provider.createLogin();\n        var order = login.bindOrder(locationUrl);\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThatIllegalStateException()\n                    .isThrownBy(order::getCertificate);\n            softly.assertThat(order.getAutoRenewalCertificate().getLocation())\n                    .isEqualTo(url(\"https://example.com/acme/cert/1234\"));\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2018-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate())\n                    .isEqualTo(\"2019-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Gets the STAR extension's {@link Certificate} if it is available.\n     *\n     * @since 2.6\n     */\n    public Optional<Certificate> getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                    .map(Value::asURL)\n                    .map(getLogin()::bindCertificate);\n    }",
        "prod_code_tgt": "    /**\n     * Gets the STAR extension's {@link Certificate} if it is available.\n     *\n     * @since 2.6\n     * @throws IllegalStateException\n     *         if the order is not ready yet. You must finalize the order first, and wait\n     *         for the status to become {@link Status#VALID}. It is also thrown if the\n     *         order has been {@link Status#CANCELED}.\n     */\n    public Certificate getAutoRenewalCertificate() {\n        return getJSON().get(\"star-certificate\")\n                .optional()\n                .map(Value::asURL)\n                .map(getLogin()::bindCertificate)\n                .orElseThrow(() -> new IllegalStateException(\"Order is in an invalid state\"));\n    }",
        "test_id": 1,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java#testAutoRenewOrderCertificate",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java#create",
        "test_code_src": "    /**\n     * Test that a new auto-renewal {@link Order} can be created.\n     */\n    @Test\n    public void testAutoRenewOrderCertificate() throws Exception {\n        var autoRenewStart = parseTimestamp(\"2018-01-01T00:00:00Z\");\n        var autoRenewEnd = parseTimestamp(\"2019-01-01T00:00:00Z\");\n        var validity = Duration.ofDays(7);\n        var predate = Duration.ofDays(6);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestAutoRenewOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domain(\"example.org\")\n                        .autoRenewal()\n                        .autoRenewalStart(autoRenewStart)\n                        .autoRenewalEnd(autoRenewEnd)\n                        .autoRenewalLifetime(validity)\n                        .autoRenewalLifetimeAdjust(predate)\n                        .autoRenewalEnableGet()\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(Identifier.dns(\"example.org\"));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(autoRenewStart);\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(autoRenewEnd);\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(validity);\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(predate);\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n        }\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that a new auto-renewal {@link Order} can be created.\n     */\n    @Test\n    public void testAutoRenewOrderCertificate() throws Exception {\n        var autoRenewStart = parseTimestamp(\"2018-01-01T00:00:00Z\");\n        var autoRenewEnd = parseTimestamp(\"2019-01-01T00:00:00Z\");\n        var validity = Duration.ofDays(7);\n        var predate = Duration.ofDays(6);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestAutoRenewOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domain(\"example.org\")\n                        .autoRenewal()\n                        .autoRenewalStart(autoRenewStart)\n                        .autoRenewalEnd(autoRenewEnd)\n                        .autoRenewalLifetime(validity)\n                        .autoRenewalLifetimeAdjust(predate)\n                        .autoRenewalEnableGet()\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(Identifier.dns(\"example.org\"));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow()).isEqualTo(autoRenewStart);\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow()).isEqualTo(autoRenewEnd);\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow()).isEqualTo(validity);\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow()).isEqualTo(predate);\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n        }\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Sends a new order to the server, and returns an {@link Order} object.\n     *\n     * @return {@link Order} that was created\n     */\n    public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation();\n            if (orderLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an order location\");\n            }\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
        "prod_code_tgt": "    /**\n     * Sends a new order to the server, and returns an {@link Order} object.\n     *\n     * @return {@link Order} that was created\n     */\n    public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an order location\"));\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
        "test_id": 2,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderTest.java#testAutoRenewUpdate",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Order.java#getAutoRenewalLifetimeAdjust",
        "test_code_src": "    /**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate()).isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime()).isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isNull();\n            softly.assertThat(order.getNotAfter()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that order is properly updated.\n     */\n    @Test\n    public void testAutoRenewUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAutoRenewOrderResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                assertThat(message).isNotNull();\n            }\n        };\n\n        provider.putMetadata(\"auto-renewal\", JSON.empty());\n\n        var login = provider.createLogin();\n\n        var order = new Order(login, locationUrl);\n        order.update();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.isAutoRenewing()).isTrue();\n            softly.assertThat(order.getAutoRenewalStartDate().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalEndDate().orElseThrow())\n                    .isEqualTo(\"2017-01-01T00:00:00Z\");\n            softly.assertThat(order.getAutoRenewalLifetime().orElseThrow())\n                    .isEqualTo(Duration.ofHours(168));\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust().orElseThrow())\n                    .isEqualTo(Duration.ofDays(6));\n            softly.assertThat(order.getNotBefore()).isEmpty();\n            softly.assertThat(order.getNotAfter()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isTrue();\n        }\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Returns the pre-date period of each certificate, or {@code null}.\n     *\n     * @since 2.7\n     */\n    @Nullable\n    public Duration getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration)\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Returns the pre-date period of each certificate.\n     *\n     * @since 2.7\n     */\n    public Optional<Duration> getAutoRenewalLifetimeAdjust() {\n        return getJSON().get(\"auto-renewal\")\n                    .optional()\n                    .map(Value::asObject)\n                    .orElseGet(JSON::empty)\n                    .get(\"lifetime-adjust\")\n                    .optional()\n                    .map(Value::asDuration);\n    }",
        "test_id": 3,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java#testNullAcmeRateLimitedException",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java#getRetryAfter",
        "test_code_src": "    /**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isNull();\n        assertThat(ex.getDocuments()).isNull();\n    }",
        "test_code_tgt": "    /**\n     * Test that optional parameters are null-safe.\n     */\n    @Test\n    public void testNullAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, null, null);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEmpty();\n        assertThat(ex.getDocuments()).isEmpty();\n    }",
        "prod_code_src": "    /**\n     * Returns the instant of time the request is expected to succeed again. {@code null}\n     * if this moment is not known.\n     */\n    @Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
        "prod_code_tgt": "    /**\n     * Returns the instant of time the request is expected to succeed again. Empty\n     * if this moment is not known.\n     */\n    public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }",
        "test_id": 4,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testUpdate",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
        "test_code_src": "    /**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that authorization is properly updated.\n     */\n    @Test\n    public void testUpdate() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
        "test_id": 5,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testUpdateRetryAfter",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
        "test_code_src": "    /**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that authorization is properly updated, with retry-after header set.\n     */\n    @Test\n    public void testUpdateRetryAfter() throws Exception {\n        var retryAfter = Instant.now().plus(Duration.ofSeconds(30));\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) throws AcmeException {\n                throw new AcmeRetryAfterException(message, retryAfter);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        var ex = assertThrows(AcmeRetryAfterException.class, auth::update);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Http01Challenge.TYPE),\n                        provider.getChallenge(Dns01Challenge.TYPE),\n                        provider.getChallenge(TlsAlpn01Challenge.TYPE));\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
        "test_id": 6,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testRegistration",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#createLogin",
        "test_code_src": "    /**\n     * Test if a new account can be created.\n     */\n    @Test\n    public void testRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            private boolean isUpdate;\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(login).isNotNull();\n                assertThat(url).isEqualTo(locationUrl);\n                assertThat(isUpdate).isFalse();\n                isUpdate = true;\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccount\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                isUpdate = false;\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.addContact(\"mailto:foo@example.com\");\n        builder.agreeToTermsOfService();\n        builder.useKeyPair(accountKey);\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        var account = login.getAccount();\n        assertThat(account.getTermsOfServiceAgreed()).isTrue();\n        assertThat(account.getLocation()).isEqualTo(locationUrl);\n        assertThat(account.hasExternalAccountBinding()).isFalse();\n        assertThat(account.getKeyIdentifier()).isNull();\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test if a new account can be created.\n     */\n    @Test\n    public void testRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            private boolean isUpdate;\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(login).isNotNull();\n                assertThat(url).isEqualTo(locationUrl);\n                assertThat(isUpdate).isFalse();\n                isUpdate = true;\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccount\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                isUpdate = false;\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.addContact(\"mailto:foo@example.com\");\n        builder.agreeToTermsOfService();\n        builder.useKeyPair(accountKey);\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        var account = login.getAccount();\n        assertThat(account.getTermsOfServiceAgreed().orElseThrow()).isTrue();\n        assertThat(account.getLocation()).isEqualTo(locationUrl);\n        assertThat(account.hasExternalAccountBinding()).isFalse();\n        assertThat(account.getKeyIdentifier()).isEmpty();\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "prod_code_tgt": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "test_id": 7,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testOnlyExistingRegistration",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#createLogin",
        "test_code_src": "    /**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test if an existing account is properly returned.\n     */\n    @Test\n    public void testOnlyExistingRegistration() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"newAccountOnlyExisting\").toString());\n                assertThat(keypair).isEqualTo(accountKey);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"newAccountResponse\");\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.onlyExisting();\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "prod_code_tgt": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "test_id": 8,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testWildcard",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
        "test_code_src": "    /**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that wildcard authorization are correct.\n     */\n    @Test\n    public void testWildcard() throws Exception {\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationWildcardResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n        auth.update();\n\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isTrue();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(auth.getLocation()).isEqualTo(locationUrl);\n\n        assertThat(auth.getChallenges()).containsExactlyInAnyOrder(\n                        provider.getChallenge(Dns01Challenge.TYPE));\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
        "test_id": 9,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AuthorizationTest.java#testLazyLoading",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Authorization.java#getExpires",
        "test_code_src": "    /**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test lazy loading.\n     */\n    @Test\n    public void testLazyLoading() throws Exception {\n        var requestWasSent = new AtomicBoolean(false);\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedPostAsGetRequest(URL url, Login login) {\n                requestWasSent.set(true);\n                assertThat(url).isEqualTo(locationUrl);\n                return HttpURLConnection.HTTP_OK;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"updateAuthorizationResponse\");\n            }\n\n            @Override\n            public void handleRetryAfter(String message) {\n                // Just do nothing\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestChallenge(\"http-01\", Http01Challenge::new);\n        provider.putTestChallenge(\"dns-01\", Dns01Challenge::new);\n        provider.putTestChallenge(\"tls-alpn-01\", TlsAlpn01Challenge::new);\n\n        var auth = new Authorization(login, locationUrl);\n\n        // Lazy loading\n        assertThat(requestWasSent).isFalse();\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(requestWasSent).isTrue();\n\n        // Subsequent queries do not trigger another load\n        requestWasSent.set(false);\n        assertThat(auth.getIdentifier().getDomain()).isEqualTo(\"example.org\");\n        assertThat(auth.getStatus()).isEqualTo(Status.VALID);\n        assertThat(auth.isWildcard()).isFalse();\n        assertThat(auth.getExpires().orElseThrow()).isCloseTo(\"2016-01-02T17:12:40Z\", within(1, ChronoUnit.SECONDS));\n        assertThat(requestWasSent).isFalse();\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    @Nullable\n    public Instant getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp)\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Gets the expiry date of the authorization, if set by the server.\n     */\n    public Optional<Instant> getExpires() {\n        return getJSON().get(\"expires\")\n                    .map(Value::asString)\n                    .map(AcmeUtils::parseTimestamp);\n    }",
        "test_id": 10,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testRegistrationWithKid",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#createLogin",
        "test_code_src": "    /**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test if a new account with Key Identifier can be created.\n     */\n    @Test\n    public void testRegistrationWithKid() throws Exception {\n        var accountKey = TestUtils.createKeyPair();\n        var keyIdentifier = \"NCC-1701\";\n        var macKey = TestUtils.createSecretKey(\"SHA-256\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Session session, KeyPair keypair) {\n                assertThat(session).isNotNull();\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThat(keypair).isEqualTo(accountKey);\n\n                var binding = claims.toJSON()\n                                .get(\"externalAccountBinding\")\n                                .asObject();\n\n                var encodedHeader = binding.get(\"protected\").asString();\n                var encodedSignature = binding.get(\"signature\").asString();\n                var encodedPayload = binding.get(\"payload\").asString();\n                var serialized = CompactSerializer.serialize(encodedHeader, encodedPayload, encodedSignature);\n\n                JoseUtilsTest.assertExternalAccountBinding(serialized, resourceUrl, keyIdentifier, macKey);\n\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return JSON.empty();\n            }\n        };\n\n        provider.putTestResource(Resource.NEW_ACCOUNT, resourceUrl);\n\n        var builder = new AccountBuilder();\n        builder.useKeyPair(accountKey);\n        builder.withKeyIdentifier(keyIdentifier, AcmeUtils.base64UrlEncode(macKey.getEncoded()));\n\n        var session = provider.createSession();\n        var login = builder.createLogin(session);\n\n        assertThat(login.getAccountLocation()).isEqualTo(locationUrl);\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation();\n            if (location == null) {\n                throw new AcmeProtocolException(\"Server did not provide an account location\");\n            }\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "prod_code_tgt": "    /**\n     * Creates a new account.\n     * <p>\n     * This method is identical to {@link #create(Session)}, but returns a {@link Login}\n     * that is ready to be used.\n     *\n     * @param session\n     *         {@link Session} to be used for registration\n     * @return {@link Login} referring to the new account\n     */\n    public Login createLogin(Session session) throws AcmeException {\n        requireNonNull(session, \"session\");\n\n        if (keyPair == null) {\n            throw new IllegalStateException(\"Use AccountBuilder.useKeyPair() to set the account's key pair.\");\n        }\n\n        LOG.debug(\"create\");\n\n        try (var conn = session.connect()) {\n            var resourceUrl = session.resourceUrl(Resource.NEW_ACCOUNT);\n\n            var claims = new JSONBuilder();\n            if (!contacts.isEmpty()) {\n                claims.put(\"contact\", contacts);\n            }\n            if (termsOfServiceAgreed != null) {\n                claims.put(\"termsOfServiceAgreed\", termsOfServiceAgreed);\n            }\n            if (keyIdentifier != null) {\n                claims.put(\"externalAccountBinding\", JoseUtils.createExternalAccountBinding(\n                        keyIdentifier, keyPair.getPublic(), macKey, resourceUrl));\n            }\n            if (onlyExisting != null) {\n                claims.put(\"onlyReturnExisting\", onlyExisting);\n            }\n\n            conn.sendSignedRequest(resourceUrl, claims, session, keyPair);\n\n            var location = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an account location\"));\n\n            var login = new Login(location, keyPair, session);\n            login.getAccount().setJSON(conn.readJsonResponse());\n            return login;\n        }\n    }",
        "test_id": 11,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/OrderBuilderTest.java#testOrderCertificate",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/OrderBuilder.java#create",
        "test_code_src": "    /**\n     * Test that a new {@link Order} can be created.\n     */\n    @Test\n    public void testOrderCertificate() throws Exception {\n        var notBefore = parseTimestamp(\"2016-01-01T00:00:00Z\");\n        var notAfter = parseTimestamp(\"2016-01-08T00:00:00Z\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestOrderResponse\");\n            }\n\n            @Override\n            public URL getLocation() {\n                return locationUrl;\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domains(\"example.com\", \"www.example.com\")\n                        .domain(\"example.org\")\n                        .domains(Arrays.asList(\"m.example.com\", \"m.example.org\"))\n                        .identifier(Identifier.dns(\"d.example.com\"))\n                        .identifiers(Arrays.asList(\n                                    Identifier.dns(\"d2.example.com\"),\n                                    Identifier.ip(InetAddress.getByName(\"192.168.1.2\"))))\n                        .notBefore(notBefore)\n                        .notAfter(notAfter)\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(\n                        Identifier.dns(\"example.com\"),\n                        Identifier.dns(\"www.example.com\"),\n                        Identifier.dns(\"example.org\"),\n                        Identifier.dns(\"m.example.com\"),\n                        Identifier.dns(\"m.example.org\"),\n                        Identifier.dns(\"d.example.com\"),\n                        Identifier.dns(\"d2.example.com\"),\n                        Identifier.ip(InetAddress.getByName(\"192.168.1.2\")));\n            softly.assertThat(order.getNotBefore()).isEqualTo(\"2016-01-01T00:10:00Z\");\n            softly.assertThat(order.getNotAfter()).isEqualTo(\"2016-01-08T00:10:00Z\");\n            softly.assertThat(order.getExpires()).isEqualTo(\"2016-01-10T00:00:00Z\");\n            softly.assertThat(order.getStatus()).isEqualTo(Status.PENDING);\n            softly.assertThat(order.isAutoRenewing()).isFalse();\n            softly.assertThat(order.getAutoRenewalStartDate()).isNull();\n            softly.assertThat(order.getAutoRenewalEndDate()).isNull();\n            softly.assertThat(order.getAutoRenewalLifetime()).isNull();\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isNull();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isFalse();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n            softly.assertThat(order.getAuthorizations()).isNotNull();\n            softly.assertThat(order.getAuthorizations()).hasSize(2);\n        }\n\n        provider.close();\n    }",
        "test_code_tgt": "    /**\n     * Test that a new {@link Order} can be created.\n     */\n    @Test\n    public void testOrderCertificate() throws Exception {\n        var notBefore = parseTimestamp(\"2016-01-01T00:00:00Z\");\n        var notAfter = parseTimestamp(\"2016-01-08T00:00:00Z\");\n\n        var provider = new TestableConnectionProvider() {\n            @Override\n            public int sendSignedRequest(URL url, JSONBuilder claims, Login login) {\n                assertThat(url).isEqualTo(resourceUrl);\n                assertThatJson(claims.toString()).isEqualTo(getJSON(\"requestOrderRequest\").toString());\n                assertThat(login).isNotNull();\n                return HttpURLConnection.HTTP_CREATED;\n            }\n\n            @Override\n            public JSON readJsonResponse() {\n                return getJSON(\"requestOrderResponse\");\n            }\n\n            @Override\n            public Optional<URL> getLocation() {\n                return Optional.of(locationUrl);\n            }\n        };\n\n        var login = provider.createLogin();\n\n        provider.putTestResource(Resource.NEW_ORDER, resourceUrl);\n\n        var account = new Account(login);\n        var order = account.newOrder()\n                        .domains(\"example.com\", \"www.example.com\")\n                        .domain(\"example.org\")\n                        .domains(Arrays.asList(\"m.example.com\", \"m.example.org\"))\n                        .identifier(Identifier.dns(\"d.example.com\"))\n                        .identifiers(Arrays.asList(\n                                    Identifier.dns(\"d2.example.com\"),\n                                    Identifier.ip(InetAddress.getByName(\"192.168.1.2\"))))\n                        .notBefore(notBefore)\n                        .notAfter(notAfter)\n                        .create();\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(order.getIdentifiers()).containsExactlyInAnyOrder(\n                        Identifier.dns(\"example.com\"),\n                        Identifier.dns(\"www.example.com\"),\n                        Identifier.dns(\"example.org\"),\n                        Identifier.dns(\"m.example.com\"),\n                        Identifier.dns(\"m.example.org\"),\n                        Identifier.dns(\"d.example.com\"),\n                        Identifier.dns(\"d2.example.com\"),\n                        Identifier.ip(InetAddress.getByName(\"192.168.1.2\")));\n            softly.assertThat(order.getNotBefore().orElseThrow())\n                    .isEqualTo(\"2016-01-01T00:10:00Z\");\n            softly.assertThat(order.getNotAfter().orElseThrow())\n                    .isEqualTo(\"2016-01-08T00:10:00Z\");\n            softly.assertThat(order.getExpires().orElseThrow())\n                    .isEqualTo(\"2016-01-10T00:00:00Z\");\n            softly.assertThat(order.getStatus()).isEqualTo(Status.PENDING);\n            softly.assertThat(order.isAutoRenewing()).isFalse();\n            softly.assertThat(order.getAutoRenewalStartDate()).isEmpty();\n            softly.assertThat(order.getAutoRenewalEndDate()).isEmpty();\n            softly.assertThat(order.getAutoRenewalLifetime()).isEmpty();\n            softly.assertThat(order.getAutoRenewalLifetimeAdjust()).isEmpty();\n            softly.assertThat(order.isAutoRenewalGetEnabled()).isFalse();\n            softly.assertThat(order.getLocation()).isEqualTo(locationUrl);\n            softly.assertThat(order.getAuthorizations()).isNotNull();\n            softly.assertThat(order.getAuthorizations()).hasSize(2);\n        }\n\n        provider.close();\n    }",
        "prod_code_src": "    /**\n     * Sends a new order to the server, and returns an {@link Order} object.\n     *\n     * @return {@link Order} that was created\n     */\n    public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation();\n            if (orderLocation == null) {\n                throw new AcmeProtocolException(\"Server did not provide an order location\");\n            }\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
        "prod_code_tgt": "    /**\n     * Sends a new order to the server, and returns an {@link Order} object.\n     *\n     * @return {@link Order} that was created\n     */\n    public Order create() throws AcmeException {\n        if (identifierSet.isEmpty()) {\n            throw new IllegalArgumentException(\"At least one identifer is required\");\n        }\n\n        var session = login.getSession();\n\n        if (autoRenewal && !session.getMetadata().isAutoRenewalEnabled()) {\n            throw new AcmeException(\"CA does not support short-term automatic renewals\");\n        }\n\n        LOG.debug(\"create\");\n        try (var conn = session.connect()) {\n            var claims = new JSONBuilder();\n            claims.array(\"identifiers\", identifierSet.stream().map(Identifier::toMap).collect(toList()));\n\n            if (notBefore != null) {\n                claims.put(\"notBefore\", notBefore);\n            }\n            if (notAfter != null) {\n                claims.put(\"notAfter\", notAfter);\n            }\n\n            if (autoRenewal) {\n                var arClaims = claims.object(\"auto-renewal\");\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"start-date\", autoRenewalStart);\n                }\n                if (autoRenewalStart != null) {\n                    arClaims.put(\"end-date\", autoRenewalEnd);\n                }\n                if (autoRenewalLifetime != null) {\n                    arClaims.put(\"lifetime\", autoRenewalLifetime);\n                }\n                if (autoRenewalLifetimeAdjust != null) {\n                    arClaims.put(\"lifetime-adjust\", autoRenewalLifetimeAdjust);\n                }\n                if (autoRenewalGet) {\n                    arClaims.put(\"allow-certificate-get\", autoRenewalGet);\n                }\n            }\n\n            conn.sendSignedRequest(session.resourceUrl(Resource.NEW_ORDER), claims, login);\n\n            var orderLocation = conn.getLocation()\n                    .orElseThrow(() -> new AcmeProtocolException(\"Server did not provide an order location\"));\n\n            var order = new Order(login, orderLocation);\n            order.setJSON(conn.readJsonResponse());\n            return order;\n        }\n    }",
        "test_id": 12,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/exception/AcmeRateLimitedExceptionTest.java#testAcmeRateLimitedException",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/exception/AcmeRateLimitedException.java#getRetryAfter",
        "test_code_src": "    /**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }",
        "test_code_tgt": "    /**\n     * Test that parameters are correctly returned.\n     */\n    @Test\n    public void testAcmeRateLimitedException() {\n        var type = URI.create(\"urn:ietf:params:acme:error:rateLimited\");\n        var detail = \"Too many requests per minute\";\n        var retryAfter = Instant.now().plus(Duration.ofMinutes(1));\n        var documents = Arrays.asList(\n                        url(\"http://example.com/doc1.html\"),\n                        url(\"http://example.com/doc2.html\"));\n\n        var problem = createProblem(type, detail, null);\n\n        var ex = new AcmeRateLimitedException(problem, retryAfter, documents);\n\n        assertThat(ex.getType()).isEqualTo(type);\n        assertThat(ex.getMessage()).isEqualTo(detail);\n        assertThat(ex.getRetryAfter().orElseThrow()).isEqualTo(retryAfter);\n        assertThat(ex.getDocuments()).containsAll(documents);\n    }",
        "prod_code_src": "    /**\n     * Returns the instant of time the request is expected to succeed again. {@code null}\n     * if this moment is not known.\n     */\n    @Nullable\n    public Instant getRetryAfter() {\n        return retryAfter;\n    }",
        "prod_code_tgt": "    /**\n     * Returns the instant of time the request is expected to succeed again. Empty\n     * if this moment is not known.\n     */\n    public Optional<Instant> getRetryAfter() {\n        return Optional.ofNullable(retryAfter);\n    }",
        "test_id": 13,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/challenge/ChallengeTest.java#testUnmarshal",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/challenge/Challenge.java#getError",
        "test_code_src": "    /**\n     * Test that after unmarshaling, the challenge properties are set correctly.\n     */\n    @Test\n    public void testUnmarshal() {\n        var challenge = new Challenge(TestUtils.login(), getJSON(\"genericChallenge\"));\n\n        // Test unmarshalled values\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(challenge.getType()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getStatus()).isEqualTo(Status.INVALID);\n            softly.assertThat(challenge.getLocation()).isEqualTo(url(\"http://example.com/challenge/123\"));\n            softly.assertThat(challenge.getValidated()).isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));\n            softly.assertThat(challenge.getJSON().get(\"type\").asString()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getJSON().get(\"url\").asURL()).isEqualTo(url(\"http://example.com/challenge/123\"));\n\n            var error = challenge.getError();\n            softly.assertThat(error).isNotNull();\n            softly.assertThat(error.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:incorrectResponse\"));\n            softly.assertThat(error.getDetail()).isEqualTo(\"bad token\");\n            softly.assertThat(error.getInstance()).isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));\n        }\n    }",
        "test_code_tgt": "    /**\n     * Test that after unmarshaling, the challenge properties are set correctly.\n     */\n    @Test\n    public void testUnmarshal() {\n        var challenge = new Challenge(TestUtils.login(), getJSON(\"genericChallenge\"));\n\n        // Test unmarshalled values\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(challenge.getType()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getStatus()).isEqualTo(Status.INVALID);\n            softly.assertThat(challenge.getLocation()).isEqualTo(url(\"http://example.com/challenge/123\"));\n            softly.assertThat(challenge.getValidated().orElseThrow())\n                    .isCloseTo(\"2015-12-12T17:19:36.336Z\", within(1, ChronoUnit.MILLIS));\n            softly.assertThat(challenge.getJSON().get(\"type\").asString()).isEqualTo(\"generic-01\");\n            softly.assertThat(challenge.getJSON().get(\"url\").asURL()).isEqualTo(url(\"http://example.com/challenge/123\"));\n\n            var error = challenge.getError().orElseThrow();\n            softly.assertThat(error.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:incorrectResponse\"));\n            softly.assertThat(error.getDetail().orElseThrow()).isEqualTo(\"bad token\");\n            softly.assertThat(error.getInstance().orElseThrow())\n                    .isEqualTo(URI.create(\"http://example.com/documents/faq.html\"));\n        }\n    }",
        "prod_code_src": "    /**\n     * Returns a reason why the challenge has failed in the past, if returned by the\n     * server. If there are multiple errors, they can be found in\n     * {@link Problem#getSubProblems()}.\n     */\n    @Nullable\n    public Problem getError() {\n        return getJSON().get(KEY_ERROR)\n                    .map(it -> it.asProblem(getLocation()))\n                    .orElse(null);\n    }",
        "prod_code_tgt": "    /**\n     * Returns a reason why the challenge has failed in the past, if returned by the\n     * server. If there are multiple errors, they can be found in\n     * {@link Problem#getSubProblems()}.\n     */\n    public Optional<Problem> getError() {\n        return getJSON().get(KEY_ERROR).map(it -> it.asProblem(getLocation()));\n    }",
        "test_id": 14,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-05-06 17:27:36+02:00",
        "commit_src": "18e56c9d4f1b2593ed148c40ab5db22d7faaa9fc",
        "commit_tgt": "1907545e5d320ab15b6dab8407395dcaf8720633",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/ProblemTest.java#testProblem",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/Problem.java#toString",
        "test_code_src": "    @Test\n    public void testProblem() {\n        var baseUrl = url(\"https://example.com/acme/1\");\n        var original = TestUtils.getJSON(\"problem\");\n\n        var problem = new Problem(original, baseUrl);\n\n        assertThatJson(problem.asJSON().toString()).isEqualTo(original.toString());\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(problem.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(problem.getTitle()).isEqualTo(\"Some of the identifiers requested were rejected\");\n            softly.assertThat(problem.getDetail()).isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");\n            softly.assertThat(problem.getInstance()).isEqualTo(URI.create(\"https://example.com/documents/error.html\"));\n            softly.assertThat(problem.getIdentifier()).isNull();\n            softly.assertThat(problem.toString()).isEqualTo(\n                    \"Identifier \\\"abc12_\\\" is malformed (\"\n                            + \"Invalid underscore in DNS name \\\"_example.com\\\" \u2012 \"\n                            + \"This CA will not issue for \\\"example.net\\\")\");\n\n            var subs = problem.getSubProblems();\n            softly.assertThat(subs).isNotNull().hasSize(2);\n\n            var p1 = subs.get(0);\n            softly.assertThat(p1.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(p1.getTitle()).isNull();\n            softly.assertThat(p1.getDetail()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n            softly.assertThat(p1.getIdentifier().getDomain()).isEqualTo(\"_example.com\");\n            softly.assertThat(p1.toString()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n\n            var p2 = subs.get(1);\n            softly.assertThat(p2.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:rejectedIdentifier\"));\n            softly.assertThat(p2.getTitle()).isNull();\n            softly.assertThat(p2.getDetail()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n            softly.assertThat(p2.getIdentifier().getDomain()).isEqualTo(\"example.net\");\n            softly.assertThat(p2.toString()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n        }\n    }",
        "test_code_tgt": "    @Test\n    public void testProblem() {\n        var baseUrl = url(\"https://example.com/acme/1\");\n        var original = TestUtils.getJSON(\"problem\");\n\n        var problem = new Problem(original, baseUrl);\n\n        assertThatJson(problem.asJSON().toString()).isEqualTo(original.toString());\n\n        try (var softly = new AutoCloseableSoftAssertions()) {\n            softly.assertThat(problem.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(problem.getTitle().orElseThrow())\n                    .isEqualTo(\"Some of the identifiers requested were rejected\");\n            softly.assertThat(problem.getDetail().orElseThrow())\n                    .isEqualTo(\"Identifier \\\"abc12_\\\" is malformed\");\n            softly.assertThat(problem.getInstance().orElseThrow())\n                    .isEqualTo(URI.create(\"https://example.com/documents/error.html\"));\n            softly.assertThat(problem.getIdentifier()).isEmpty();\n            softly.assertThat(problem.toString()).isEqualTo(\n                    \"Identifier \\\"abc12_\\\" is malformed (\"\n                            + \"Invalid underscore in DNS name \\\"_example.com\\\" \u2012 \"\n                            + \"This CA will not issue for \\\"example.net\\\")\");\n\n            var subs = problem.getSubProblems();\n            softly.assertThat(subs).isNotNull().hasSize(2);\n\n            var p1 = subs.get(0);\n            softly.assertThat(p1.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:malformed\"));\n            softly.assertThat(p1.getTitle()).isEmpty();\n            softly.assertThat(p1.getDetail().orElseThrow())\n                    .isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n            softly.assertThat(p1.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"_example.com\");\n            softly.assertThat(p1.toString()).isEqualTo(\"Invalid underscore in DNS name \\\"_example.com\\\"\");\n\n            var p2 = subs.get(1);\n            softly.assertThat(p2.getType()).isEqualTo(URI.create(\"urn:ietf:params:acme:error:rejectedIdentifier\"));\n            softly.assertThat(p2.getTitle()).isEmpty();\n            softly.assertThat(p2.getDetail().orElseThrow())\n                    .isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n            softly.assertThat(p2.getIdentifier().orElseThrow().getDomain()).isEqualTo(\"example.net\");\n            softly.assertThat(p2.toString()).isEqualTo(\"This CA will not issue for \\\"example.net\\\"\");\n        }\n    }",
        "prod_code_src": "    /**\n     * Returns a human-readable description of the problem, that is as specific as\n     * possible. The description may be localized if supported by the server.\n     * <p>\n     * If {@link #getSubProblems()} exist, they will be appended.\n     * <p>\n     * Technically, it returns {@link #getDetail()}. If not set, {@link #getTitle()} is\n     * returned instead. As a last resort, {@link #getType()} is returned.\n     */\n    @Override\n    public String toString() {\n        var sb = new StringBuilder();\n\n        if (getDetail() != null) {\n            sb.append(getDetail());\n        } else if (getTitle() != null) {\n            sb.append(getTitle());\n        } else {\n            sb.append(getType());\n        }\n\n        var subproblems = getSubProblems();\n\n        if (!subproblems.isEmpty()) {\n            sb.append(\" (\");\n            var first = true;\n            for (var sub : subproblems) {\n                if (!first) {\n                    sb.append(\" \u2012 \");\n                }\n                sb.append(sub.toString());\n                first = false;\n            }\n            sb.append(')');\n        }\n\n        return sb.toString();\n    }",
        "prod_code_tgt": "    /**\n     * Returns a human-readable description of the problem, that is as specific as\n     * possible. The description may be localized if supported by the server.\n     * <p>\n     * If {@link #getSubProblems()} exist, they will be appended.\n     * <p>\n     * Technically, it returns {@link #getDetail()}. If not set, {@link #getTitle()} is\n     * returned instead. As a last resort, {@link #getType()} is returned.\n     */\n    @Override\n    public String toString() {\n        var sb = new StringBuilder();\n\n        if (getDetail().isPresent()) {\n            sb.append(getDetail().get());\n        } else if (getTitle().isPresent()) {\n            sb.append(getTitle().get());\n        } else {\n            sb.append(getType());\n        }\n\n        var subproblems = getSubProblems();\n\n        if (!subproblems.isEmpty()) {\n            sb.append(\" (\");\n            var first = true;\n            for (var sub : subproblems) {\n                if (!first) {\n                    sb.append(\" \u2012 \");\n                }\n                sb.append(sub.toString());\n                first = false;\n            }\n            sb.append(')');\n        }\n\n        return sb.toString();\n    }",
        "test_id": 15,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-04-29 15:13:21+02:00",
        "commit_src": "09a72d606b56fe44f23fe53303675c4b9d3a7b45",
        "commit_tgt": "01a2206c62db61ab808577cbb4d95eded9572dd0",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/AccountBuilderTest.java#testEmailAddresses",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/AccountBuilder.java#addEmail",
        "test_code_src": "    @Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n    }",
        "test_code_tgt": "    @Test\n    public void testEmailAddresses() {\n        var builder = Mockito.spy(AccountBuilder.class);\n        builder.addEmail(\"foo@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:foo@example.com\"));\n\n        // mailto is still accepted if present\n        builder.addEmail(\"mailto:bar@example.com\");\n        Mockito.verify(builder).addContact(Mockito.eq(\"mailto:bar@example.com\"));\n    }",
        "prod_code_src": "    /**\n     * Add an email address to the list of contacts.\n     * <p>\n     * This is a convenience call for {@link #addContact(String)} that doesn't require\n     * to prepend the \"mailto\" scheme to an email address.\n     *\n     * @param email\n     *         Contact email without \"mailto\" scheme (e.g. test@gmail.com)\n     * @return itself\n     * @throws IllegalArgumentException\n     *         if there is a syntax error in the URI string\n     */\n    public AccountBuilder addEmail(String email) {\n        addContact(\"mailto:\" + email);\n        return this;\n    }",
        "prod_code_tgt": "    /**\n     * Add an email address to the list of contacts.\n     * <p>\n     * This is a convenience call for {@link #addContact(String)} that doesn't require\n     * to prepend the \"mailto\" scheme to an email address.\n     *\n     * @param email\n     *         Contact email without \"mailto\" scheme (e.g. test@gmail.com)\n     * @return itself\n     * @throws IllegalArgumentException\n     *         if there is a syntax error in the URI string\n     */\n    public AccountBuilder addEmail(String email) {\n        if (email.startsWith(\"mailto:\")) {\n            addContact(email);\n        } else {\n            addContact(\"mailto:\" + email);\n        }\n        return this;\n    }",
        "test_id": 16,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    },
    {
        "repo_name": "shred/acme4j",
        "commit_date": "2023-04-24 21:16:07+02:00",
        "commit_src": "d6296111f705fc9e6f4501d1a6fbc390a5096e9e",
        "commit_tgt": "783fdde0139372c83719107b5da0dc8b91c244e6",
        "changed_test": "acme4j-client/src/test/java/org/shredzone/acme4j/connector/NetworkSettingsTest.java#testInvalidTimeouts",
        "changed_prod": "acme4j-client/src/main/java/org/shredzone/acme4j/connector/NetworkSettings.java#setTimeout",
        "test_code_src": "    @Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofMillis(Integer.MAX_VALUE + 1L)),\n                \"timeout accepted out of range value\");\n    }",
        "test_code_tgt": "    @Test\n    public void testInvalidTimeouts() {\n        var settings = new NetworkSettings();\n\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(null),\n                \"timeout accepted null\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ZERO),\n                \"timeout accepted zero duration\");\n        assertThrows(IllegalArgumentException.class,\n                () -> settings.setTimeout(Duration.ofSeconds(20).negated()),\n                \"timeout accepted negative duration\");\n    }",
        "prod_code_src": "    /**\n     * Sets the network timeout to be used for connections. Defaults to 10 seconds.\n     *\n     * @param timeout\n     *         Network timeout {@link Duration}\n     */\n    public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n        if (timeout.toMillis() > Integer.MAX_VALUE) {\n            throw new IllegalArgumentException(\"Timeout is out of range\");\n        }\n\n        this.timeout = timeout;\n    }",
        "prod_code_tgt": "    /**\n     * Sets the network timeout to be used for connections. Defaults to 10 seconds.\n     *\n     * @param timeout\n     *         Network timeout {@link Duration}\n     */\n    public void setTimeout(Duration timeout) {\n        if (timeout == null || timeout.isNegative() || timeout.isZero()) {\n            throw new IllegalArgumentException(\"Timeout must be positive\");\n        }\n\n        this.timeout = timeout;\n    }",
        "test_id": 17,
        "src_java_version": "11",
        "src_maven_version": "3.8.1",
        "tgt_java_version": "11",
        "tgt_maven_version": "3.8.1"
    }
]